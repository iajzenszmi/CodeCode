ian@ian-HP-Stream-Laptop-11-y0XX:~$ gcc chebc.c -lm
ian@ian-HP-Stream-Laptop-11-y0XX:~$ ./a.out
Coefficients: 1.64717 -0.232299 -0.0537151 0.00245824 0.000282119 -7.72223e-06 -5.89856e-07 1.15214e-08 6.5963e-10 -1.00219e-11

Approximation:
   x           func(x)     approx      diff
 0.00000000  1.00000000  1.00000000  4.7e-13
 0.05000000  0.99875026  0.99875026 -9.4e-14
 0.10000000  0.99500417  0.99500417  4.6e-13
 0.15000000  0.98877108  0.98877108 -4.7e-14
 0.20000000  0.98006658  0.98006658 -4.6e-13
 0.25000000  0.96891242  0.96891242 -2.3e-13
 0.30000000  0.95533649  0.95533649  2.6e-13
 0.35000000  0.93937271  0.93937271  4.6e-13
 0.40000000  0.92106099  0.92106099  2.0e-13
 0.45000000  0.90044710  0.90044710 -2.5e-13
 0.50000000  0.87758256  0.87758256 -4.6e-13
 0.55000000  0.85252452  0.85252452 -2.5e-13
 0.60000000  0.82533561  0.82533561  2.0e-13
 0.65000000  0.79608380  0.79608380  4.5e-13
 0.70000000  0.76484219  0.76484219  2.5e-13
 0.75000000  0.73168887  0.73168887 -2.3e-13
 0.80000000  0.69670671  0.69670671 -4.5e-13
 0.85000000  0.65998315  0.65998315 -4.4e-14
 0.90000000  0.62160997  0.62160997  4.5e-13
 0.95000000  0.58168309  0.58168309 -9.0e-14
 1.00000000  0.54030231  0.54030231  4.5e-13
ian@ian-HP-Stream-Laptop-11-y0XX:~$ sloccount chebc.c
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/chebc.c to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
50      top_dir         ansic=50


Totals grouped by language (dominant language first):
ansic:           50 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 50
Development Effort Estimate, Person-Years (Person-Months) = 0.01 (0.10)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.09 (1.06)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.10
Total Estimated Cost to Develop                           = $ 1,163
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
ian@ian-HP-Stream-Laptop-11-y0XX:~$ cat chebc.c
#include <stdio.h>
#include <string.h>
#include <math.h>

#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif

double test_func(double x)
{
	//return sin(cos(x)) * exp(-(x - 5)*(x - 5)/10);
	return cos(x);
}

// map x from range [min, max] to [min_to, max_to]
double map(double x, double min_x, double max_x, double min_to, double max_to)
{
	return (x - min_x)/(max_x - min_x)*(max_to - min_to) + min_to;
}

void cheb_coef(double (*func)(double), int n, double min, double max, double *coef)
{
	memset(coef, 0, sizeof(double) * n);
	for (int i = 0; i < n; i++) {
		double f = func(map(cos(M_PI*(i + .5f)/n), -1, 1, min, max))*2/n;
		for (int j = 0; j < n; j++)
			coef[j] += f*cos(M_PI*j*(i + .5f)/n);
	}
}

// f(x) = sum_{k=0}^{n - 1} c_k T_k(x) - c_0/2
// Note that n >= 2 is assumed; probably should check for that, however silly it is.
double cheb_approx(double x, int n, double min, double max, double *coef)
{
	double a = 1, b = map(x, min, max, -1, 1), c;
	double res = coef[0]/2 + coef[1]*b;

	x = 2*b;
	for (int i = 2; i < n; a = b, b = c, i++)
		// T_{n+1} = 2x T_n - T_{n-1}
		res += coef[i]*(c = x*b - a);

	return res;
}

int main(void)
{
#define N 10
	double c[N], min = 0, max = 1;
	cheb_coef(test_func, N, min, max, c);

	printf("Coefficients:");
	for (int i = 0; i < N; i++)
		printf(" %lg", c[i]);

	puts("\n\nApproximation:\n   x           func(x)     approx      diff");
	for (int i = 0; i <= 20; i++) {
		double x = map(i, 0, 20, min, max);
		double f = test_func(x);
		double approx = cheb_approx(x, N, min, max, c);

		printf("% 10.8lf % 10.8lf % 10.8lf % 4.1le\n",
			x, f, approx, approx - f);
	}

	return 0;
}

ian@ian-HP-Stream-Laptop-11-y0XX:~$ 
http://rosettacode.org/mw/index.php?title=Chebyshev_coefficients&action=edit&section=1
