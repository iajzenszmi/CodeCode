ian@Ian2:~/s4/S4$ cd
ian@Ian2:~$ ls
 aima-python   Public                            telbil
 Desktop      'Quick Support Any Desk Amazon?'   telbil.f
 Documents    'S$'                               telbilfrun.txt
 Downloads     s4                                telbil.o
 iacloneio     S4                                Templates
 Music         sefaria                           Videos
 Pictures      snap                              zoom_amd64.deb
ian@Ian2:~$ cd Downloads
ian@Ian2:~/Downloads$ ls
'agents - Jupyter Notebook_files'
'agents - Jupyter Notebook.html'
 agents.py
 eco_surveys-aus-2018-en.pdf
 google-chrome-stable_current_amd64.deb
 RecamensSequence.py
 TrendsinAustraliasclimate-meansandextremesaglobalcontext.pdf
 TrendsinAustraliasclimate-meansandextremesaglobalcontext.txt
 youtubedl
ian@Ian2:~/Downloads$ python3 RecamensSequence.py
First fifteen members of Recamans sequence: [0, 1, 3, 6, 2, 7, 13, 20, 12, 21, 11, 22, 10, 23, 9]
First duplicate number in series is: a(24) = 42
Range 0 ..1000 is covered by terms up to a(328002)
ian@Ian2:~/Downloads$ cat RecamensSequence.py
#sourced from 
# http://rosettacode.org/mw/index.php?title=Recaman%27s_sequence
#&action=edit&section=32
from itertools import islice

class Recamans():
    "Recamán's sequence generator callable class"
    def __init__(self):
        self.a = None   # Set of results so far
        self.n = None   # n'th term (counting from zero)
    
    def __call__(self):
        "Recamán's sequence  generator"
        nxt = 0
        a, n = {nxt}, 0
        self.a = a
        self.n = n
        yield nxt
        while True:
            an1, n = nxt, n + 1
            nxt = an1 - n
            if nxt < 0 or nxt in a:
                nxt = an1 + n
            a.add(nxt)
            self.n = n
            yield nxt

if __name__ == '__main__':
    recamans = Recamans()
    print("First fifteen members of Recamans sequence:", 
          list(islice(recamans(), 15)))

    so_far = set()
    for term in recamans():
        if term in so_far:
            print(f"First duplicate number in series is: a({recamans.n}) = {term}")
            break
        so_far.add(term)
    
    n = 1_000
    setn = set(range(n + 1))    # The target set of numbers to be covered
    for _ in recamans():
        if setn.issubset(recamans.a):
            print(f"Range 0 ..{n} is covered by terms up to a({recamans.n})")
            breakian@Ian2:~/Downloads$ 

