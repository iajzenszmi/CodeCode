ian@debian:~$ mkdir wtime
ian@debian:~$ cd wtime
ian@debian:~/wtime$ wget https://people.sc.fsu.edu/~jburkardt/f_src/wtime/wtime_test.f90
--2020-08-31 14:22:17--  https://people.sc.fsu.edu/~jburkardt/f_src/wtime/wtime_test.f90
Resolving people.sc.fsu.edu (people.sc.fsu.edu)... 144.174.16.102
Connecting to people.sc.fsu.edu (people.sc.fsu.edu)|144.174.16.102|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 15939 (16K) [text/plain]
Saving to: ‘wtime_test.f90’

wtime_test.f90      100%[===================>]  15.57K  50.6KB/s    in 0.3s    

2020-08-31 14:22:19 (50.6 KB/s) - ‘wtime_test.f90’ saved [15939/15939]

ian@debian:~/wtime$ wget https://people.sc.fsu.edu/~jburkardt/f_src/wtime/wtime.f90
--2020-08-31 14:23:28--  https://people.sc.fsu.edu/~jburkardt/f_src/wtime/wtime.f90
Resolving people.sc.fsu.edu (people.sc.fsu.edu)... 144.174.16.102
Connecting to people.sc.fsu.edu (people.sc.fsu.edu)|144.174.16.102|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 1037 (1.0K) [text/plain]
Saving to: ‘wtime.f90’

wtime.f90           100%[===================>]   1.01K  --.-KB/s    in 0s      

2020-08-31 14:23:29 (5.84 MB/s) - ‘wtime.f90’ saved [1037/1037]

ian@debian:~/wtime$ f95 wtime.f90
/usr/bin/ld: /usr/lib/gcc/x86_64-linux-gnu/8/../../../x86_64-linux-gnu/Scrt1.o: in function `_start':
(.text+0x20): undefined reference to `main'
collect2: error: ld returned 1 exit status
ian@debian:~/wtime$ f95  wtime.f90 -c
ian@debian:~/wtime$ f95 wtime_test.f90-c
f95: error: wtime_test.f90-c: No such file or directory
ian@debian:~/wtime$ f95 wtime_test.f90 -c
ian@debian:~/wtime$ f95 -o wtime_test wtime_test.o wtime.o
ian@debian:~/wtime$ ./wtime_test
August 31 2020   2:28:49.876 PM
 
WTIME_TEST
  FORTRAN90 version.
  Test the WTIME library.
 
TEST01
  Time the FORTRAN90 RANDOM_NUMBER routine:
 
    call random_number ( x(1:n) )
 
  Data vectors will be of minimum size         1024
  Data vectors will be of maximum size      1048576
  Number of repetitions of the operation:            5
 
  Timing results:
 
    Vector Size  Rep #1        Rep #2        Rep #3        Rep #4        Rep #5
 
      1024      0.001000      0.000000      0.000000      0.000000      0.000000
      2048      0.000000      0.000000      0.000000      0.000000      0.000000
      4096      0.000000      0.000000      0.000000      0.000000      0.000000
      8192      0.000000      0.000000      0.000000      0.000000      0.000000
     16384      0.001000      0.000000      0.000000      0.000000      0.000000
     32768      0.000000      0.001000      0.001000      0.000000      0.000000
     65536      0.001000      0.000000      0.000000      0.001000      0.001000
    131072      0.003000      0.002000      0.002000      0.002000      0.002000
    262144      0.004000      0.003000      0.003000      0.003000      0.003000
    524288      0.008000      0.007000      0.007000      0.007000      0.007000
   1048576      0.018000      0.014000      0.014000      0.014000      0.013000
 
TEST02
  Time vectorized operations:
 
    y(1:n) =        x(1:n)  
    y(1:n) = PI *   x(1:n) )
    y(1:n) = sqrt ( x(1:n) )
    y(1:n) = exp  ( x(1:n) )
 
  Data vectors will be of minimum size         4096
  Data vectors will be of maximum size      4194304
  Number of repetitions of the operation:            5
 
  Timing results:
 
    Vector Size  Rep #1        Rep #2        Rep #3        Rep #4        Rep #5
 
      4096      0.000000      0.000000      0.000000      0.000000      0.000000
      8192      0.000000      0.000000      0.000000      0.000000      0.000000
     16384      0.000000      0.000000      0.000000      0.000000      0.000000
     32768      0.001000      0.000000      0.000000      0.000000      0.000000
     65536      0.001000      0.000000      0.000000      0.000000      0.000000
    131072      0.002000      0.000000      0.001000      0.001000      0.000000
    262144      0.002000      0.001000      0.001000      0.002000      0.001000
    524288      0.006000      0.003000      0.002000      0.003000      0.002000
   1048576      0.008000      0.005000      0.004000      0.005000      0.005000
   2097152      0.016000      0.010000      0.009000      0.009000      0.009000
   4194304      0.034000      0.018000      0.018000      0.018000      0.017000
 
  Timing results:
 
    Vector Size  Rep #1        Rep #2        Rep #3        Rep #4        Rep #5
 
      4096      0.000000      0.000000      0.000000      0.000000      0.000000
      8192      0.000000      0.000000      0.001000      0.000000      0.000000
     16384      0.000000      0.001000      0.000000      0.000000      0.000000
     32768      0.001000      0.000000      0.000000      0.001000      0.000000
     65536      0.001000      0.000000      0.000000      0.001000      0.000000
    131072      0.001000      0.000000      0.001000      0.001000      0.000000
    262144      0.002000      0.001000      0.001000      0.002000      0.001000
    524288      0.003000      0.002000      0.003000      0.003000      0.002000
   1048576      0.005000      0.004000      0.005000      0.005000      0.006000
   2097152      0.009000      0.010000      0.009000      0.010000      0.010000
   4194304      0.019000      0.018000      0.019000      0.019000      0.019000
 
  Timing results:
 
    Vector Size  Rep #1        Rep #2        Rep #3        Rep #4        Rep #5
 
      4096      0.000000      0.000000      0.000000      0.000000      0.000000
      8192      0.000000      0.000000      0.000000      0.000000      0.000000
     16384      0.000000      0.000000      0.000000      0.001000      0.000000
     32768      0.001000      0.000000      0.001000      0.001000      0.001000
     65536      0.001000      0.001000      0.001000      0.001000      0.001000
    131072      0.002000      0.002000      0.002000      0.002000      0.002000
    262144      0.004000      0.004000      0.003000      0.004000      0.004000
    524288      0.007000      0.008000      0.008000      0.007000      0.008000
   1048576      0.015000      0.015000      0.015000      0.014000      0.015000
   2097152      0.030000      0.030000      0.030000      0.030000      0.031000
   4194304      0.060000      0.059000      0.060000      0.060000      0.067000
 
  Timing results:
 
    Vector Size  Rep #1        Rep #2        Rep #3        Rep #4        Rep #5
 
      4096      0.001000      0.001000      0.000000      0.000000      0.000000
      8192      0.000000      0.000000      0.000000      0.000000      0.001000
     16384      0.001000      0.001000      0.000000      0.001000      0.001000
     32768      0.002000      0.001000      0.002000      0.002000      0.002000
     65536      0.011000      0.004000      0.003000      0.003000      0.003000
    131072      0.013000      0.007000      0.007000      0.007000      0.007000
    262144      0.016000      0.015000      0.014000      0.014000      0.015000
    524288      0.045000      0.029000      0.029000      0.029000      0.030000
   1048576      0.073000      0.058000      0.059000      0.058000      0.059000
   2097152      0.117000      0.117000      0.116000      0.116000      0.118000
   4194304      0.233000      0.234000      0.234000      0.234000      0.237000
 
TEST03
  Time the unvectorized loops:
 
    do i = 1, n
      y(i) =        x(i)  
      y(i) = PI *   x(i) )
      y(i) = sqrt ( x(i) )
      y(i) = exp  ( x(i) )
    end do
 
  Data vectors will be of minimum size         4096
  Data vectors will be of maximum size      4194304
  Number of repetitions of the operation:            5
 
  Timing results:
 
    Vector Size  Rep #1        Rep #2        Rep #3        Rep #4        Rep #5
 
      4096      0.000000      0.000000      0.000000      0.000000      0.000000
      8192      0.000000      0.000000      0.000000      0.000000      0.000000
     16384      0.001000      0.001000      0.001000      0.000000      0.000000
     32768      0.001000      0.000000      0.000000      0.000000      0.000000
     65536      0.000000      0.001000      0.001000      0.000000      0.000000
    131072      0.001000      0.001000      0.001000      0.001000      0.001000
    262144      0.003000      0.002000      0.002000      0.002000      0.002000
    524288      0.006000      0.004000      0.004000      0.004000      0.004000
   1048576      0.012000      0.008000      0.007000      0.008000      0.008000
   2097152      0.025000      0.016000      0.016000      0.016000      0.016000
   4194304      0.050000      0.032000      0.032000      0.032000      0.032000
 
  Timing results:
 
    Vector Size  Rep #1        Rep #2        Rep #3        Rep #4        Rep #5
 
      4096      0.000000      0.000000      0.000000      0.000000      0.000000
      8192      0.000000      0.000000      0.000000      0.000000      0.001000
     16384      0.000000      0.000000      0.001000      0.000000      0.000000
     32768      0.000000      0.001000      0.000000      0.000000      0.001000
     65536      0.000000      0.001000      0.001000      0.001000      0.001000
    131072      0.001000      0.001000      0.001000      0.001000      0.001000
    262144      0.002000      0.003000      0.003000      0.003000      0.002000
    524288      0.006000      0.005000      0.005000      0.005000      0.005000
   1048576      0.011000      0.010000      0.011000      0.011000      0.010000
   2097152      0.022000      0.021000      0.021000      0.021000      0.021000
   4194304      0.042000      0.042000      0.042000      0.042000      0.043000
 
  Timing results:
 
    Vector Size  Rep #1        Rep #2        Rep #3        Rep #4        Rep #5
 
      4096      0.000000      0.000000      0.000000      0.000000      0.000000
      8192      0.001000      0.000000      0.000000      0.000000      0.000000
     16384      0.000000      0.000000      0.001000      0.001000      0.000000
     32768      0.001000      0.001000      0.000000      0.001000      0.001000
     65536      0.001000      0.001000      0.001000      0.001000      0.001000
    131072      0.002000      0.002000      0.002000      0.002000      0.002000
    262144      0.003000      0.004000      0.004000      0.004000      0.004000
    524288      0.008000      0.007000      0.007000      0.007000      0.008000
   1048576      0.015000      0.015000      0.014000      0.015000      0.015000
   2097152      0.030000      0.030000      0.030000      0.030000      0.030000
   4194304      0.060000      0.060000      0.060000      0.060000      0.059000
 
  Timing results:
 
    Vector Size  Rep #1        Rep #2        Rep #3        Rep #4        Rep #5
 
      4096      0.000000      0.000000      0.000000      0.000000      0.000000
      8192      0.001000      0.001000      0.000000      0.000000      0.000000
     16384      0.001000      0.001000      0.001000      0.001000      0.001000
     32768      0.002000      0.002000      0.002000      0.002000      0.002000
     65536      0.004000      0.004000      0.004000      0.004000      0.004000
    131072      0.008000      0.007000      0.008000      0.008000      0.008000
    262144      0.016000      0.015000      0.015000      0.015000      0.016000
    524288      0.031000      0.031000      0.031000      0.031000      0.031000
   1048576      0.062000      0.062000      0.063000      0.063000      0.063000
   2097152      0.125000      0.125000      0.125000      0.125000      0.125000
   4194304      0.251000      0.250000      0.250000      0.251000      0.250000
 
TEST04
  Time the 2D nearest neighbor problem.
 
  Given X(2,N) and Y(2),
    find X(2,*) closest to Y(2).
 
    do i = 1, n
      if distance ( x(2,i), y ) < minimum so far
        x_min = x(2,i)
    end do
 
  Data vectors will be of minimum size         1024
  Data vectors will be of maximum size      1048576
  Number of repetitions of the operation:            5
 
  Timing results:
 
    Vector Size  Rep #1        Rep #2        Rep #3        Rep #4        Rep #5
 
      1024      0.000000      0.000000      0.000000      0.000000      0.000000
      2048      0.000000      0.001000      0.000000      0.000000      0.000000
      4096      0.000000      0.000000      0.000000      0.000000      0.000000
      8192      0.000000      0.000000      0.000000      0.001000      0.000000
     16384      0.000000      0.000000      0.000000      0.000000      0.000000
     32768      0.001000      0.000000      0.001000      0.000000      0.001000
     65536      0.001000      0.001000      0.001000      0.001000      0.001000
    131072      0.002000      0.002000      0.002000      0.002000      0.002000
    262144      0.004000      0.004000      0.004000      0.004000      0.004000
    524288      0.008000      0.008000      0.008000      0.008000      0.008000
   1048576      0.015000      0.016000      0.016000      0.016000      0.015000
 
TEST05
  Time the matrix multiplication problem.
 
  Compute C = A * B
 
  where
    A is an L by M matrix,
    B is an M by N matrix,
  and so
    C is an L by N matrix.
 
  Minimum value of L = M = N =            4
  Maximum value of L = M = N =         1024
  Number of repetitions of the operation:            5
 
  Use nested DO loops for matrix multiplication.
 
  Timing results using nested DO loops:
 
    Vector Size  Rep #1        Rep #2        Rep #3        Rep #4        Rep #5
 
         4      0.000000      0.000000      0.000000      0.000000      0.000000
        16      0.000000      0.000000      0.000000      0.000000      0.001000
        64      0.006000      0.006000      0.006000      0.006000      0.006000
       256      0.415000      0.409000      0.411000      0.409000      0.410000
 
  Use the MATMUL routine for matrix multiplication.
 
  Timing results using MATMUL:
 
    Vector Size  Rep #1        Rep #2        Rep #3        Rep #4        Rep #5
 
         4      0.002000      0.000000      0.000000      0.000000      0.000000
        16      0.000000      0.000000      0.000000      0.000000      0.000000
        64      0.001000      0.000000      0.000000      0.000000      0.000000
       256      0.031000      0.026000      0.026000      0.025000      0.026000
      1024      1.546000      1.564000      1.612000      1.548000      1.550000
 
WTIME_TEST
  Normal end of execution.
 
August 31 2020   2:29:12.239 PM
STOP 0
ian@debian:~/wtime$ cat wtime_test.f90
program main

!*****************************************************************************80
!
!! MAIN is the main program for WTIME_TEST.
!
!  Discussion:
!
!    WTIME_TEST tests the WTIME library.
!
!  Licensing:
!
!    This code is distributed under the GNU LGPL license. 
!
!  Modified:
!
!    27 April 2009
!
!  Author:
!
!    John Burkardt
!
  implicit none

  call timestamp ( )
  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) 'WTIME_TEST'
  write ( *, '(a)' ) '  FORTRAN90 version.'
  write ( *, '(a)' ) '  Test the WTIME library.'

  call test01 ( )
  call test02 ( )
  call test03 ( )
  call test04 ( )
  call test05 ( )
!
!  Terminate.
!
  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) 'WTIME_TEST'
  write ( *, '(a)' ) '  Normal end of execution.'
  write ( *, '(a)' ) ' '
  call timestamp ( )

  stop 0
end
subroutine test01 ( )

!*****************************************************************************80
!
!! TEST01 times the FORTRAN90 RANDOM_NUMBER routine.
!
!  Licensing:
!
!    This code is distributed under the GNU LGPL license. 
!
!  Modified:
!
!    27 April 2009
!
!  Author:
!
!    John Burkardt
!
  implicit none

  integer ( kind = 4 ), parameter :: n_log_min = 10
  integer ( kind = 4 ), parameter :: n_log_max = 20
  integer ( kind = 4 ), parameter :: n_min = 2**n_log_min
  integer ( kind = 4 ), parameter :: n_max = 2**n_log_max
  integer ( kind = 4 ), parameter :: n_rep = 5
  integer ( kind = 4 ), parameter :: n_test = 1

  real ( kind = 8 ) delta(n_log_max,n_rep)
  integer ( kind = 4 ) i_rep
  integer ( kind = 4 ) n
  integer ( kind = 4 ) n_log
  real ( kind = 8 ) seconds
  real ( kind = 8 ) wtime
  real ( kind = 8 ) x(n_max)

  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) 'TEST01'
  write ( *, '(a)' ) '  Time the FORTRAN90 RANDOM_NUMBER routine:'
  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) '    call random_number ( x(1:n) )'
  write ( *, '(a)' ) ' '
  write ( *, '(a,i12)' ) '  Data vectors will be of minimum size ', n_min 
  write ( *, '(a,i12)' ) '  Data vectors will be of maximum size ', n_max 
  write ( *, '(a,i12)' ) '  Number of repetitions of the operation: ', n_rep

  do i_rep = 1, n_rep

    do n_log = n_log_min, n_log_max

      n = 2**( n_log )

      seconds = wtime ( )

      call random_number ( harvest = x(1:n) )

      delta(n_log,i_rep) = wtime ( ) - seconds

    end do

  end do

  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) '  Timing results:'
  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) '    Vector Size  Rep #1        Rep #2        Rep #3        ' &
    // 'Rep #4        Rep #5'
  write ( *, '(a)' ) ' '
  do n_log = n_log_min, n_log_max
    n = 2**( n_log )
    write ( *, '(i10,5f14.6)' ) n, delta(n_log,1:n_rep)
  end do

  return
end
subroutine test02 ( )

!*****************************************************************************80
!
!! TEST02 times the vectorized EXP routine.
!
!  Licensing:
!
!    This code is distributed under the GNU LGPL license. 
!
!  Modified:
!
!    27 April 2009
!
!  Author:
!
!    John Burkardt
!
  implicit none

  integer ( kind = 4 ), parameter :: n_log_min = 12
  integer ( kind = 4 ), parameter :: n_log_max = 22
  integer ( kind = 4 ), parameter :: n_min = 2**n_log_min
  integer ( kind = 4 ), parameter :: n_max = 2**n_log_max
  integer ( kind = 4 ), parameter :: n_rep = 5

  real ( kind = 8 ) delta(n_log_max,n_rep)
  integer ( kind = 4 ) func
  integer ( kind = 4 ) i_rep
  integer ( kind = 4 ) n
  integer ( kind = 4 ) n_log
  real ( kind = 8 ), parameter :: pi = 3.141592653589793D+00
  real ( kind = 8 ) seconds
  real ( kind = 8 ) wtime
  real ( kind = 8 ) x(n_max)
  real ( kind = 8 ) y(n_max)

  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) 'TEST02'
  write ( *, '(a)' ) '  Time vectorized operations:'
  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) '    y(1:n) =        x(1:n)  '
  write ( *, '(a)' ) '    y(1:n) = PI *   x(1:n) )'
  write ( *, '(a)' ) '    y(1:n) = sqrt ( x(1:n) )'
  write ( *, '(a)' ) '    y(1:n) = exp  ( x(1:n) )'
  write ( *, '(a)' ) ' '
  write ( *, '(a,i12)' ) '  Data vectors will be of minimum size ', n_min
  write ( *, '(a,i12)' ) '  Data vectors will be of maximum size ', n_max
  write ( *, '(a,i12)' ) '  Number of repetitions of the operation: ', n_rep

  do func = 1, 4

    do i_rep = 1, n_rep
  
      do n_log = n_log_min, n_log_max

        n = 2**( n_log )

        call random_number ( harvest = x(1:n) )

        seconds = wtime ( )

        if ( func == 1 ) then
          y(1:n) = x(1:n)
        else if ( func == 2 ) then
          y(1:n) = pi * x(1:n)
        else if ( func == 3 ) then
          y(1:n) = sqrt ( x(1:n) )
        else if ( func == 4 ) then
          y(1:n) = exp ( x(1:n) )
        end if

        delta(n_log,i_rep) = wtime ( ) - seconds

      end do

    end do

    write ( *, '(a)' ) ' '
    write ( *, '(a)' ) '  Timing results:'
    write ( *, '(a)' ) ' '
    write ( *, '(a)' ) '    Vector Size  Rep #1        Rep #2        ' &
      //  'Rep #3        Rep #4        Rep #5'
    write ( *, '(a)' ) ' '
    do n_log = n_log_min, n_log_max
      n = 2**( n_log )
      write ( *, '(i10,5f14.6)' ) n, delta(n_log,1:n_rep)
    end do

  end do

  return
end
subroutine test03 ( )

!*****************************************************************************80
!
!! TEST03 times the unvectorized EXP routine.
!
!  Licensing:
!
!    This code is distributed under the GNU LGPL license. 
!
!  Modified:
!
!    27 April 2009
!
!  Author:
!
!    John Burkardt
!
  implicit none

  integer ( kind = 4 ), parameter :: n_log_min = 12
  integer ( kind = 4 ), parameter :: n_log_max = 22
  integer ( kind = 4 ), parameter :: n_min = 2**n_log_min
  integer ( kind = 4 ), parameter :: n_max = 2**n_log_max
  integer ( kind = 4 ), parameter :: n_rep = 5

  real    ( kind = 8 ) delta(n_log_max,n_rep)
  integer ( kind = 4 ) func
  integer ( kind = 4 ) i
  integer ( kind = 4 ) i_rep
  integer ( kind = 4 ) n
  integer ( kind = 4 ) n_log
  real ( kind = 8 ), parameter :: pi = 3.141592653589793D+00
  real ( kind = 8 ) seconds
  real ( kind = 8 ) wtime
  real ( kind = 8 ) x(n_max)
  real ( kind = 8 ) y(n_max)

  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) 'TEST03'
  write ( *, '(a)' ) '  Time the unvectorized loops:'
  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) '    do i = 1, n'
  write ( *, '(a)' ) '      y(i) =        x(i)  '
  write ( *, '(a)' ) '      y(i) = PI *   x(i) )'
  write ( *, '(a)' ) '      y(i) = sqrt ( x(i) )'
  write ( *, '(a)' ) '      y(i) = exp  ( x(i) )'
  write ( *, '(a)' ) '    end do'
  write ( *, '(a)' ) ' '
  write ( *, '(a,i12)' ) '  Data vectors will be of minimum size ', n_min
  write ( *, '(a,i12)' ) '  Data vectors will be of maximum size ', n_max
  write ( *, '(a,i12)' ) '  Number of repetitions of the operation: ', n_rep

  do func = 1, 4

    do i_rep = 1, n_rep
  
      do n_log = n_log_min, n_log_max

        n = 2**( n_log )

        call random_number ( harvest = x(1:n) )

        seconds = wtime ( )

        if ( func == 1 ) then
          do i = 1, n
            y(i) = x(i)
          end do
        else if ( func == 2 ) then
          do i = 1, n
            y(i) = pi * x(i)
          end do
        else if ( func == 3 ) then
          do i = 1, n
            y(i) = sqrt ( x(i) )
          end do
        else if ( func == 4 ) then
          do i = 1, n
            y(i) = exp ( x(i) )
          end do
        end if

        delta(n_log,i_rep) = wtime ( ) - seconds

      end do

    end do

    write ( *, '(a)' ) ' '
    write ( *, '(a)' ) '  Timing results:'
    write ( *, '(a)' ) ' '
    write ( *, '(a)' ) '    Vector Size  Rep #1        Rep #2        ' &
      //  'Rep #3        Rep #4        Rep #5'
    write ( *, '(a)' ) ' '
    do n_log = n_log_min, n_log_max
      n = 2**( n_log )
      write ( *, '(i10,5f14.6)' ) n, delta(n_log,1:n_rep)
    end do

  end do

  return
end
subroutine test04 ( )

!*****************************************************************************80
!
!! TEST04 times the 2D nearest neighbor problem.
!
!  Licensing:
!
!    This code is distributed under the GNU LGPL license. 
!
!  Modified:
!
!    27 April 2009
!
!  Author:
!
!    John Burkardt
!
  implicit none

  integer ( kind = 4 ), parameter :: n_log_min = 10
  integer ( kind = 4 ), parameter :: n_log_max = 20
  integer ( kind = 4 ), parameter :: n_min = 2**n_log_min
  integer ( kind = 4 ), parameter :: n_max = 2**n_log_max
  integer ( kind = 4 ), parameter :: n_rep = 5
  integer ( kind = 4 ), parameter :: n_test = 1

  real ( kind = 8 ) delta(n_log_max,n_rep)
  real ( kind = 8 ) dist_i
  real ( kind = 8 ) dist_min
  integer ( kind = 4 ) i
  integer ( kind = 4 ) i_min
  integer ( kind = 4 ) i_rep
  integer ( kind = 4 ) n
  integer ( kind = 4 ) n_log
  real ( kind = 8 ) seconds
  real ( kind = 8 ) wtime
  real ( kind = 8 ) x(2,n_max)
  real ( kind = 8 ) y(2)

  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) 'TEST04'
  write ( *, '(a)' ) '  Time the 2D nearest neighbor problem.'
  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) '  Given X(2,N) and Y(2),' 
  write ( *, '(a)' ) '    find X(2,*) closest to Y(2).'
  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) '    do i = 1, n'
  write ( *, '(a)' ) '      if distance ( x(2,i), y ) < minimum so far'
  write ( *, '(a)' ) '        x_min = x(2,i)'
  write ( *, '(a)' ) '    end do'
  write ( *, '(a)' ) ' '
  write ( *, '(a,i12)' ) '  Data vectors will be of minimum size ', n_min
  write ( *, '(a,i12)' ) '  Data vectors will be of maximum size ', n_max
  write ( *, '(a,i12)' ) '  Number of repetitions of the operation: ', n_rep

  call random_number ( harvest = x(1:2,1:n_max) )
  call random_number ( harvest = y(1:2) )

  do i_rep = 1, n_rep

    do n_log = n_log_min, n_log_max

      n = 2**( n_log )

      seconds = wtime ( )

      dist_min = huge ( dist_min )
      i_min = 0
      do i = 1, n
        dist_i = sum ( ( x(1:2,i) - y(1:2) )**2 )
        if ( dist_i < dist_min ) then
          dist_min = dist_i
          i_min = i
        end if
      end do

      delta(n_log,i_rep) = wtime ( ) - seconds

    end do

  end do

  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) '  Timing results:'
  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) '    Vector Size  Rep #1        Rep #2        Rep #3        ' &
    // 'Rep #4        Rep #5'
  write ( *, '(a)' ) ' '
  do n_log = n_log_min, n_log_max
    n = 2**( n_log )
    write ( *, '(i10,5f14.6)' ) n, delta(n_log,1:n_rep)
  end do

  return
end
subroutine test05 ( )

!*****************************************************************************80
!
!! TEST05 times the matrix multiplication problem.
!
!  Licensing:
!
!    This code is distributed under the GNU LGPL license. 
!
!  Modified:
!
!    27 April 2009
!
!  Author:
!
!    John Burkardt
!
  implicit none

  integer ( kind = 4 ), parameter :: l_log_min = 1
  integer ( kind = 4 ), parameter :: l_log_max = 5
  integer ( kind = 4 ), parameter :: l_min = 4**l_log_min
  integer ( kind = 4 ), parameter :: l_max = 4**l_log_max
  integer ( kind = 4 ), parameter :: rep_num = 5

  real ( kind = 8 ), allocatable, dimension ( :, : ) :: a
  real ( kind = 8 ), allocatable, dimension ( :, : ) :: b
  real ( kind = 8 ), allocatable, dimension ( :, : ) :: c
  real ( kind = 8 ) delta(l_log_min:l_log_max,rep_num)
  integer ( kind = 4 ) i
  integer ( kind = 4 ) j
  integer ( kind = 4 ) k
  integer ( kind = 4 ) l
  integer ( kind = 4 ) l_log
  integer ( kind = 4 ) m
  integer ( kind = 4 ) n
  integer ( kind = 4 ) rep
  real ( kind = 8 ) seconds
  real ( kind = 8 ) wtime

  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) 'TEST05'
  write ( *, '(a)' ) '  Time the matrix multiplication problem.'
  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) '  Compute C = A * B'
  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) '  where'
  write ( *, '(a)' ) '    A is an L by M matrix,'
  write ( *, '(a)' ) '    B is an M by N matrix,'
  write ( *, '(a)' ) '  and so'
  write ( *, '(a)' ) '    C is an L by N matrix.'
  write ( *, '(a)' ) ' '
  write ( *, '(a,i12)' ) '  Minimum value of L = M = N = ', l_min
  write ( *, '(a,i12)' ) '  Maximum value of L = M = N = ', l_max
  write ( *, '(a,i12)' ) '  Number of repetitions of the operation: ', rep_num

  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) '  Use nested DO loops for matrix multiplication.'

  do rep = 1, rep_num

    do l_log = l_log_min, l_log_max - 1

      l = 4**( l_log )
      m = l
      n = l

      allocate ( a(1:l,1:l) )
      allocate ( b(1:l,1:l) )
      allocate ( c(1:l,1:l) )

      call random_number ( harvest = a(1:l,1:l) )
      call random_number ( harvest = b(1:l,1:l) )

      seconds = wtime ( )

      do i = 1, l
        do j = 1, l
          c(i,j) = 0.0D+00
          do k = 1, l
            c(i,j) = c(i,j) + a(i,k) * b(k,j)
          end do
        end do
      end do

      delta(l_log,rep) = wtime ( ) - seconds

      deallocate ( a )
      deallocate ( b )
      deallocate ( c )

    end do

  end do

  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) '  Timing results using nested DO loops:'
  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) '    Vector Size  Rep #1        Rep #2        Rep #3        ' &
    // 'Rep #4        Rep #5'
  write ( *, '(a)' ) ' '
  do l_log = l_log_min, l_log_max - 1
    l = 4**( l_log )
    write ( *, '(i10,5f14.6)' ) l, delta(l_log,1:rep_num)
  end do

  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) '  Use the MATMUL routine for matrix multiplication.'

  do rep = 1, rep_num

    do l_log = l_log_min, l_log_max

      l = 4**( l_log )
      m = l
      n = l

      allocate ( a(1:l,1:l) )
      allocate ( b(1:l,1:l) )
      allocate ( c(1:l,1:l) )

      call random_number ( harvest = a(1:l,1:l) )
      call random_number ( harvest = b(1:l,1:l) )

      seconds = wtime ( )

      c = matmul ( a, b )

      delta(l_log,rep) = wtime ( ) - seconds

      deallocate ( a )
      deallocate ( b )
      deallocate ( c )

    end do

  end do

  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) '  Timing results using MATMUL:'
  write ( *, '(a)' ) ' '
  write ( *, '(a)' ) '    Vector Size  Rep #1        Rep #2        Rep #3        ' &
    // 'Rep #4        Rep #5'
  write ( *, '(a)' ) ' '
  do l_log = l_log_min, l_log_max
    l = 4**( l_log )
    write ( *, '(i10,5f14.6)' ) l, delta(l_log,1:rep_num)
  end do

  return
end
subroutine timestamp ( )

!*****************************************************************************80
!
!! TIMESTAMP prints the current YMDHMS date as a time stamp.
!
!  Example:
!
!    May 31 2001   9:45:54.872 AM
!
!  Licensing:
!
!    This code is distributed under the GNU LGPL license. 
!
!  Modified:
!
!    31 May 2001
!
!  Author:
!
!    John Burkardt
!
!  Parameters:
!
!    None
!
  implicit none

  character ( len = 8 ) ampm
  integer ( kind = 4 ) d
  character ( len = 8 ) date
  integer ( kind = 4 ) h
  integer ( kind = 4 ) m
  integer ( kind = 4 ) mm
  character ( len = 9 ), parameter, dimension(12) :: month = (/ &
    'January  ', 'February ', 'March    ', 'April    ', &
    'May      ', 'June     ', 'July     ', 'August   ', &
    'September', 'October  ', 'November ', 'December ' /)
  integer ( kind = 4 ) n
  integer ( kind = 4 ) s
  character ( len = 10 ) time
  integer ( kind = 4 ) values(8)
  integer ( kind = 4 ) y
  character ( len = 5 ) zone

  call date_and_time ( date, time, zone, values )

  y = values(1)
  m = values(2)
  d = values(3)
  h = values(5)
  n = values(6)
  s = values(7)
  mm = values(8)

  if ( h < 12 ) then
    ampm = 'AM'
  else if ( h == 12 ) then
    if ( n == 0 .and. s == 0 ) then
      ampm = 'Noon'
    else
      ampm = 'PM'
    end if
  else
    h = h - 12
    if ( h < 12 ) then
      ampm = 'PM'
    else if ( h == 12 ) then
      if ( n == 0 .and. s == 0 ) then
        ampm = 'Midnight'
      else
        ampm = 'AM'
      end if
    end if
  end if

  write ( *, '(a,1x,i2,1x,i4,2x,i2,a1,i2.2,a1,i2.2,a1,i3.3,1x,a)' ) &
    trim ( month(m) ), d, y, h, ':', n, ':', s, '.', mm, trim ( ampm )

  return
end
ian@debian:~/wtime$ cat wtime.f90
function wtime ( )

!*****************************************************************************80
!
!! WTIME returns a reading of the wall clock time.
!
!  Discussion:
!
!    To get the elapsed wall clock time, call WTIME before and after a given
!    operation, and subtract the first reading from the second.
!
!    This function is meant to suggest the similar routines:
!
!      "omp_get_wtime ( )" in OpenMP,
!      "MPI_Wtime ( )" in MPI,
!      and "tic" and "toc" in MATLAB.
!
!  Licensing:
!
!    This code is distributed under the GNU LGPL license. 
!
!  Modified:
!
!    27 April 2009
!
!  Author:
!
!    John Burkardt
!
!  Parameters:
!
!    Output, real ( kind = 8 ) WTIME, the wall clock reading, in seconds.
!
  implicit none

  integer ( kind = 4 ) clock_max
  integer ( kind = 4 ) clock_rate
  integer ( kind = 4 ) clock_reading
  real ( kind = 8 ) wtime

  call system_clock ( clock_reading, clock_rate, clock_max )

  wtime = real ( clock_reading, kind = 8 ) &
        / real ( clock_rate, kind = 8 )

  return
end
ian@debian:~/wtime$ 

