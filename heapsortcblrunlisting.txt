ian@ian-HP-Stream-Laptop-11-y0XX:~/Downloads$ cobc heapsort.cbl -x
ian@ian-HP-Stream-Laptop-11-y0XX:~/Downloads$ ./heapsort
 31 23 80 22 09 39 18 05 48 95 initial array
 95 48 80 31 23 39 18 05 22 09 heapified
 05 09 18 22 23 31 39 48 80 95 sorted
ian@ian-HP-Stream-Laptop-11-y0XX:~/Downloads$ cat heapsort.cbl
       identification division.
       program-id. heapsort.
       environment division.
       configuration section.
       repository. function all intrinsic.
       data division.
       working-storage section.
       01  filler.
        03  a pic 99.
         03  a-start pic 99.
         03  a-end pic 99.
         03  a-parent pic 99.
         03  a-child pic 99.
         03  a-sibling pic 99.
         03  a-lim pic 99 value 10.
         03  array-swap pic 99.
         03  array occurs 10 pic 99.
         procedure division.
         start-heapsort.

      *> fill the array
        compute a = random(seconds-past-midnight)
        perform varying a from 1 by 1 until a > a-lim
        compute array(a) = random() * 100
        end-perform

        perform display-array
        display  space 'initial array'

      *>heapify the array
       move a-lim to a-end
       compute a-start = (a-lim + 1) / 2
       perform sift-down varying a-start from a-start by -1
           until a-start = 0

       perform display-array
       display space 'heapified'

      *> sort the array
       move 1 to a-start
       move a-lim to a-end
       perform until a-end = a-start
        move array(a-end) to array-swap
        move array(a-start) to array(a-end)
        move array-swap to array(a-start)
        subtract 1 from a-end
        perform sift-down
       end-perform

       perform display-array
       display space 'sorted'

           stop run.
    
       sift-down.
       move a-start to a-parent
       perform until a-parent * 2 > a-end
        compute a-child = a-parent * 2 
        compute a-sibling = a-child + 1
        if a-sibling <= a-end and array(a-child) < array(a-sibling)
      *> take the greater of the two
            move a-sibling to a-child
        end-if
        if a-child <= a-end and array(a-parent) < array(a-child)
      *> the child is greater than the parent
           move array(a-child) to array-swap
           move array(a-parent) to array(a-child)
           move array-swap to array(a-parent)
        end-if
      *> continue down the tree
        move a-child to a-parent
       end-perform.
       display-array.
       perform varying a from 1 by 1 until a > a-lim
        display space array(a) with no advancing
       end-perform.
       end program heapsort.
ian@ian-HP-Stream-Laptop-11-y0XX:~/Downloads$ sloccount heapsort.cbl
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/Downloads/heapsort.cbl to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
63      top_dir         cobol=63


Totals grouped by language (dominant language first):
cobol:           63 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 63
Development Effort Estimate, Person-Years (Person-Months) = 0.01 (0.13)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.10 (1.16)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.11
Total Estimated Cost to Develop                           = $ 1,482
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
ian@ian-HP-Stream-Laptop-11-y0XX:~/Downloads$ 
