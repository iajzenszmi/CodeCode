ian@ian-HP-Stream-Laptop-11-y0XX:~/arb/arb/examples$ ls
arbexampletaylorsintegralrun.txt  keiper_li.c  pi.c
complex_plot.o                    keiper_li.o  pi.o
fpwrap.c                          lcentral.c   poly_roots.c
fpwrap.o                          lcentral.o   poly_roots.o
hilbert_matrix.c                  logistic.c   realr
hilbert_matrix.o                  logistic.o   real_roots.c
integrals.c                       lvalue.c     real_roots.o
integrals.o                       lvalue.o     taylorint
keifer_li.txt                     pia          taylor_integrals.c
keiper_li                         pib          taylor_integrals.o
ian@ian-HP-Stream-Laptop-11-y0XX:~/arb/arb/examples$ gcc hilbert_matrix.c -lm -lflint -larb -o hilbert_matrix
ian@ian-HP-Stream-Laptop-11-y0XX:~/arb/arb/examples$ ls
arbexampletaylorsintegralrun.txt  keiper_li.c  pi.o
complex_plot.o                    keiper_li.o  poly_roots.c
fpwrap.c                          lcentral.c   poly_roots.o
fpwrap.o                          lcentral.o   realr
hilbert_matrix                    logistic.c   real_roots.c
hilbert_matrix.c                  logistic.o   real_roots.o
hilbert_matrix.o                  lvalue.c     taylorint
integrals.c                       lvalue.o     taylor_integrals.c
integrals.o                       pia          taylor_integrals.o
keifer_li.txt                     pib
keiper_li                         pi.c
ian@ian-HP-Stream-Laptop-11-y0XX:~/arb/arb/examples$ ./hilbert_matrix
usage: build/examples/hilbert_matrix [-eig] n
ian@ian-HP-Stream-Laptop-11-y0XX:~/arb/arb/examples$ ./hilbert_matrix -eig 100
prec=20: nan
prec=40: nan
prec=80: nan
prec=160: nan
prec=320: nan
prec=640: nan
prec=1280: [5.779700863e-151 +/- 1.66e-161]
success!
cpu/wall(s): 80.142 81.306
virt/peak/res/peak(MB): 65.83 65.83 39.70 39.70
ian@ian-HP-Stream-Laptop-11-y0XX:~/arb/arb/examples$ ./hilbert_matrix 10
prec=20: [+/- 2.88e-25]
prec=40: [+/- 3.09e-45]
prec=80: [2.164179e-53 +/- 7.90e-60]
success!
cpu/wall(s): 0.001 0.001
virt/peak/res/peak(MB): 34.26 34.27 6.23 6.23
ian@ian-HP-Stream-Laptop-11-y0XX:~/arb/arb/examples$ hilbert_matrix 100
hilbert_matrix: command not found
ian@ian-HP-Stream-Laptop-11-y0XX:~/arb/arb/examples$ ./hilbert_matrix 100
prec=20: [+/- 2.98e-185]
prec=40: [+/- 6.77e-326]
prec=80: [+/- 3.67e-597]
prec=160: [+/- 6.70e-1222]
prec=320: [+/- 7.31e-2540]
prec=640: [3.370033677e-5942 +/- 4.92e-5952]
success!
cpu/wall(s): 2.355 2.373
virt/peak/res/peak(MB): 50.44 50.44 24.30 24.30
ian@ian-HP-Stream-Laptop-11-y0XX:~/arb/arb/examples$ cat hilbert_matrix.c
/* This file is public domain. Author: Fredrik Johansson. */

#include <string.h>
#include "arb_mat.h"
#include "acb_mat.h"
#include "flint/profiler.h"

int main(int argc, char *argv[])
{
    arb_mat_t A;
    arb_t det;
    slong i, prec, n;
    int eig;

    if (argc < 2 || (argc == 3 && strcmp(argv[1], "-eig")))
    {
        flint_printf("usage: build/examples/hilbert_matrix [-eig] n\n");
        return 1;
    }

    if (argc == 2)
        eig = 0;
    else
        eig = 1;

    n = atol(argv[argc-1]);

    if (eig && (n == 0))
    {
        flint_printf("smallest eigenvalue: undefined for n == 0\n");
        return 1;
    }

    arb_mat_init(A, n, n);
    arb_init(det);

    TIMEIT_ONCE_START

    for (prec = 20; ; prec *= 2)
    {
        arb_mat_hilbert(A, prec);
        flint_printf("prec=%wd: ", prec);

        if (eig == 0)
        {
            arb_mat_det(det, A, prec);
        }
        else
        {
            acb_mat_t C, R;
            acb_ptr E;

            acb_mat_init(R, n, n);
            acb_mat_init(C, n, n);
            E = _acb_vec_init(n);

            acb_mat_set_arb_mat(C, A);
            acb_mat_approx_eig_qr(E, NULL, R, C, NULL, 0, prec);
            if (acb_mat_eig_simple(E, NULL, NULL, C, E, R, prec))
            {
                /* A is symmetric so the eigenvalues are real */
                for (i = 0; i < n; i++)
                    arb_zero(acb_imagref(E + i));
                /* With isolated eigenvalues, sorting midpoints gives the
                   right result. */
                _acb_vec_sort_pretty(E, n);
                acb_get_real(det, E + 0);
            }
            else
            {
                arb_indeterminate(det);
            }

            acb_mat_clear(R);
            acb_mat_clear(C);
            _acb_vec_clear(E, n);
        }

        arb_printn(det, 10, 0);
        flint_printf("\n");

        if (!arb_contains_zero(det))
        {
            flint_printf("success!\n");
            break;
        }
    }

    TIMEIT_ONCE_STOP

    SHOW_MEMORY_USAGE

    arb_mat_clear(A);
    arb_clear(det);
    flint_cleanup();
    return 0;
}
ian@ian-HP-Stream-Laptop-11-y0XX:~/arb/arb/examples$ sloccount hilbert_matrix.c
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/arb/arb/examples/hilbert_matrix.c to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
75      top_dir         ansic=75


Totals grouped by language (dominant language first):
ansic:           75 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 75
Development Effort Estimate, Person-Years (Person-Months) = 0.01 (0.16)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.10 (1.24)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.13
Total Estimated Cost to Develop                           = $ 1,780
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
ian@ian-HP-Stream-Laptop-11-y0XX:~/arb/arb/examples$ 
