ian@ian-Aspire-One-753:~/CodeCode$ youtube-dl https://www.youtube.com/watch?v=LMVb_7htCuI
[youtube] LMVb_7htCuI: Downloading webpage
[download] Destination: Fritz Wunderlich, Ingeborg Hallstein sing Der Zigeunerbaron (Johann Strauss II)-LMVb_7htCuI.f135.mp4
[download] 100% of 78.10MiB in 00:19
[download] Destination: Fritz Wunderlich, Ingeborg Hallstein sing Der Zigeunerbaron (Johann Strauss II)-LMVb_7htCuI.f140.m4a
[download] 100% of 18.70MiB in 00:01
[ffmpeg] Merging formats into "Fritz Wunderlich, Ingeborg Hallstein sing Der Zigeunerbaron (Johann Strauss II)-LMVb_7htCuI.mp4"
Deleting original file Fritz Wunderlich, Ingeborg Hallstein sing Der Zigeunerbaron (Johann Strauss II)-LMVb_7htCuI.f135.mp4 (pass -k to keep)
Deleting original file Fritz Wunderlich, Ingeborg Hallstein sing Der Zigeunerbaron (Johann Strauss II)-LMVb_7htCuI.f140.m4a (pass -k to keep)
ian@ian-Aspire-One-753:~/CodeCode$ ls 100dooor.f90
ls: cannot access '100dooor.f90': No such file or directory
ian@ian-Aspire-One-753:~/CodeCode$ ls 100*
100d           100dooorsf90txtrun.txt  100doors      100doorscobrun.txt   100l.f
100dooors.f90  100dooors.s             100doors.cob  100doorsf90run2.txt  100lines
ian@ian-Aspire-One-753:~/CodeCode$ ls 543*
ls: cannot access '543*': No such file or directory
ian@ian-Aspire-One-753:~/CodeCode$ ls 654
ls: cannot access '654': No such file or directory
ian@ian-Aspire-One-753:~/CodeCode$ 
ian@ian-Aspire-One-753:~/CodeCode$ 
ian@ian-Aspire-One-753:~/CodeCode$ 
ian@ian-Aspire-One-753:~/CodeCode$ 
ian@ian-Aspire-One-753:~/CodeCode$ 
ian@ian-Aspire-One-753:~/CodeCode$ 
ian@ian-Aspire-One-753:~/CodeCode$ 
ian@ian-Aspire-One-753:~/CodeCode$ ls 5*
517.f  524f1.f  524run  525.f  5631.f  5631runlisting.txt  563.txt  585.f  585run2.txt  585run.txt  599  599.f  599run.txt  5ast.c
ian@ian-Aspire-One-753:~/CodeCode$ ls 456.f
456.f
ian@ian-Aspire-One-753:~/CodeCode$ ls 456.*
456.f  456.s
ian@ian-Aspire-One-753:~/CodeCode$ gfortran 456.s -o 456s
ian@ian-Aspire-One-753:~/CodeCode$ ./456s
 
TOMS456_PRB
  Test TOMS algorithm 456, for
  the routing problem.
 
  Start node SN =         1
  End node EN =           1
  Number of trials =      5
 
  The length of the optimal connection is    291
 
  Connection sequence:
 
       1       0
      11      29
       4      50
       6      65
       8      88
      10     103
      14     126
      12     137
       3     158
       7     181
       5     204
       9     225
      15     236
       2     257
      13     268
 
  Start node SN =         1
  End node EN =          13
  Number of trials =      5
 
  The length of the optimal connection is    268
 
  Connection sequence:
 
       1       0
      11      29
       4      50
       6      65
       8      88
      10     103
      14     126
      12     137
       3     158
       7     181
       5     204
       9     225
      15     236
       2     257
      13     268
 
  Start node SN =         1
  End node EN =           0
  Number of trials =      5
 
  The length of the optimal connection is    262
 
  Connection sequence:
 
       1       0
      13      23
       2      34
      15      55
       9      66
       5      87
       7     110
       3     133
      12     154
      14     165
      10     188
       8     203
       6     226
       4     241
      11     262
 
  Start node SN =         1
  End node EN =           5
  Number of trials =      5
 
  The length of the optimal connection is    189
 
  Connection sequence:
 
       1       0
       2      29
       4      75
       3     143
       5     189
 
TOMS456_PRB
  Normal end of execution.
ian@ian-Aspire-One-753:~/CodeCode$ cat 456.s
	.file	"456.f"
	.text
	.globl	routng_
	.type	routng_, @function
routng_:
.LFB0:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$544, %rsp
	.cfi_offset 13, -24
	.cfi_offset 12, -32
	.cfi_offset 3, -40
	movq	%rdi, -648(%rbp)
	movq	%rsi, -656(%rbp)
	movq	%rdx, -664(%rbp)
	movq	%rcx, -672(%rbp)
	movq	%r8, -680(%rbp)
	movq	%r9, -688(%rbp)
	movq	-680(%rbp), %rax
	movl	(%rax), %eax
	cltq
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movl	$0, %edx
	testq	%rax, %rax
	cmovs	%rdx, %rax
	movq	-680(%rbp), %rdx
	movl	(%rdx), %edx
	movslq	%edx, %rdx
	movq	%rdx, -136(%rbp)
	movq	%rax, %rdx
	imulq	-136(%rbp), %rdx
	movl	$0, %ecx
	testq	%rdx, %rdx
	cmovs	%rcx, %rdx
	movq	%rdx, %r12
	movl	$0, %r13d
	movq	%rax, %rdx
	notq	%rdx
	movq	-648(%rbp), %rcx
	movl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movq	%rcx, -144(%rbp)
	movq	-144(%rbp), %rcx
	movl	$0, %esi
	testq	%rcx, %rcx
	cmovs	%rsi, %rcx
	movq	%rcx, %r10
	movl	$0, %r11d
	movl	$0, -108(%rbp)
	movq	-680(%rbp), %rcx
	movl	(%rcx), %ecx
	movl	$1, -36(%rbp)
.L6:
	cmpl	%ecx, -36(%rbp)
	setg	%sil
	movzbl	%sil, %esi
	testl	%esi, %esi
	jne	.L67
	movq	-680(%rbp), %rsi
	movl	(%rsi), %esi
	movl	$1, -72(%rbp)
.L5:
	cmpl	%esi, -72(%rbp)
	setg	%dil
	movzbl	%dil, %edi
	testl	%edi, %edi
	jne	.L68
	movl	-72(%rbp), %edi
	movslq	%edi, %rdi
	imulq	%rax, %rdi
	leaq	(%rdx,%rdi), %r8
	movl	-36(%rbp), %edi
	movslq	%edi, %rdi
	addq	%rdi, %r8
	movq	-688(%rbp), %rdi
	movl	(%rdi,%r8,4), %edi
	cmpl	%edi, -108(%rbp)
	jge	.L4
	movl	-72(%rbp), %edi
	movslq	%edi, %rdi
	imulq	%rax, %rdi
	leaq	(%rdx,%rdi), %r8
	movl	-36(%rbp), %edi
	movslq	%edi, %rdi
	addq	%rdi, %r8
	movq	-688(%rbp), %rdi
	movl	(%rdi,%r8,4), %edi
	movl	%edi, -108(%rbp)
.L4:
	addl	$1, -72(%rbp)
	jmp	.L5
.L68:
	nop
	addl	$1, -36(%rbp)
	jmp	.L6
.L67:
	nop
	movq	-648(%rbp), %rcx
	movl	(%rcx), %ecx
	movl	-108(%rbp), %esi
	imull	%esi, %ecx
	movl	%ecx, -108(%rbp)
	movq	-672(%rbp), %rcx
	movl	(%rcx), %ecx
	testl	%ecx, %ecx
	jne	.L69
	movq	-680(%rbp), %rcx
	movl	(%rcx), %esi
	movl	$1, -36(%rbp)
.L8:
	cmpl	%esi, -36(%rbp)
	setg	%cl
	movzbl	%cl, %ecx
	testl	%ecx, %ecx
	jne	.L69
	movq	-664(%rbp), %rcx
	movl	(%rcx), %ecx
	movslq	%ecx, %rcx
	imulq	%rax, %rcx
	leaq	(%rdx,%rcx), %rdi
	movl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	leaq	(%rdi,%rcx), %r8
	movl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	leaq	-1(%rcx), %rdi
	movq	-688(%rbp), %rcx
	movl	(%rcx,%r8,4), %ecx
	movl	%ecx, -400(%rbp,%rdi,4)
	movq	-664(%rbp), %rcx
	movl	(%rcx), %ecx
	movslq	%ecx, %rcx
	imulq	%rax, %rcx
	leaq	(%rdx,%rcx), %rdi
	movl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	addq	%rcx, %rdi
	movl	-108(%rbp), %ecx
	negl	%ecx
	movl	%ecx, %r8d
	movq	-688(%rbp), %rcx
	movl	%r8d, (%rcx,%rdi,4)
	movq	-664(%rbp), %rcx
	movl	(%rcx), %ecx
	movslq	%ecx, %rcx
	imulq	%rax, %rcx
	leaq	(%rdx,%rcx), %rdi
	movq	-664(%rbp), %rcx
	movl	(%rcx), %ecx
	movslq	%ecx, %rcx
	addq	%rcx, %rdi
	movq	-688(%rbp), %rcx
	movl	$0, (%rcx,%rdi,4)
	addl	$1, -36(%rbp)
	jmp	.L8
.L69:
	nop
	movq	-664(%rbp), %rcx
	movl	(%rcx), %esi
	movq	-672(%rbp), %rcx
	movl	(%rcx), %ecx
	cmpl	%ecx, %esi
	sete	%cl
	movzbl	%cl, %esi
	movq	-672(%rbp), %rcx
	movl	(%rcx), %ecx
	testl	%ecx, %ecx
	sete	%cl
	movzbl	%cl, %ecx
	orl	%esi, %ecx
	testl	%ecx, %ecx
	jne	.L70
	movq	-664(%rbp), %rcx
	movl	(%rcx), %ecx
	movslq	%ecx, %rcx
	imulq	%rax, %rcx
	leaq	(%rdx,%rcx), %rsi
	movq	-672(%rbp), %rcx
	movl	(%rcx), %ecx
	movslq	%ecx, %rcx
	addq	%rcx, %rsi
	movq	-688(%rbp), %rcx
	movl	(%rcx,%rsi,4), %ecx
	movl	%ecx, -400(%rbp)
	movq	-664(%rbp), %rcx
	movl	(%rcx), %ecx
	movslq	%ecx, %rcx
	imulq	%rax, %rcx
	leaq	(%rdx,%rcx), %rsi
	movq	-672(%rbp), %rcx
	movl	(%rcx), %ecx
	movslq	%ecx, %rcx
	addq	%rcx, %rsi
	movl	-108(%rbp), %ecx
	movl	%ecx, %edi
	negl	%edi
	movq	-688(%rbp), %rcx
	movl	%edi, (%rcx,%rsi,4)
	jmp	.L9
.L70:
	nop
.L9:
	movq	16(%rbp), %rcx
	movl	-108(%rbp), %esi
	movl	%esi, (%rcx)
	movq	24(%rbp), %rcx
	movl	(%rcx), %edi
	movl	$1, -68(%rbp)
.L60:
	cmpl	%edi, -68(%rbp)
	setg	%cl
	movzbl	%cl, %ecx
	testl	%ecx, %ecx
	jne	.L71
	movq	-648(%rbp), %rcx
	movl	(%rcx), %ecx
	movl	$2, -92(%rbp)
.L19:
	cmpl	%ecx, -92(%rbp)
	setg	%sil
	movzbl	%sil, %esi
	testl	%esi, %esi
	jne	.L72
	movl	-108(%rbp), %esi
	movl	%esi, -120(%rbp)
	movl	-92(%rbp), %r8d
	movq	-648(%rbp), %rsi
	movl	(%rsi), %esi
	movl	%r8d, -72(%rbp)
.L17:
	cmpl	%esi, -72(%rbp)
	setg	%r8b
	movzbl	%r8b, %r8d
	testl	%r8d, %r8d
	jne	.L73
	movl	-72(%rbp), %r8d
	movslq	%r8d, %r8
	leaq	-1(%r8), %r9
	movq	-656(%rbp), %r8
	movl	(%r8,%r9,4), %r8d
	movl	%r8d, -84(%rbp)
	movl	-92(%rbp), %r8d
	subl	$1, %r8d
	movl	%r8d, -80(%rbp)
	movl	-80(%rbp), %r8d
	movl	$1, -36(%rbp)
.L16:
	cmpl	%r8d, -36(%rbp)
	setg	%r9b
	movzbl	%r9b, %r9d
	testl	%r9d, %r9d
	jne	.L74
	movl	-36(%rbp), %r9d
	movslq	%r9d, %r9
	leaq	-1(%r9), %r10
	movq	-656(%rbp), %r9
	movl	(%r9,%r10,4), %r9d
	movl	%r9d, -52(%rbp)
	movl	-36(%rbp), %r9d
	addl	$1, %r9d
	movslq	%r9d, %r9
	leaq	-1(%r9), %r10
	movq	-656(%rbp), %r9
	movl	(%r9,%r10,4), %r9d
	movl	%r9d, -56(%rbp)
	movl	-36(%rbp), %r9d
	cmpl	-80(%rbp), %r9d
	jne	.L14
	movq	-656(%rbp), %r9
	movl	(%r9), %r9d
	movl	%r9d, -56(%rbp)
.L14:
	movl	-84(%rbp), %r9d
	movslq	%r9d, %r9
	imulq	%rax, %r9
	leaq	(%rdx,%r9), %r10
	movl	-52(%rbp), %r9d
	movslq	%r9d, %r9
	addq	%r9, %r10
	movq	-688(%rbp), %r9
	movl	(%r9,%r10,4), %r10d
	movl	-56(%rbp), %r9d
	movslq	%r9d, %r9
	imulq	%rax, %r9
	leaq	(%rdx,%r9), %r11
	movl	-84(%rbp), %r9d
	movslq	%r9d, %r9
	addq	%r9, %r11
	movq	-688(%rbp), %r9
	movl	(%r9,%r11,4), %r9d
	leal	(%r10,%r9), %r11d
	movl	-56(%rbp), %r9d
	movslq	%r9d, %r9
	imulq	%rax, %r9
	leaq	(%rdx,%r9), %r10
	movl	-52(%rbp), %r9d
	movslq	%r9d, %r9
	addq	%r9, %r10
	movq	-688(%rbp), %r9
	movl	(%r9,%r10,4), %r9d
	subl	%r9d, %r11d
	movl	%r11d, %r9d
	movl	%r9d, -148(%rbp)
	movl	-148(%rbp), %r9d
	cmpl	-120(%rbp), %r9d
	jge	.L75
	movl	-72(%rbp), %r9d
	movl	%r9d, -76(%rbp)
	movl	-36(%rbp), %r9d
	movl	%r9d, -40(%rbp)
	movl	-148(%rbp), %r9d
	movl	%r9d, -120(%rbp)
	jmp	.L15
.L75:
	nop
.L15:
	addl	$1, -36(%rbp)
	jmp	.L16
.L74:
	nop
	addl	$1, -72(%rbp)
	jmp	.L17
.L73:
	nop
.L12:
	subl	$1, -76(%rbp)
	movl	-76(%rbp), %esi
	cmpl	-40(%rbp), %esi
	je	.L76
	movl	-76(%rbp), %esi
	movslq	%esi, %rsi
	leaq	-1(%rsi), %r8
	movq	-656(%rbp), %rsi
	movl	(%rsi,%r8,4), %esi
	movl	%esi, -52(%rbp)
	movl	-76(%rbp), %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	leaq	-1(%rsi), %r8
	movl	-76(%rbp), %esi
	movslq	%esi, %rsi
	leaq	-1(%rsi), %r9
	movq	-656(%rbp), %rsi
	movl	(%rsi,%r8,4), %r8d
	movq	-656(%rbp), %rsi
	movl	%r8d, (%rsi,%r9,4)
	movl	-76(%rbp), %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	leaq	-1(%rsi), %r9
	movq	-656(%rbp), %rsi
	movl	-52(%rbp), %r8d
	movl	%r8d, (%rsi,%r9,4)
	jmp	.L12
.L76:
	nop
	addl	$1, -92(%rbp)
	jmp	.L19
.L72:
	nop
	movq	-648(%rbp), %rcx
	movl	(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -152(%rbp)
	movq	-648(%rbp), %rcx
	movl	(%rcx), %ecx
	cmpl	$2, %ecx
	jle	.L77
	movl	-152(%rbp), %ecx
	movl	$1, -96(%rbp)
.L49:
	cmpl	%ecx, -96(%rbp)
	setg	%sil
	movzbl	%sil, %esi
	testl	%esi, %esi
	jne	.L77
	movl	$0, -48(%rbp)
	jmp	.L48
.L87:
	nop
.L48:
	movl	$0, -44(%rbp)
	movq	-648(%rbp), %rsi
	movl	(%rsi), %esi
	movl	$1, -72(%rbp)
.L46:
	cmpl	%esi, -72(%rbp)
	setg	%r8b
	movzbl	%r8b, %r8d
	testl	%r8d, %r8d
	jne	.L78
	movl	$0, -104(%rbp)
	movl	$0, -116(%rbp)
	cmpl	$1, -96(%rbp)
	je	.L22
	movl	-72(%rbp), %r8d
	movl	%r8d, -36(%rbp)
	movl	$1, -100(%rbp)
	jmp	.L25
.L79:
	nop
.L25:
	movq	-648(%rbp), %r8
	movl	(%r8), %r8d
	cmpl	%r8d, -36(%rbp)
	jle	.L23
	movq	-648(%rbp), %r8
	movl	(%r8), %r8d
	subl	%r8d, -36(%rbp)
.L23:
	movl	-36(%rbp), %r8d
	movslq	%r8d, %r8
	leaq	-1(%r8), %r9
	movq	-656(%rbp), %r8
	movl	(%r8,%r9,4), %r8d
	movl	%r8d, -52(%rbp)
	movl	-36(%rbp), %r8d
	addl	$1, %r8d
	movl	%r8d, -56(%rbp)
	movq	-648(%rbp), %r8
	movl	(%r8), %r8d
	cmpl	%r8d, -56(%rbp)
	jle	.L24
	movl	$1, -56(%rbp)
.L24:
	movl	-56(%rbp), %r8d
	movslq	%r8d, %r8
	leaq	-1(%r8), %r9
	movq	-656(%rbp), %r8
	movl	(%r8,%r9,4), %r8d
	movl	%r8d, -56(%rbp)
	movl	-56(%rbp), %r8d
	movslq	%r8d, %r8
	imulq	%rax, %r8
	leaq	(%rdx,%r8), %r9
	movl	-52(%rbp), %r8d
	movslq	%r8d, %r8
	addq	%r8, %r9
	movq	-688(%rbp), %r8
	movl	(%r8,%r9,4), %r8d
	addl	%r8d, -104(%rbp)
	movl	-52(%rbp), %r8d
	movslq	%r8d, %r8
	imulq	%rax, %r8
	leaq	(%rdx,%r8), %r9
	movl	-56(%rbp), %r8d
	movslq	%r8d, %r8
	addq	%r8, %r9
	movq	-688(%rbp), %r8
	movl	(%r8,%r9,4), %r8d
	addl	%r8d, -116(%rbp)
	addl	$1, -36(%rbp)
	addl	$1, -100(%rbp)
	movl	-100(%rbp), %r8d
	cmpl	-96(%rbp), %r8d
	jl	.L79
.L22:
	movl	-108(%rbp), %r8d
	movl	%r8d, -120(%rbp)
	movl	-72(%rbp), %r9d
	movl	-96(%rbp), %r8d
	addl	%r9d, %r8d
	subl	$1, %r8d
	movl	%r8d, -76(%rbp)
	movq	-648(%rbp), %r8
	movl	(%r8), %r8d
	cmpl	%r8d, -76(%rbp)
	jle	.L26
	movq	-648(%rbp), %r8
	movl	(%r8), %r8d
	subl	%r8d, -76(%rbp)
.L26:
	movq	-648(%rbp), %r8
	movl	(%r8), %r8d
	movl	$1, -36(%rbp)
.L37:
	cmpl	%r8d, -36(%rbp)
	setg	%r9b
	movzbl	%r9b, %r9d
	testl	%r9d, %r9d
	jne	.L80
	movl	-72(%rbp), %r9d
	cmpl	-76(%rbp), %r9d
	setle	%r9b
	movzbl	%r9b, %r10d
	movl	-36(%rbp), %r9d
	cmpl	-72(%rbp), %r9d
	setge	%r9b
	movzbl	%r9b, %r11d
	movl	-36(%rbp), %r9d
	cmpl	-76(%rbp), %r9d
	setle	%r9b
	movzbl	%r9b, %r9d
	andl	%r11d, %r9d
	andl	%r10d, %r9d
	testl	%r9d, %r9d
	jne	.L81
	movl	-72(%rbp), %r9d
	cmpl	-76(%rbp), %r9d
	setg	%r9b
	movzbl	%r9b, %r10d
	movl	-36(%rbp), %r9d
	cmpl	-76(%rbp), %r9d
	setle	%r9b
	movzbl	%r9b, %r11d
	movl	-36(%rbp), %r9d
	cmpl	-72(%rbp), %r9d
	setge	%r9b
	movzbl	%r9b, %r9d
	orl	%r11d, %r9d
	andl	%r10d, %r9d
	testl	%r9d, %r9d
	jne	.L82
	movl	-36(%rbp), %r9d
	movslq	%r9d, %r9
	leaq	-1(%r9), %r10
	movq	-656(%rbp), %r9
	movl	(%r9,%r10,4), %r9d
	movl	%r9d, -52(%rbp)
	movl	-72(%rbp), %r9d
	movslq	%r9d, %r9
	leaq	-1(%r9), %r10
	movq	-656(%rbp), %r9
	movl	(%r9,%r10,4), %r9d
	movl	%r9d, -84(%rbp)
	movl	-76(%rbp), %r9d
	movslq	%r9d, %r9
	leaq	-1(%r9), %r10
	movq	-656(%rbp), %r9
	movl	(%r9,%r10,4), %r9d
	movl	%r9d, -88(%rbp)
	movl	-36(%rbp), %r9d
	addl	$1, %r9d
	movl	%r9d, -56(%rbp)
	movq	-648(%rbp), %r9
	movl	(%r9), %r9d
	cmpl	%r9d, -56(%rbp)
	jle	.L31
	movl	$1, -56(%rbp)
.L31:
	movl	-56(%rbp), %r9d
	movl	%r9d, -80(%rbp)
	movl	-56(%rbp), %r9d
	cmpl	-72(%rbp), %r9d
	jne	.L32
	movl	-76(%rbp), %r9d
	addl	$1, %r9d
	movl	%r9d, -56(%rbp)
.L32:
	movq	-648(%rbp), %r9
	movl	(%r9), %r9d
	cmpl	%r9d, -56(%rbp)
	jle	.L33
	movl	$1, -56(%rbp)
.L33:
	movl	-56(%rbp), %r9d
	movslq	%r9d, %r9
	leaq	-1(%r9), %r10
	movq	-656(%rbp), %r9
	movl	(%r9,%r10,4), %r9d
	movl	%r9d, -56(%rbp)
	movl	-104(%rbp), %r9d
	movl	%r9d, -112(%rbp)
	movl	$0, -60(%rbp)
.L36:
	movl	-84(%rbp), %r9d
	movslq	%r9d, %r9
	imulq	%rax, %r9
	leaq	(%rdx,%r9), %r10
	movl	-52(%rbp), %r9d
	movslq	%r9d, %r9
	addq	%r9, %r10
	movq	-688(%rbp), %r9
	movl	(%r9,%r10,4), %r10d
	movl	-112(%rbp), %r9d
	leal	(%r10,%r9), %r11d
	movl	-56(%rbp), %r9d
	movslq	%r9d, %r9
	imulq	%rax, %r9
	leaq	(%rdx,%r9), %r10
	movl	-88(%rbp), %r9d
	movslq	%r9d, %r9
	addq	%r9, %r10
	movq	-688(%rbp), %r9
	movl	(%r9,%r10,4), %r9d
	addl	%r9d, %r11d
	movl	-56(%rbp), %r9d
	movslq	%r9d, %r9
	imulq	%rax, %r9
	leaq	(%rdx,%r9), %r10
	movl	-52(%rbp), %r9d
	movslq	%r9d, %r9
	addq	%r9, %r10
	movq	-688(%rbp), %r9
	movl	(%r9,%r10,4), %r9d
	subl	%r9d, %r11d
	movl	%r11d, %r9d
	movl	%r9d, -148(%rbp)
	movl	-148(%rbp), %r9d
	cmpl	-120(%rbp), %r9d
	setg	%r9b
	movzbl	%r9b, %r10d
	movl	-148(%rbp), %r9d
	cmpl	-120(%rbp), %r9d
	sete	%r9b
	movzbl	%r9b, %r11d
	movl	-80(%rbp), %r9d
	cmpl	-72(%rbp), %r9d
	setne	%r9b
	movzbl	%r9b, %ebx
	movl	-80(%rbp), %r9d
	cmpl	-72(%rbp), %r9d
	sete	%r9b
	movzbl	%r9b, %r12d
	cmpl	$1, -60(%rbp)
	sete	%r9b
	movzbl	%r9b, %r9d
	andl	%r12d, %r9d
	orl	%ebx, %r9d
	andl	%r11d, %r9d
	orl	%r10d, %r9d
	testl	%r9d, %r9d
	jne	.L83
	movl	-36(%rbp), %r9d
	movl	%r9d, -40(%rbp)
	movl	-60(%rbp), %r9d
	movl	%r9d, -64(%rbp)
	movl	-148(%rbp), %r9d
	movl	%r9d, -120(%rbp)
	jmp	.L35
.L83:
	nop
.L35:
	cmpl	$1, -60(%rbp)
	je	.L84
	movl	$1, -60(%rbp)
	movl	-116(%rbp), %r9d
	movl	%r9d, -112(%rbp)
	movl	-84(%rbp), %r9d
	movl	%r9d, -92(%rbp)
	movl	-88(%rbp), %r9d
	movl	%r9d, -84(%rbp)
	movl	-92(%rbp), %r9d
	movl	%r9d, -88(%rbp)
	jmp	.L36
.L81:
	nop
	jmp	.L29
.L82:
	nop
	jmp	.L29
.L84:
	nop
.L29:
	addl	$1, -36(%rbp)
	jmp	.L37
.L80:
	nop
	movl	-40(%rbp), %r8d
	addl	$1, %r8d
	movl	%r8d, -36(%rbp)
	movq	-648(%rbp), %r8
	movl	(%r8), %r8d
	cmpl	%r8d, -36(%rbp)
	jle	.L38
	movl	$1, -36(%rbp)
.L38:
	movl	-36(%rbp), %r8d
	cmpl	-72(%rbp), %r8d
	sete	%r8b
	movzbl	%r8b, %r9d
	cmpl	$0, -64(%rbp)
	sete	%r8b
	movzbl	%r8b, %r8d
	andl	%r9d, %r8d
	testl	%r8d, %r8d
	jne	.L85
	movl	$1, -44(%rbp)
	movl	-72(%rbp), %r8d
	movl	%r8d, -92(%rbp)
	movl	$0, -80(%rbp)
	cmpl	$0, -64(%rbp)
	je	.L86
	movl	-76(%rbp), %r8d
	movl	%r8d, -92(%rbp)
	movl	$-1, -80(%rbp)
	jmp	.L40
.L86:
	nop
.L40:
	movl	$0, -100(%rbp)
.L45:
	addl	$1, -100(%rbp)
	movl	-100(%rbp), %r8d
	cmpl	-96(%rbp), %r8d
	jg	.L85
	movl	-92(%rbp), %r8d
	movl	%r8d, -36(%rbp)
	movl	-80(%rbp), %r8d
	addl	%r8d, -92(%rbp)
	cmpl	$0, -92(%rbp)
	jg	.L44
	movq	-648(%rbp), %r8
	movl	(%r8), %r8d
	movl	%r8d, -92(%rbp)
.L44:
	movl	-36(%rbp), %r8d
	addl	$1, %r8d
	movl	%r8d, -52(%rbp)
	movq	-648(%rbp), %r8
	movl	(%r8), %r8d
	cmpl	%r8d, -52(%rbp)
	jle	.L42
	movl	$1, -52(%rbp)
.L42:
	movl	-36(%rbp), %r8d
	movslq	%r8d, %r8
	leaq	-1(%r8), %r9
	movq	-656(%rbp), %r8
	movl	(%r8,%r9,4), %r8d
	movl	%r8d, -84(%rbp)
	movl	-52(%rbp), %r8d
	movslq	%r8d, %r8
	leaq	-1(%r8), %r9
	movl	-36(%rbp), %r8d
	movslq	%r8d, %r8
	leaq	-1(%r8), %r10
	movq	-656(%rbp), %r8
	movl	(%r8,%r9,4), %r9d
	movq	-656(%rbp), %r8
	movl	%r9d, (%r8,%r10,4)
	movl	-52(%rbp), %r8d
	movslq	%r8d, %r8
	leaq	-1(%r8), %r10
	movq	-656(%rbp), %r8
	movl	-84(%rbp), %r9d
	movl	%r9d, (%r8,%r10,4)
	addl	$1, -36(%rbp)
	movq	-648(%rbp), %r8
	movl	(%r8), %r8d
	cmpl	%r8d, -36(%rbp)
	jle	.L43
	movl	$1, -36(%rbp)
.L43:
	movl	-52(%rbp), %r8d
	subl	-40(%rbp), %r8d
	testl	%r8d, %r8d
	jne	.L44
	nop
	jmp	.L45
.L85:
	nop
	addl	$1, -72(%rbp)
	jmp	.L46
.L78:
	nop
	cmpl	$0, -44(%rbp)
	je	.L47
	addl	$1, -48(%rbp)
	movq	-648(%rbp), %rsi
	movl	(%rsi), %esi
	cmpl	%esi, -48(%rbp)
	jl	.L87
.L47:
	addl	$1, -96(%rbp)
	jmp	.L49
.L77:
	nop
	movq	-648(%rbp), %rcx
	movl	(%rcx), %r8d
	movl	$1, -36(%rbp)
.L53:
	cmpl	%r8d, -36(%rbp)
	setg	%cl
	movzbl	%cl, %ecx
	testl	%ecx, %ecx
	jne	.L88
	movq	-656(%rbp), %rcx
	movl	(%rcx), %esi
	movq	-664(%rbp), %rcx
	movl	(%rcx), %ecx
	cmpl	%ecx, %esi
	je	.L88
	movq	-656(%rbp), %rcx
	movl	(%rcx), %ecx
	movl	%ecx, -92(%rbp)
	movl	-152(%rbp), %r9d
	movl	$1, -72(%rbp)
.L52:
	cmpl	%r9d, -72(%rbp)
	setg	%cl
	movzbl	%cl, %ecx
	testl	%ecx, %ecx
	jne	.L89
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	leaq	-1(%rcx), %rsi
	movl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	leaq	-1(%rcx), %r10
	movq	-656(%rbp), %rcx
	movl	(%rcx,%rsi,4), %esi
	movq	-656(%rbp), %rcx
	movl	%esi, (%rcx,%r10,4)
	addl	$1, -72(%rbp)
	jmp	.L52
.L89:
	nop
	movq	-648(%rbp), %rcx
	movl	(%rcx), %ecx
	movslq	%ecx, %rcx
	leaq	-1(%rcx), %r9
	movq	-656(%rbp), %rcx
	movl	-92(%rbp), %esi
	movl	%esi, (%rcx,%r9,4)
	addl	$1, -36(%rbp)
	jmp	.L53
.L88:
	nop
	movl	$0, -104(%rbp)
	movl	-152(%rbp), %esi
	movl	$1, -36(%rbp)
.L55:
	cmpl	%esi, -36(%rbp)
	setg	%cl
	movzbl	%cl, %ecx
	testl	%ecx, %ecx
	jne	.L90
	movl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	leaq	-1(%rcx), %r8
	movq	-656(%rbp), %rcx
	movl	(%rcx,%r8,4), %ecx
	movl	%ecx, -52(%rbp)
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	leaq	-1(%rcx), %r8
	movq	-656(%rbp), %rcx
	movl	(%rcx,%r8,4), %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	%ecx, %rcx
	imulq	%rax, %rcx
	leaq	(%rdx,%rcx), %r8
	movl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	addq	%rcx, %r8
	movq	-688(%rbp), %rcx
	movl	(%rcx,%r8,4), %ecx
	addl	%ecx, -104(%rbp)
	addl	$1, -36(%rbp)
	jmp	.L55
.L90:
	nop
	movq	-656(%rbp), %rcx
	movl	(%rcx), %ecx
	movl	%ecx, -52(%rbp)
	movq	-664(%rbp), %rcx
	movl	(%rcx), %esi
	movq	-672(%rbp), %rcx
	movl	(%rcx), %ecx
	cmpl	%ecx, %esi
	jne	.L56
	movl	-52(%rbp), %ecx
	movslq	%ecx, %rcx
	imulq	%rax, %rcx
	leaq	(%rdx,%rcx), %rsi
	movl	-56(%rbp), %ecx
	movslq	%ecx, %rcx
	addq	%rcx, %rsi
	movq	-688(%rbp), %rcx
	movl	(%rcx,%rsi,4), %ecx
	addl	%ecx, -104(%rbp)
.L56:
	movq	16(%rbp), %rcx
	movl	(%rcx), %ecx
	cmpl	%ecx, -104(%rbp)
	jge	.L91
	movq	16(%rbp), %rcx
	movl	-104(%rbp), %esi
	movl	%esi, (%rcx)
	movq	-648(%rbp), %rcx
	movl	(%rcx), %esi
	movl	$1, -36(%rbp)
.L58:
	cmpl	%esi, -36(%rbp)
	setg	%cl
	movzbl	%cl, %ecx
	testl	%ecx, %ecx
	jne	.L91
	movl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	leaq	-1(%rcx), %r9
	movl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	leaq	-1(%rcx), %r8
	movq	-656(%rbp), %rcx
	movl	(%rcx,%r9,4), %ecx
	movl	%ecx, -640(%rbp,%r8,4)
	addl	$1, -36(%rbp)
	jmp	.L58
.L91:
	nop
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, -72(%rbp)
	movq	-648(%rbp), %rcx
	movl	(%rcx), %ecx
	cmpl	%ecx, -72(%rbp)
	jle	.L59
	movq	-648(%rbp), %rcx
	movl	(%rcx), %ecx
	subl	%ecx, -72(%rbp)
.L59:
	movq	-656(%rbp), %rcx
	movl	(%rcx), %ecx
	movl	%ecx, -92(%rbp)
	movl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	leaq	-1(%rcx), %rsi
	movq	-656(%rbp), %rcx
	movl	(%rcx,%rsi,4), %esi
	movq	-656(%rbp), %rcx
	movl	%esi, (%rcx)
	movl	-72(%rbp), %ecx
	movslq	%ecx, %rcx
	leaq	-1(%rcx), %r8
	movq	-656(%rbp), %rcx
	movl	-92(%rbp), %esi
	movl	%esi, (%rcx,%r8,4)
	addl	$1, -68(%rbp)
	jmp	.L60
.L71:
	nop
	movq	-648(%rbp), %rcx
	movl	(%rcx), %edi
	movl	$1, -36(%rbp)
.L62:
	cmpl	%edi, -36(%rbp)
	setg	%cl
	movzbl	%cl, %ecx
	testl	%ecx, %ecx
	jne	.L92
	movl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	subq	$1, %rcx
	movl	-36(%rbp), %esi
	movslq	%esi, %rsi
	leaq	-1(%rsi), %r8
	movl	-640(%rbp,%rcx,4), %esi
	movq	-656(%rbp), %rcx
	movl	%esi, (%rcx,%r8,4)
	addl	$1, -36(%rbp)
	jmp	.L62
.L92:
	nop
	movq	-672(%rbp), %rcx
	movl	(%rcx), %ecx
	testl	%ecx, %ecx
	jne	.L93
	movq	-680(%rbp), %rcx
	movl	(%rcx), %edi
	movl	$1, -36(%rbp)
.L64:
	cmpl	%edi, -36(%rbp)
	setg	%cl
	movzbl	%cl, %ecx
	testl	%ecx, %ecx
	jne	.L93
	movl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	leaq	-1(%rcx), %rsi
	movq	-664(%rbp), %rcx
	movl	(%rcx), %ecx
	movslq	%ecx, %rcx
	imulq	%rax, %rcx
	leaq	(%rdx,%rcx), %r8
	movl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	addq	%rcx, %r8
	movl	-400(%rbp,%rsi,4), %esi
	movq	-688(%rbp), %rcx
	movl	%esi, (%rcx,%r8,4)
	addl	$1, -36(%rbp)
	jmp	.L64
.L93:
	nop
	movq	-664(%rbp), %rcx
	movl	(%rcx), %esi
	movq	-672(%rbp), %rcx
	movl	(%rcx), %ecx
	cmpl	%ecx, %esi
	sete	%cl
	movzbl	%cl, %esi
	movq	-672(%rbp), %rcx
	movl	(%rcx), %ecx
	testl	%ecx, %ecx
	sete	%cl
	movzbl	%cl, %ecx
	orl	%esi, %ecx
	testl	%ecx, %ecx
	jne	.L94
	movq	-664(%rbp), %rcx
	movl	(%rcx), %ecx
	movslq	%ecx, %rcx
	imulq	%rcx, %rax
	addq	%rax, %rdx
	movq	-672(%rbp), %rax
	movl	(%rax), %eax
	cltq
	leaq	(%rdx,%rax), %rcx
	movl	-400(%rbp), %edx
	movq	-688(%rbp), %rax
	movl	%edx, (%rax,%rcx,4)
	jmp	.L65
.L94:
	nop
.L65:
	nop
	addq	$544, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%rbp
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE0:
	.size	routng_, .-routng_
	.section	.rodata
.LC0:
	.string	"456.f"
.LC1:
	.ascii	"(a)"
.LC2:
	.ascii	" "
.LC3:
	.ascii	"TOMS456_PRB"
.LC4:
	.ascii	"  Test TOMS algorithm 456, for"
.LC5:
	.ascii	"  the routing problem."
.LC6:
	.ascii	"(a,i6)"
.LC7:
	.ascii	"  Start node SN =    "
.LC8:
	.ascii	"  End node EN =      "
.LC9:
	.ascii	"  Number of trials = "
	.align 4
.LC10:
	.long	15
	.align 8
.LC11:
	.ascii	"  The length of the optimal connection is "
.LC12:
	.ascii	"  Connection sequence:"
.LC13:
	.ascii	"(2x,i6,2x,i6)"
.LC14:
	.ascii	"  Normal end of execution."
	.text
	.type	MAIN__, @function
MAIN__:
.LFB1:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	pushq	%rbx
	subq	$632, %rsp
	.cfi_offset 3, -24
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$111, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$1, %edx
	leaq	.LC2(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$112, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$11, %edx
	leaq	.LC3(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$113, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$30, %edx
	leaq	.LC4(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$114, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$22, %edx
	leaq	.LC5(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	movl	$1, -104(%rbp)
	movl	$1, -24(%rbp)
	movl	$5, -100(%rbp)
	movl	$1, -20(%rbp)
.L97:
	cmpl	$15, -20(%rbp)
	setg	%al
	movzbl	%al, %eax
	testl	%eax, %eax
	jne	.L116
	movl	-20(%rbp), %eax
	cltq
	leaq	-1(%rax), %rdx
	movl	-20(%rbp), %eax
	movl	%eax, -96(%rbp,%rdx,4)
	addl	$1, -20(%rbp)
	jmp	.L97
.L116:
	nop
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$123, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$1, %edx
	leaq	.LC2(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$124, -624(%rbp)
	leaq	.LC6(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$6, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$21, %edx
	leaq	.LC7(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-104(%rbp), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$125, -624(%rbp)
	leaq	.LC6(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$6, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$21, %edx
	leaq	.LC8(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-24(%rbp), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$126, -624(%rbp)
	leaq	.LC6(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$6, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$21, %edx
	leaq	.LC9(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-100(%rbp), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	-24(%rbp), %rcx
	leaq	-104(%rbp), %rdx
	leaq	-96(%rbp), %rax
	leaq	-100(%rbp), %rsi
	pushq	%rsi
	leaq	-28(%rbp), %rsi
	pushq	%rsi
	leaq	d.4060(%rip), %r9
	leaq	.LC10(%rip), %r8
	movq	%rax, %rsi
	leaq	.LC10(%rip), %rdi
	call	routng_
	addq	$16, %rsp
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$130, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$1, %edx
	leaq	.LC2(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$132, -624(%rbp)
	leaq	.LC6(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$6, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$42, %edx
	leaq	.LC11(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-28(%rbp), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$134, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$1, %edx
	leaq	.LC2(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$135, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$22, %edx
	leaq	.LC12(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$136, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$1, %edx
	leaq	.LC2(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	movl	$0, -108(%rbp)
	movl	$1, -20(%rbp)
.L100:
	cmpl	$15, -20(%rbp)
	setg	%al
	movzbl	%al, %eax
	testl	%eax, %eax
	jne	.L117
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$140, -624(%rbp)
	leaq	.LC13(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$13, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	movl	-20(%rbp), %eax
	cltq
	leaq	-1(%rax), %rdx
	leaq	-96(%rbp), %rax
	salq	$2, %rdx
	leaq	(%rax,%rdx), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-108(%rbp), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	cmpl	$14, -20(%rbp)
	jg	.L99
	movl	-20(%rbp), %eax
	addl	$1, %eax
	cltq
	subq	$1, %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$4, %rax
	subq	%rdx, %rax
	movq	%rax, %rdx
	movl	-20(%rbp), %eax
	cltq
	subq	$1, %rax
	movl	-96(%rbp,%rax,4), %eax
	cltq
	addq	%rdx, %rax
	subq	$16, %rax
	leaq	0(,%rax,4), %rdx
	leaq	d.4060(%rip), %rax
	movl	(%rdx,%rax), %edx
	movl	-108(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -108(%rbp)
.L99:
	addl	$1, -20(%rbp)
	jmp	.L100
.L117:
	nop
	movl	$1, -104(%rbp)
	movl	$13, -24(%rbp)
	movl	$5, -100(%rbp)
	movl	$1, -20(%rbp)
.L102:
	cmpl	$15, -20(%rbp)
	setg	%al
	movzbl	%al, %eax
	testl	%eax, %eax
	jne	.L118
	movl	-20(%rbp), %eax
	cltq
	leaq	-1(%rax), %rdx
	movl	-20(%rbp), %eax
	movl	%eax, -96(%rbp,%rdx,4)
	addl	$1, -20(%rbp)
	jmp	.L102
.L118:
	nop
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$153, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$1, %edx
	leaq	.LC2(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$154, -624(%rbp)
	leaq	.LC6(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$6, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$21, %edx
	leaq	.LC7(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-104(%rbp), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$155, -624(%rbp)
	leaq	.LC6(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$6, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$21, %edx
	leaq	.LC8(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-24(%rbp), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$156, -624(%rbp)
	leaq	.LC6(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$6, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$21, %edx
	leaq	.LC9(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-100(%rbp), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	-24(%rbp), %rcx
	leaq	-104(%rbp), %rdx
	leaq	-96(%rbp), %rax
	leaq	-100(%rbp), %rsi
	pushq	%rsi
	leaq	-28(%rbp), %rsi
	pushq	%rsi
	leaq	d.4060(%rip), %r9
	leaq	.LC10(%rip), %r8
	movq	%rax, %rsi
	leaq	.LC10(%rip), %rdi
	call	routng_
	addq	$16, %rsp
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$160, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$1, %edx
	leaq	.LC2(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$162, -624(%rbp)
	leaq	.LC6(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$6, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$42, %edx
	leaq	.LC11(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-28(%rbp), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$164, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$1, %edx
	leaq	.LC2(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$165, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$22, %edx
	leaq	.LC12(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$166, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$1, %edx
	leaq	.LC2(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	movl	$0, -108(%rbp)
	movl	$1, -20(%rbp)
.L105:
	cmpl	$15, -20(%rbp)
	setg	%al
	movzbl	%al, %eax
	testl	%eax, %eax
	jne	.L119
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$170, -624(%rbp)
	leaq	.LC13(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$13, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	movl	-20(%rbp), %eax
	cltq
	leaq	-1(%rax), %rdx
	leaq	-96(%rbp), %rax
	salq	$2, %rdx
	leaq	(%rax,%rdx), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-108(%rbp), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	cmpl	$14, -20(%rbp)
	jg	.L104
	movl	-20(%rbp), %eax
	addl	$1, %eax
	cltq
	subq	$1, %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$4, %rax
	subq	%rdx, %rax
	movq	%rax, %rdx
	movl	-20(%rbp), %eax
	cltq
	subq	$1, %rax
	movl	-96(%rbp,%rax,4), %eax
	cltq
	addq	%rdx, %rax
	subq	$16, %rax
	leaq	0(,%rax,4), %rdx
	leaq	d.4060(%rip), %rax
	movl	(%rdx,%rax), %edx
	movl	-108(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -108(%rbp)
.L104:
	addl	$1, -20(%rbp)
	jmp	.L105
.L119:
	nop
	movl	$1, -104(%rbp)
	movl	$0, -24(%rbp)
	movl	$5, -100(%rbp)
	movl	$1, -20(%rbp)
.L107:
	cmpl	$15, -20(%rbp)
	setg	%al
	movzbl	%al, %eax
	testl	%eax, %eax
	jne	.L120
	movl	-20(%rbp), %eax
	cltq
	leaq	-1(%rax), %rdx
	movl	-20(%rbp), %eax
	movl	%eax, -96(%rbp,%rdx,4)
	addl	$1, -20(%rbp)
	jmp	.L107
.L120:
	nop
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$183, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$1, %edx
	leaq	.LC2(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$184, -624(%rbp)
	leaq	.LC6(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$6, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$21, %edx
	leaq	.LC7(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-104(%rbp), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$185, -624(%rbp)
	leaq	.LC6(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$6, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$21, %edx
	leaq	.LC8(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-24(%rbp), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$186, -624(%rbp)
	leaq	.LC6(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$6, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$21, %edx
	leaq	.LC9(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-100(%rbp), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	-24(%rbp), %rcx
	leaq	-104(%rbp), %rdx
	leaq	-96(%rbp), %rax
	leaq	-100(%rbp), %rsi
	pushq	%rsi
	leaq	-28(%rbp), %rsi
	pushq	%rsi
	leaq	d.4060(%rip), %r9
	leaq	.LC10(%rip), %r8
	movq	%rax, %rsi
	leaq	.LC10(%rip), %rdi
	call	routng_
	addq	$16, %rsp
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$190, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$1, %edx
	leaq	.LC2(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$192, -624(%rbp)
	leaq	.LC6(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$6, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$42, %edx
	leaq	.LC11(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-28(%rbp), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$194, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$1, %edx
	leaq	.LC2(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$195, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$22, %edx
	leaq	.LC12(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$196, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$1, %edx
	leaq	.LC2(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	movl	$0, -108(%rbp)
	movl	$1, -20(%rbp)
.L110:
	cmpl	$15, -20(%rbp)
	setg	%al
	movzbl	%al, %eax
	testl	%eax, %eax
	jne	.L121
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$200, -624(%rbp)
	leaq	.LC13(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$13, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	movl	-20(%rbp), %eax
	cltq
	leaq	-1(%rax), %rdx
	leaq	-96(%rbp), %rax
	salq	$2, %rdx
	leaq	(%rax,%rdx), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-108(%rbp), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	cmpl	$14, -20(%rbp)
	jg	.L109
	movl	-20(%rbp), %eax
	addl	$1, %eax
	cltq
	subq	$1, %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$4, %rax
	subq	%rdx, %rax
	movq	%rax, %rdx
	movl	-20(%rbp), %eax
	cltq
	subq	$1, %rax
	movl	-96(%rbp,%rax,4), %eax
	cltq
	addq	%rdx, %rax
	subq	$16, %rax
	leaq	0(,%rax,4), %rdx
	leaq	d.4060(%rip), %rax
	movl	(%rdx,%rax), %edx
	movl	-108(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -108(%rbp)
.L109:
	addl	$1, -20(%rbp)
	jmp	.L110
.L121:
	nop
	movl	$5, -32(%rbp)
	movl	$1, -104(%rbp)
	movl	$5, -24(%rbp)
	movl	$5, -100(%rbp)
	movl	-32(%rbp), %edx
	movl	$1, -20(%rbp)
.L112:
	cmpl	%edx, -20(%rbp)
	setg	%al
	movzbl	%al, %eax
	testl	%eax, %eax
	jne	.L122
	movl	-20(%rbp), %eax
	cltq
	leaq	-1(%rax), %rcx
	movl	-20(%rbp), %eax
	movl	%eax, -96(%rbp,%rcx,4)
	addl	$1, -20(%rbp)
	jmp	.L112
.L122:
	nop
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$214, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$1, %edx
	leaq	.LC2(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$215, -624(%rbp)
	leaq	.LC6(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$6, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$21, %edx
	leaq	.LC7(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-104(%rbp), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$216, -624(%rbp)
	leaq	.LC6(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$6, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$21, %edx
	leaq	.LC8(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-24(%rbp), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$217, -624(%rbp)
	leaq	.LC6(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$6, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$21, %edx
	leaq	.LC9(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-100(%rbp), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	-24(%rbp), %rcx
	leaq	-104(%rbp), %rdx
	leaq	-96(%rbp), %rsi
	leaq	-32(%rbp), %rax
	leaq	-100(%rbp), %rdi
	pushq	%rdi
	leaq	-28(%rbp), %rdi
	pushq	%rdi
	leaq	d.4060(%rip), %r9
	leaq	.LC10(%rip), %r8
	movq	%rax, %rdi
	call	routng_
	addq	$16, %rsp
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$221, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$1, %edx
	leaq	.LC2(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$223, -624(%rbp)
	leaq	.LC6(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$6, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$42, %edx
	leaq	.LC11(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-28(%rbp), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$225, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$1, %edx
	leaq	.LC2(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$226, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$22, %edx
	leaq	.LC12(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$227, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$1, %edx
	leaq	.LC2(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	movl	$0, -108(%rbp)
	movl	-32(%rbp), %ebx
	movl	$1, -20(%rbp)
.L115:
	cmpl	%ebx, -20(%rbp)
	setg	%al
	movzbl	%al, %eax
	testl	%eax, %eax
	jne	.L123
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$231, -624(%rbp)
	leaq	.LC13(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$13, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	movl	-20(%rbp), %eax
	cltq
	leaq	-1(%rax), %rdx
	leaq	-96(%rbp), %rax
	salq	$2, %rdx
	leaq	(%rax,%rdx), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-108(%rbp), %rcx
	leaq	-640(%rbp), %rax
	movl	$4, %edx
	movq	%rcx, %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_integer_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	movl	-32(%rbp), %eax
	cmpl	%eax, -20(%rbp)
	jge	.L114
	movl	-20(%rbp), %eax
	addl	$1, %eax
	cltq
	subq	$1, %rax
	movl	-96(%rbp,%rax,4), %eax
	movslq	%eax, %rdx
	movq	%rdx, %rax
	salq	$4, %rax
	subq	%rdx, %rax
	movq	%rax, %rdx
	movl	-20(%rbp), %eax
	cltq
	subq	$1, %rax
	movl	-96(%rbp,%rax,4), %eax
	cltq
	addq	%rdx, %rax
	subq	$16, %rax
	leaq	0(,%rax,4), %rdx
	leaq	d.4060(%rip), %rax
	movl	(%rdx,%rax), %edx
	movl	-108(%rbp), %eax
	addl	%edx, %eax
	movl	%eax, -108(%rbp)
.L114:
	addl	$1, -20(%rbp)
	jmp	.L115
.L123:
	nop
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$237, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$1, %edx
	leaq	.LC2(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$238, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$11, %edx
	leaq	.LC3(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	leaq	.LC0(%rip), %rax
	movq	%rax, -632(%rbp)
	movl	$239, -624(%rbp)
	leaq	.LC1(%rip), %rax
	movq	%rax, -560(%rbp)
	movq	$3, -552(%rbp)
	movl	$4096, -640(%rbp)
	movl	$6, -636(%rbp)
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write@PLT
	leaq	-640(%rbp), %rax
	movl	$26, %edx
	leaq	.LC14(%rip), %rsi
	movq	%rax, %rdi
	call	_gfortran_transfer_character_write@PLT
	leaq	-640(%rbp), %rax
	movq	%rax, %rdi
	call	_gfortran_st_write_done@PLT
	movl	$0, %edx
	movl	$0, %esi
	movl	$0, %edi
	call	_gfortran_stop_string@PLT
	.cfi_endproc
.LFE1:
	.size	MAIN__, .-MAIN__
	.globl	main
	.type	main, @function
main:
.LFB2:
	.cfi_startproc
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset 6, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register 6
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rdx
	movl	-4(%rbp), %eax
	movq	%rdx, %rsi
	movl	%eax, %edi
	call	_gfortran_set_args@PLT
	leaq	options.54.4160(%rip), %rsi
	movl	$7, %edi
	call	_gfortran_set_options@PLT
	call	MAIN__
	movl	$0, %eax
	leave
	.cfi_def_cfa 7, 8
	ret
	.cfi_endproc
.LFE2:
	.size	main, .-main
	.data
	.align 32
	.type	d.4060, @object
	.size	d.4060, 900
d.4060:
	.long	0
	.long	29
	.long	82
	.long	46
	.long	68
	.long	52
	.long	72
	.long	42
	.long	51
	.long	55
	.long	29
	.long	74
	.long	23
	.long	72
	.long	46
	.long	29
	.long	0
	.long	55
	.long	46
	.long	42
	.long	43
	.long	43
	.long	23
	.long	23
	.long	31
	.long	41
	.long	51
	.long	11
	.long	52
	.long	21
	.long	82
	.long	55
	.long	0
	.long	68
	.long	46
	.long	55
	.long	23
	.long	43
	.long	41
	.long	29
	.long	79
	.long	21
	.long	64
	.long	31
	.long	51
	.long	46
	.long	46
	.long	68
	.long	0
	.long	82
	.long	15
	.long	72
	.long	31
	.long	62
	.long	42
	.long	21
	.long	51
	.long	51
	.long	43
	.long	64
	.long	68
	.long	42
	.long	46
	.long	82
	.long	0
	.long	74
	.long	23
	.long	52
	.long	21
	.long	46
	.long	82
	.long	58
	.long	46
	.long	65
	.long	23
	.long	52
	.long	43
	.long	55
	.long	15
	.long	74
	.long	0
	.long	61
	.long	23
	.long	55
	.long	31
	.long	33
	.long	37
	.long	51
	.long	29
	.long	59
	.long	72
	.long	43
	.long	23
	.long	72
	.long	23
	.long	61
	.long	0
	.long	42
	.long	23
	.long	31
	.long	77
	.long	37
	.long	51
	.long	46
	.long	33
	.long	42
	.long	23
	.long	43
	.long	31
	.long	52
	.long	23
	.long	42
	.long	0
	.long	33
	.long	15
	.long	37
	.long	33
	.long	33
	.long	31
	.long	37
	.long	51
	.long	23
	.long	41
	.long	62
	.long	21
	.long	55
	.long	23
	.long	33
	.long	0
	.long	29
	.long	62
	.long	46
	.long	29
	.long	51
	.long	11
	.long	55
	.long	31
	.long	29
	.long	42
	.long	46
	.long	31
	.long	31
	.long	15
	.long	29
	.long	0
	.long	51
	.long	21
	.long	41
	.long	23
	.long	37
	.long	29
	.long	41
	.long	79
	.long	21
	.long	82
	.long	33
	.long	77
	.long	37
	.long	62
	.long	51
	.long	0
	.long	65
	.long	42
	.long	59
	.long	61
	.long	74
	.long	51
	.long	21
	.long	51
	.long	58
	.long	37
	.long	37
	.long	33
	.long	46
	.long	21
	.long	65
	.long	0
	.long	61
	.long	11
	.long	55
	.long	23
	.long	11
	.long	64
	.long	51
	.long	46
	.long	51
	.long	51
	.long	33
	.long	29
	.long	41
	.long	42
	.long	61
	.long	0
	.long	62
	.long	23
	.long	72
	.long	52
	.long	31
	.long	43
	.long	65
	.long	29
	.long	46
	.long	31
	.long	51
	.long	23
	.long	59
	.long	11
	.long	62
	.long	0
	.long	59
	.long	46
	.long	21
	.long	51
	.long	64
	.long	23
	.long	59
	.long	33
	.long	37
	.long	11
	.long	37
	.long	61
	.long	55
	.long	23
	.long	59
	.long	0
	.section	.rodata
	.align 16
	.type	options.54.4160, @object
	.size	options.54.4160, 28
options.54.4160:
	.long	2116
	.long	4095
	.long	0
	.long	1
	.long	1
	.long	0
	.long	31
	.ident	"GCC: (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0"
	.section	.note.GNU-stack,"",@progbits
ian@ian-Aspire-One-753:~/CodeCode$ cat 456.f
C      ALGORITHM 456, COLLECTED ALGORITHMS FROM ACM.
C      THIS WORK PUBLISHED IN COMMUNICATIONS OF THE ACM
C      VOL. 16, NO. 9, September, 1973, PP.572--574.
C#! /bin/sh
C# This is a shell archive, meaning:
C# 1. Remove everything above the #! /bin/sh line.
C# 2. Save the resulting text in a file.
C# 3. Execute the file with /bin/sh (not csh) to create the files:
C#	Fortran/
C#	Fortran/Sp/
C#	Fortran/Sp/Drivers/
C#	Fortran/Sp/Drivers/Makefile
C#	Fortran/Sp/Drivers/driver.f
C#	Fortran/Sp/Drivers/res
C#	Fortran/Sp/Src/
C#	Fortran/Sp/Src/src.f
C# This archive created: Thu Dec 15 13:28:03 2005
Cexport PATH; PATH=/bin:$PATH
Cif test ! -d 'Fortran'
Cthen
C	mkdir 'Fortran'
Cfi
Ccd 'Fortran'
Cif test ! -d 'Sp'
Cthen
C	mkdir 'Sp'
Cfi
Ccd 'Sp'
Cif test ! -d 'Drivers'
Cthen
C	mkdir 'Drivers'
Cfi
Cd 'Drivers'
Cif test -f 'Makefile'
Cthen
C	echo shar: will not over-write existing file "'Makefile'"
CCelse
Ccat << "SHAR_EOF" > 'Makefile'
Call: Res
C
Csrc.o: src.f
C	$(F77) $(F77OPTS) -c src.f
C
Cdriver.o: driver.f
C	$(F77) $(F77OPTS) -c driver.f
C
CDRIVERS= driver
CRESULTS= Res
C
CObjs1= driver.o src.o
Cdriver: $(Objs1)
C	$(F77) $(F77OPTS) -o driver $(Objs1) $(SRCLIBS)
CRes: driver 
C	./driver >Res
C
Cdiffres:Res res
C	echo "Differences in results from driver"
C	$(DIFF) Res res
C clean: 
C	rm -rf *.o $(DRIVERS) $(CLEANUP) $(RESULTS)
CSHAR_EOF
Cfi # end of overwriting check
Cif test -f 'driver.f'
Cthen
C	echo shar: will not over-write existing file "'driver.f'"
Celse
Ccat << "SHAR_EOF" > 'driver.f'
      program main

c***********************************************************************
c
cc TOMS456_PRB tests ROUTNG.
c
      implicit none

      integer m
      integer n

      parameter ( m = 15 )
      parameter ( n = 15 )

      integer d(m,m)
      integer en
      integer i
      integer l
      integer n2
      integer p(n)
      integer r
      integer sn
      integer total

      save d

      data d /
     &   0, 29, 82, 46, 68, 52, 72, 42, 51, 55, 29, 74, 23, 72, 46,  
     &  29,  0, 55, 46, 42, 43, 43, 23, 23, 31, 41, 51, 11, 52, 21,  
     &  82, 55,  0, 68, 46, 55, 23, 43, 41, 29, 79, 21, 64, 31, 51,  
     &  46, 46, 68,  0, 82, 15, 72, 31, 62, 42, 21, 51, 51, 43, 64,  
     &  68, 42, 46, 82,  0, 74, 23, 52, 21, 46, 82, 58, 46, 65, 23,  
     &  52, 43, 55, 15, 74,  0, 61, 23, 55, 31, 33, 37, 51, 29, 59,  
     &  72, 43, 23, 72, 23, 61,  0, 42, 23, 31, 77, 37, 51, 46, 33,  
     &  42, 23, 43, 31, 52, 23, 42,  0, 33, 15, 37, 33, 33, 31, 37,  
     &  51, 23, 41, 62, 21, 55, 23, 33,  0, 29, 62, 46, 29, 51, 11,  
     &  55, 31, 29, 42, 46, 31, 31, 15, 29,  0, 51, 21, 41, 23, 37,  
     &  29, 41, 79, 21, 82, 33, 77, 37, 62, 51,  0, 65, 42, 59, 61,  
     &  74, 51, 21, 51, 58, 37, 37, 33, 46, 21, 65,  0, 61, 11, 55,  
     &  23, 11, 64, 51, 46, 51, 51, 33, 29, 41, 42, 61,  0, 62, 23,  
     &  72, 52, 31, 43, 65, 29, 46, 31, 51, 23, 59, 11, 62,  0, 59,  
     &  46, 21, 51, 64, 23, 59, 33, 37, 11, 37, 61, 55, 23, 59,  0 /

      write ( *, '(a)' ) ' '
      write ( *, '(a)' ) 'TOMS456_PRB'
      write ( *, '(a)' ) '  Test TOMS algorithm 456, for'
      write ( *, '(a)' ) '  the routing problem.'

      sn = 1
      en = 1
      r = 5
      do i = 1, n
        p(i) = i
      end do
     
      write ( *, '(a)' ) ' '
      write ( *, '(a,i6)' ) '  Start node SN =    ', sn
      write ( *, '(a,i6)' ) '  End node EN =      ', en
      write ( *, '(a,i6)' ) '  Number of trials = ', r

      call routng ( n, p, sn, en, m, d, l, r )

      write ( *, '(a)' ) ' '
      write ( *, '(a,i6)' ) 
     &  '  The length of the optimal connection is ', l

      write ( *, '(a)' ) ' '
      write ( *, '(a)' ) '  Connection sequence:'
      write ( *, '(a)' ) ' '

      total = 0.0
      do i = 1, n
        write ( *, '(2x,i6,2x,i6)' ) p(i), total
        if ( i .lt. n ) then
          total = total + d(p(i),p(i+1))
        end if
      end do

      sn = 1
      en = 13
      r = 5
      do i = 1, n
        p(i) = i
      end do

      write ( *, '(a)' ) ' '
      write ( *, '(a,i6)' ) '  Start node SN =    ', sn
      write ( *, '(a,i6)' ) '  End node EN =      ', en
      write ( *, '(a,i6)' ) '  Number of trials = ', r

      call routng ( n, p, sn, en, m, d, l, r )

      write ( *, '(a)' ) ' '
      write ( *, '(a,i6)' ) 
     &  '  The length of the optimal connection is ', l

      write ( *, '(a)' ) ' '
      write ( *, '(a)' ) '  Connection sequence:'
      write ( *, '(a)' ) ' '

      total = 0.0
      do i = 1, n
        write ( *, '(2x,i6,2x,i6)' ) p(i), total
        if ( i .lt. n ) then
          total = total + d(p(i),p(i+1))
        end if
      end do

      sn = 1
      en = 0
      r = 5
      do i = 1, n
        p(i) = i
      end do

      write ( *, '(a)' ) ' '
      write ( *, '(a,i6)' ) '  Start node SN =    ', sn
      write ( *, '(a,i6)' ) '  End node EN =      ', en
      write ( *, '(a,i6)' ) '  Number of trials = ', r

      call routng ( n, p, sn, en, m, d, l, r )

      write ( *, '(a)' ) ' '
      write ( *, '(a,i6)' ) 
     &  '  The length of the optimal connection is ', l

      write ( *, '(a)' ) ' '
      write ( *, '(a)' ) '  Connection sequence:'
      write ( *, '(a)' ) ' '

      total = 0.0
      do i = 1, n
        write ( *, '(2x,i6,2x,i6)' ) p(i), total
        if ( i .lt. n ) then
          total = total + d(p(i),p(i+1))
        end if
      end do

      n2 = 5
      sn = 1
      en = 5
      r = 5
      do i = 1, n2
        p(i) = i
      end do

      write ( *, '(a)' ) ' '
      write ( *, '(a,i6)' ) '  Start node SN =    ', sn
      write ( *, '(a,i6)' ) '  End node EN =      ', en
      write ( *, '(a,i6)' ) '  Number of trials = ', r

      call routng ( n2, p, sn, en, m, d, l, r )

      write ( *, '(a)' ) ' '
      write ( *, '(a,i6)' ) 
     &  '  The length of the optimal connection is ', l

      write ( *, '(a)' ) ' '
      write ( *, '(a)' ) '  Connection sequence:'
      write ( *, '(a)' ) ' '

      total = 0.0
      do i = 1, n2
        write ( *, '(2x,i6,2x,i6)' ) p(i), total
        if ( i .lt. n2 ) then
          total = total + d(p(i),p(i+1))
        end if
      end do

      write ( *, '(a)' ) ' '
      write ( *, '(a)' ) 'TOMS456_PRB'
      write ( *, '(a)' ) '  Normal end of execution.'

      stop
      end
CSHAR_EOF
Cfi # end of overwriting check
Cif test -f 'res'
Cthen
C	echo shar: will not over-write existing file "'res'"
Celse
Ccat << "SHAR_EOF" > 'res'
C 
CTOMS456_PRB
C  Test TOMS algorithm 456, for
C  the routing problem.
C 
C  Start node SN =         1
C  End node EN =           1
C  Number of trials =      5
C 
C  The length of the optimal connection is    291
C 
C  Connection sequence:
C 
C       1       0
C      11      29
C       4      50
C       6      65
C       8      88
C      10     103
C      14     126
C      12     137
C       3     158
C       7     181
C       5     204
C       9     225
C      15     236
C       2     257
C      13     268
C 
C  Start node SN =         1
C  End node EN =          13
C  Number of trials =      5
C 
C  The length of the optimal connection is    268
C 
C  Connection sequence:
C 
C       1       0
C      11      29
C       4      50
C       6      65
C       8      88
C      10     103
C      14     126
C      12     137
C       3     158
C       7     181
C       5     204
C       9     225
C      15     236
C       2     257
C      13     268
C 
C  Start node SN =         1
C  End node EN =           0
C  Number of trials =      5
C 
C  The length of the optimal connection is    262
C 
C  Connection sequence:
C 
C       1       0
C      13      23
C       2      34
C      15      55
C       9      66
C       5      87
C       7     110
C       3     133
C      12     154
C      14     165
C      10     188
C       8     203
C       6     226
C       4     241
C      11     262
C 
C  Start node SN =         1
C  End node EN =           5
C  Number of trials =      5
C 
C  The length of the optimal connection is    189
C 
C  Connection sequence:
C 
C       1       0
C       2      29
C      4      75
C       3     143
C       5     189
CC 
CTOMS456_PRB
C  Normal end of execution.
CSHAR_EOF
Cfi # end of overwriting check
Ccd ..
Cif test ! -d 'Src'
Cthen
C	mkdir 'Src'
Cfi
Ccd 'Src'
Cif test -f 'src.f'
Cthen
C	echo shar: will not over-write existing file "'src.f'"
Ccelse
Ccat << "SHAR_EOF" > 'src.f'
       SUBROUTINE ROUTNG ( N, P, SN, EN, M, D, L, R )
C     .. Scalar Arguments ..
      INTEGER EN,L,M,N,R,SN
C     ..
C     .. Array Arguments ..
      INTEGER D(M,M),P(N)
C     ..
C     .. Local Scalars ..
      INTEGER I,I1,ICOR,ICOUNT,INC,IP,IP1,IR,IR1,IRS,J,J1,JE,JP,JP1,JS,
     +        K,K1,L1,LARGE,LN,LR,MININC,N1
C     ..
C     .. Local Arrays ..
      INTEGER ID(60),Q(60)
C     ..
C  N  - NUMBER OF NODES TO BE CONNECTED.
C  P  - NODE NUMBER VECTOR (IN OUTPUT, OPTIMAL CONNECTION).
C  SN - START NODE NUMBER.
C  EN - END NODE NUMBER.
C  M  - DISTANCE MATRIX ORDER.
C  D  - DISTANCE MATRIX.
C  L  - SHORTEST CONNECTION LENGTH (OUTPUT).
C  R  - NUMBER OF RUNS.
C  GET LARGE NUMBER ( = N X MAX D(I,J) ).
      LARGE = 0
      DO 20 I = 1, M
        DO 10 J = 1, M
          IF ( D(I,J) .GT. LARGE ) LARGE = D(I,J)
10      CONTINUE
20    CONTINUE
      LARGE = LARGE * N
C  DEFINE NON-EXISTING ARCS BY ASSIGNING
C  THEIR DISTANCES LARGE NEGATIVE VALUES.
      IF ( EN .NE. 0 ) GO TO 40
      DO 30 I = 1, M
        ID(I) = D(I,SN)
        D(I,SN) = -LARGE
        D(SN,SN) = 0
30    CONTINUE
40    IF ( SN .EQ. EN .OR. EN .EQ. 0 ) GO TO 50
      ID(1) = D(EN,SN)
      D(EN,SN) = -LARGE
C  RUN R TRIALS.
50    L = LARGE
      DO 280 IRS = 1, R
C  BUILD TOUR BY SUCCESSIVE INSERTING
C  NOT-YET-INVOLVED NODES.
C  INITIATE TOUR IS CONSIDERED AS 
C  ARC P(1) TO P(1).
        DO 90 JS = 2, N
          MININC = LARGE
C  TRACE ALL NOT-YET-INVOLVED NODES
C  TO CHOOSE THE ONE WITH MINIMUM INCREMENT.
          DO 70 J = JS, N
            JP = P(J)
            JE = JS - 1
C  FOR EACH NOT-YET-INVOLVED NODE TRACE ALREADY
C  BUILT-UP TOUR TO CHOOSE THE MINIMUM INCREMENT ARC.
            DO 60 I = 1, JE
              IP = P(I)
              IP1 = P(I+1)
              IF ( I .EQ. JE ) IP1 = P(1)
              INC = D(IP,JP) + D(JP,IP1) - D(IP,IP1)
              IF ( INC .GE. MININC ) GO TO 60
              J1 = J
              I1 = I
              MININC = INC
60          CONTINUE
70        CONTINUE
C  STRETCH TOUR BY INSERTING THE CHOSEN NODE P(J1)
C  BETWEEN THE NODES P(I1) AND P(I1+1).
80        J1 = J1 - 1
          IF ( J1 .EQ. I1 ) GO TO 90
          IP = P(J1)
          P(J1) = P(J1+1)
          P(J1+1) = IP
          GO TO 80
90      CONTINUE
C  CORRECT TOUR BY 3-OPT METHOD.
C  VARY CONSECUTIVE CHAIN LENGTH K.
        N1 = N - 1
        IF ( N .LT. 3 ) GO TO 210
        DO 200 K = 1, N1
          ICOUNT = 0
C  SHIFT CONSECUTIVE CHAIN
C  THROUGHOUT SEQUENCE OF N NODES.
100       ICOR = 0
          DO 190 J = 1, N
C  CALCULATE CHAIN LENGTH IN FORWARD
C  AND BACKWARD DIRECTION.
            L1 = 0
            LR = 0
            IF ( K .EQ. 1 ) GO TO 120
            I = J
            K1 = 1
110         IF ( I .GT. N ) I = I - N
            IP = P(I)
            IP1 = I + 1
            IF ( IP1 .GT. N ) IP1 = 1
            IP1 = P(IP1)
            L1 = L1 + D(IP,IP1)
            LR = LR + D(IP1,IP)
            I = I + 1
            K1 = K1 + 1
            IF ( K1 .LT. K ) GO TO 110
C  FOR EACH POSITIONED CHAIN (AS IS AND INVERTED)
C  CHECK ALL ARCS IF INSERTION IMPROVES TOUR.
120         MININC = LARGE
            J1 = J + K - 1
            IF ( J1 .GT. N ) J1 = J1 - N
            DO 150 I = 1, N
              IF ( J .LE. J1 .AND. ( I .GE. J .AND. I .LE. J1 ) )
     &          GO TO 150
              IF ( J .GT. J1 .AND. ( I .LE. J1 .OR. I .GE. J ) )
     &          GO TO 150
              IP = P(I)
              JP = P(J)
              JP1 = P(J1)
              IP1 = I + 1
              IF ( IP1 .GT. N ) IP1 = 1
              JE = IP1
              IF ( IP1 .EQ. J ) IP1 = J1 + 1
              IF ( IP1 .GT. N ) IP1 = 1
              IP1 = P(IP1)
              LN = L1
              IR = 0
130           INC = D(IP,JP) + LN + D(JP1,IP1) - D(IP,IP1)
              IF ( INC .GT. MININC .OR. ( INC .EQ. MININC .AND.
     &          ( JE .NE. J .OR. ( JE .EQ. J .AND. IR .EQ. 1 ) ) ) ) 
     &          GO TO 140
              I1 = I
              IR1 = IR
              MININC = INC
140           IF ( IR .EQ. 1 ) GO TO 150
              IR = 1
              LN = LR
              JS = JP
              JP = JP1
              JP1 = JS
              GO TO 130
150         CONTINUE
            I = I1 + 1
            IF ( I .GT. N ) I = 1
            IF ( I .EQ. J .AND. IR1 .EQ. 0 ) GO TO 190
C  REINSERT CHAIN OF LENGTH K STARTING IN J
C  BETWEEN NODES P(I1) AND P(I1+1).
            ICOR = 1
            JS = J
            JE = 0
            IF ( IR1 .EQ. 0 ) GO TO 160
            JS = J1
            JE = -1
160         K1 = 0
170         K1 = K1 + 1
            IF ( K1 .GT. K ) GO TO 190
            I = JS
            JS = JS + JE
            IF ( JS .LT. 1 ) JS = N
180         IP = I + 1
            IF ( IP .GT. N ) IP = 1
            JP = P(I)
            P(I) = P(IP)
            P(IP) = JP
            I = I + 1
            IF ( I .GT. N ) I = 1
            IF ( IP - I1 ) 180, 170, 180
190       CONTINUE
          IF ( ICOR .EQ. 0 ) GO TO 200
          ICOUNT = ICOUNT + 1
          IF ( ICOUNT .LT. N ) GO TO 100
200     CONTINUE
C  ORIENT TOUR WITH SN IN P(1).
210     DO 230 I = 1, N
          IF ( P(1) .EQ. SN ) GO TO 240
          JS = P(1)
          DO 220 J = 1, N1
            P(J) = P(J+1)
220       CONTINUE
          P(N) = JS
230     CONTINUE
C  CALCULATE TOUR LENGTH.
240     L1 = 0
        DO 250 I = 1, N1
          IP = P(I)
          IP1 = P(I+1)
          L1 = L1 + D(IP,IP1)
250     CONTINUE
        IP = P(1)
        IF ( SN .EQ. EN ) L1 = L1 + D(IP1,IP)
C  SAVE SOLUTION, IF BETTER, AND SET NEW INITIATE NODE.
        IF ( L1 .GE. L ) GO TO 270
        L = L1
        DO 260 I = 1,  N
          Q(I) = P(I)
260     CONTINUE
270     J = IRS + 1
        IF ( J .GT. N ) J = J - N
        JS = P(1)
        P(1) = P(J)
        P(J) = JS
280   CONTINUE
C  RESTORE P AND DUMMY DISTANCES.
      DO 290 I = 1, N
        P(I) = Q(I)
290   CONTINUE
      IF ( EN .NE. 0 ) GO TO 310
      DO 300 I = 1, M
        D(I,SN) = ID(I)
300   CONTINUE
310   IF ( SN .EQ. EN .OR. EN .EQ. 0 ) GO TO 320
      D(EN,SN) = ID(1)
320   RETURN
      END
CSHAR_EOF
Cfi # end of overwriting check
Ccd ..
Ccd ..
Ccd ..
C#       End of shell archive
Cexit 0
ian@ian-Aspire-One-753:~/CodeCode$ gfortran 456.f -o 456f
456.f:520:72:

  520 |             IF ( IP - I1 ) 180, 170, 180
      |                                                                        1
Warning: Fortran 2018 deleted feature: Arithmetic IF statement at (1)
ian@ian-Aspire-One-753:~/CodeCode$ ./456f
 
TOMS456_PRB
  Test TOMS algorithm 456, for
  the routing problem.
 
  Start node SN =         1
  End node EN =           1
  Number of trials =      5
 
  The length of the optimal connection is    291
 
  Connection sequence:
 
       1       0
      11      29
       4      50
       6      65
       8      88
      10     103
      14     126
      12     137
       3     158
       7     181
       5     204
       9     225
      15     236
       2     257
      13     268
 
  Start node SN =         1
  End node EN =          13
  Number of trials =      5
 
  The length of the optimal connection is    268
 
  Connection sequence:
 
       1       0
      11      29
       4      50
       6      65
       8      88
      10     103
      14     126
      12     137
       3     158
       7     181
       5     204
       9     225
      15     236
       2     257
      13     268
 
  Start node SN =         1
  End node EN =           0
  Number of trials =      5
 
  The length of the optimal connection is    262
 
  Connection sequence:
 
       1       0
      13      23
       2      34
      15      55
       9      66
       5      87
       7     110
       3     133
      12     154
      14     165
      10     188
       8     203
       6     226
       4     241
      11     262
 
  Start node SN =         1
  End node EN =           5
  Number of trials =      5
 
  The length of the optimal connection is    189
 
  Connection sequence:
 
       1       0
       2      29
       4      75
       3     143
       5     189
 
TOMS456_PRB
  Normal end of execution.
ian@ian-Aspire-One-753:~/CodeCode$ sloccount 456.f
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/CodeCode/456.f to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
306     top_dir         fortran=306


Totals grouped by language (dominant language first):
fortran:        306 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 306
Development Effort Estimate, Person-Years (Person-Months) = 0.06 (0.69)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.18 (2.17)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.32
Total Estimated Cost to Develop                           = $ 7,792
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
ian@ian-Aspire-One-753:~/CodeCode$ sloccount 456.s
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/CodeCode/456.s to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
2686    top_dir         asm=2686


Totals grouped by language (dominant language first):
asm:           2686 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 2,686
Development Effort Estimate, Person-Years (Person-Months) = 0.56 (6.77)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.43 (5.17)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 1.31
Total Estimated Cost to Develop                           = $ 76,244
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
ian@ian-Aspire-One-753:~/CodeCode$ 

