ian@ian-HP-Stream-Laptop-11-y0XX:~/CodeCode$ gfortran sevdim88test.f -O3  -ffast-math -ffree-form -std=legacy -funroll-loops -o sevdim
ian@ian-HP-Stream-Laptop-11-y0XX:~/CodeCode$ time ./sevdim > sevout.txt
^C

real	13m51.537s
user	0m0.001s
sys	0m0.009s
ian@ian-HP-Stream-Laptop-11-y0XX:~/CodeCode$ time ./sevdim > sevout.txt
77777777

real	0m34.719s
user	0m21.169s
sys	0m3.604s
ian@ian-HP-Stream-Laptop-11-y0XX:~/CodeCode$ cat sevdim88test.f
                 program testcall
                 integer arcnt1
!                integer p11,p12,p21,p22,p31,p32,p41,p42,p51,p52,p61,p62,p71,p72
                 integer p1, p2, p3, p4, p5, p6, p7
!                 integer recnt
!                 integer a6
!                 integer a2
!                 integer i
!                integer j
!                 integer a3
!                 integer a4
!                 integer a5
!                 integer a7
!                integer h
!                 integer a1
!                 integer hcube(7, 7, 7, 7, 7, 7, 7)
!                 integer iz, izy
!                  CALL CPU_TIME(START)
                  
                 arcnt1 = 25
                 p1 = 7
                 p2 = 7
                 p3 = 7
                 p4 = 7
                 p5 = 7
                 p6 = 7
                 p7 = 7
       read(5,9590) arcnt1, p1, p2, p3, p4, p5, p6, p7
9590   format(i1,i1,i1,i1,i1,i1,i1,i1)      
                 call testgen(arcnt1, p1, p2, p3, p4, p5, p6, p7)
                 call addressf
                 end program 
                   
      subroutine testgen(arcnt, p121, p221, p321, p421, p521, p621, p73)
      integer p11,p12,p21,p22,p31,p32,p41,p42,p51,p52,p61,p62,p71,p73
                 integer a1, a2, a3, a4, a5, a6, a7
!                 integer arcnt, p12, p22, p21, p22, p31, p32, p41
!                 integer p42, p51, p52, p61, p62, p71, p72
                 integer p121, p221, p321, p421, p521, p621
!                 real :: START, FINISH
                 integer h(7, 7, 7, 7, 7, 7, 7)
                 integer arcnt, recnt, iz, izy
                 CALL CPU_TIME(START)
                
                 do 100 iz = 1, arcnt
                 p11=1
                 p12= p121
                 p21= 1
                 p22= p221
                 p31= 1
                 p32= p321
                 p41= 1
                 p42= p421
                 p51=1
                 p52= p521
                 p61=1
                 p62 = p621
                 p71=1
                 p72= p73
                 recnt=1
                 izy =iz
!            write(6, 9800) izy
!9800        format(" "," no of arrays",i10)
               do 70 a1 = p11, p12
               do 60 a2 = p21, p22
                do 50 a3 = p31, p32
                  do 40 a4 = p41, p42
                   do 30 a5 = p51, p52
                    do 20 a6  = p61, p62
                     do 10 a7 = p71, p73
       h(a1,a2,a3,a4,a5,a6,a7)=2*a1+4*a2+8*a3+16*a4+32*a5+64*a6+128*a7
          write(6,1000)izy,recnt,h(a1,a2,a3,a4,a5,a6,a7) &
        &,        a1,a2,a3,a4,a5,a6,a7
          
1000        format (" ",i10,i10,i10,i10,i10,i10,i10,i10,i10,i10)
                            recnt = recnt + 1
10                          continue
20                     continue
30                    continue
40                   continue
50                  continue
60                 continue
70               continue
            write(6, 9800) izy
9800        format(" "," no of arrays",i10)
100           continue
              CALL CPU_TIME(FINISH)
              write(6,2000)  FINISH - START
2000          format("Time = ",F6.2, " ", "seconds")
          return
          end subroutine
          subroutine addressf
          integer indexa(1000), dimn(1000)
          integer indexct, dimct, addre
          indexa(1) = 4
          indexa(2) = 3
          indexa(3) = 5
          dimn(1) = 5
          dimn(2) = 2
          dimn(3) = 7
          addre = 0
          do dimct = 1, 3, 1
             do indexct  = 1,3,1
              addre = addre + (dimn(dimct) * indexa(indexct) - 1)
           end do
          end do  
          print *,addre, dimn(dimct), indexa(indexct)
          return
          end subroutine 
          
ian@ian-HP-Stream-Laptop-11-y0XX:~/CodeCode$ sloccount sevdim88test.f
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/CodeCode/sevdim88test.f to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
85      top_dir         fortran=85


Totals grouped by language (dominant language first):
fortran:         85 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 85
Development Effort Estimate, Person-Years (Person-Months) = 0.02 (0.18)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.11 (1.30)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.14
Total Estimated Cost to Develop                           = $ 2,030
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
ian@ian-HP-Stream-Laptop-11-y0XX:~/CodeCode$ 

