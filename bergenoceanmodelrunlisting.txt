ian@ian-HP-Stream-Laptop-11-y0XX:~/bergenoceanforecast$ gfortran -o Main *.o
ian@ian-HP-Stream-Laptop-11-y0XX:~/bergenoceanforecast$ gfortran -o Main *.o -O3 -ffast-math -funroll-loops -s
ian@ian-HP-Stream-Laptop-11-y0XX:~/bergenoceanforecast$ ls
add1.f90           bound.o          fieldinit.f90       Main           nohup.out         point.plt      smagor2d.o      tideinit.f90
add1.o             condition.f90    fieldinit.o         Main.f90       nrg3d.f90         postid4.f90    smagor.f90      tideinit.o
addeta.f90         condition.o      files.f90           Main.o         nrg3d.o           postid4.o      smagor.o        updatedd.f90
addeta.o           dens.f90         files.o             Makefile       outbom.river      pzlevel.f90    state.f90       updatedd.o
advect.f90         dens.o           horviscuv2d.f90     mod_bound.f90  outbom.tide       pzlevel.o      state.mod       upstreamq.f90
advect.o           densunesco.f90   horviscuv2d.o       mod_bound.mod  outbottomfem.f90  relax.f90      state.o         upstreamq.o
arnaelven.plt      densunesco.o     horviscuv2dpom.f90  mod_bound.o    outbottomfem.o    relax.o        stepu3d.f90     vertdiff.f90
atmosp.f90         depth.f90        horviscuv2dpom.o    modesplit.f90  outetafem.f90     rivers.f90     stepu3d.o       vertdiff.o
atmosp.o           depth.o          horviscuv.f90       modesplit.o    outetafem.o       rivers.o       stepv3d.f90     vertviscuvb.f90
BOM-4.1-guide.pdf  diagnose.f90     horviscuv.o         mod_main.f90   output.f90        section1.plt   stepv3d.o       vertviscuvb.o
bom_4.1.tar        diagnose.o       horviscuvpom.f90    mod_main.mod   output.o          sectiout.f90   superbeef.f90   windforcing.f90
bottom1km.dat      dypgrin.f90      horviscuvpom.o      mod_main.o     outsections.f90   sectiout.o     superbeef.o     windforcing.o
bottom.plt         dypgrin.o        internal4.f90       my2halv.f90    outsections.o     setup.f90      superbeeuv.f90  wreal.f90
bound2d.f90        energy40.eps.gz  internal4.o         my2halv.o      point2.plt        setupfile.dat  superbeeuv.o    wreal.o
bound2d.o          energy.plt       internal.f90        ncalfa.f90     point3.plt        setup.o        tidefrs.f90
bound.f90          field2d.plt      internal.o          ncalfa.o       point40.eps.gz    smagor2d.f90   tidefrs.o
ian@ian-HP-Stream-Laptop-11-y0XX:~/bergenoceanforecast$ ./Main
 DX=   1000.00000     DY=   1000.00000    
 CONSTANT VISCOSITIES ARE CHOSEN
 AM =   100.000000     AM2D=   2000.00000    
 CONSTANT DIFFUSIVITY IS CHOSEN
 AH =   0.00000000    
 MAXIMUM LIMITS ARE   173.611115      AND    6944.44434      RESPECTIVELY
 AREA of the surface of the fjords is   353000000.    

  K       Z         ZZ         DZ         DZZ

     1    -0.000    -0.002     0.005     0.005
     2    -0.005    -0.007     0.005     0.005
     3    -0.010    -0.012     0.005     0.005
     4    -0.015    -0.018     0.005     0.005
     5    -0.020    -0.022     0.005     0.005
     6    -0.025    -0.028     0.006     0.007
     7    -0.031    -0.034     0.007     0.008
     8    -0.038    -0.042     0.008     0.008
     9    -0.046    -0.050     0.009     0.010
    10    -0.055    -0.060     0.010     0.011
    11    -0.065    -0.071     0.012     0.013
    12    -0.077    -0.084     0.014     0.015
    13    -0.091    -0.099     0.016     0.017
    14    -0.107    -0.116     0.018     0.019
    15    -0.125    -0.135     0.020     0.023
    16    -0.145    -0.157     0.025     0.028
    17    -0.170    -0.185     0.030     0.035
    18    -0.200    -0.220     0.040     0.045
    19    -0.240    -0.265     0.050     0.055
    20    -0.290    -0.320     0.060     0.065
    21    -0.350    -0.385     0.070     0.075
    22    -0.420    -0.460     0.080     0.085
    23    -0.500    -0.545     0.090     0.095
    24    -0.590    -0.640     0.100     0.100
    25    -0.690    -0.740     0.100     0.100
    26    -0.790    -0.840     0.100     0.075
    27    -0.890    -0.915     0.050     0.037
    28    -0.940    -0.952     0.025     0.020
    29    -0.965    -0.972     0.015     0.013
    30    -0.980    -0.985     0.010     0.010
    31    -0.990    -0.995     0.010    -0.995
    32    -1.000     0.000     0.000     0.000
 ____________________________________________________
 Condition.f90:  Horisontal points totally IM*JM:        1815
 Number of ETA points:         347
 Number of U points:         255
 Number of V points:         266
 The 2-D Courant number is  0.568957090    
 THE SIMULATION INCL.            4  TIDAL CONSTITUENT(S)
 MASS=   25.8445950       33.5808411       9.99999714    
 THE alphas
           1   1.00000000       1.00000000    
           2  0.997619152      0.912858367    
           3  0.991204381      0.738035917    
           4  0.974176824      0.485364407    
           5  0.930715680      0.251403123    
           6  0.830054402      0.108818516    
           7   0.00000000       0.00000000    
           0   0.00000000       4.72054743E+10   1008.01044    
           1 ---------------------   4.16666688E-03
           1          15          10          12   3.62787303E-03
           1          12          26          17   34.0000076    
           1   1.32577959E-03   4.72021688E+10   1008.01538    
 SMAX          12          26          17   34.0000076    
 SMIN           1           1          32  -2.91666794    
 TMAX          23          16           2   10.0000029    
 TMIN           1           1          32 -0.833333969    
 This timestep:  0.100868002      seconds
           2 ---------------------   8.33333377E-03
           2          15          10          12   6.80603972E-03
           2          19           8          32   34.0902786    
           2   5.93036972E-03   4.71990886E+10   1008.01984    
 SMAX          19           8          32   34.0902786    
 SMIN           1           1           1   0.00000000    
 TMAX          10          30           9   10.0000038    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.79279971E-02  seconds
           3 ---------------------   1.25000011E-02
           3          12          12           8   1.18528008E-02
           3          10          30          23   34.0000153    
           3   1.56008257E-02   4.71953162E+10   1008.02344    
 SMAX          10          30          23   34.0000153    
 SMIN           1           1          32 -0.506366014    
 TMAX          11          20           3   10.0000048    
 TMIN           1           1          32 -0.144675970    
 This timestep:   8.67479891E-02  seconds
           4 ---------------------   1.66666675E-02
           4          12          12           7   1.58669818E-02
           4          11          13          32   34.0087357    
           4   2.87733581E-02   4.71907123E+10   1008.02783    
 SMAX          11          13          32   34.0087357    
 SMIN           1           1           1   0.00000000    
 TMAX          11          20           3   10.0000057    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.68409872E-02  seconds
           5 ---------------------   2.08333340E-02
           5          12          12           3   1.96105484E-02
           5          28          22          23   34.0000191    
           5   4.53620516E-02   4.71853916E+10   1008.02960    
 SMAX          28          22          23   34.0000191    
 SMIN           1           1          32  -6.76562190E-02
 TMAX          11          20           3   10.0000057    
 TMIN           1           1          32  -1.93303376E-02
 This timestep:   8.60439837E-02  seconds
           6 ---------------------   2.50000022E-02
           6          12          12           2   2.32786648E-02
           6          13          35          32   34.0009003    
           6   6.46791384E-02   4.71793705E+10   1008.03186    
 SMAX          13          35          32   34.0009003    
 SMIN           1           1           1   0.00000000    
 TMAX          11          20           3   10.0000057    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.57110023E-02  seconds
           7 ---------------------   2.91666687E-02
           7          12          12           1   2.70345956E-02
           7          28          22          23   34.0000229    
           7   8.50250050E-02   4.71727350E+10   1008.03424    
 SMAX          28          22          23   34.0000229    
 SMIN           1           1          32  -8.22957605E-03
 TMAX          13          48           9   10.0000067    
 TMIN           1           1          32  -2.35120533E-03
 This timestep:   8.74680281E-02  seconds
           8 ---------------------   3.33333351E-02
           8          12          12           1   3.00933570E-02
           8          11          14          32   34.0001030    
           8  0.105362102       4.71654400E+10   1008.03601    
 SMAX          11          14          32   34.0001030    
 SMIN           1           1           1   0.00000000    
 TMAX          11          20           3   10.0000067    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.64700079E-02  seconds
           9 ---------------------   3.75000015E-02
           9          12          12           1   3.31289619E-02
           9           8          19          21   34.0000267    
           9  0.124945655       4.71576617E+10   1008.03796    
 SMAX           8          19          21   34.0000267    
 SMIN           1           1          32  -9.58760735E-04
 TMAX          13          48           9   10.0000076    
 TMIN           1           1          32  -2.73943006E-04
 This timestep:   8.72080326E-02  seconds
          10 ---------------------   4.16666679E-02
          10          12          12           1   3.55689153E-02
          10           8          19          21   34.0000267    
          10  0.143211588       4.71493100E+10   1008.03912    
 SMAX           8          19          21   34.0000267    
 SMIN           1           1           1   0.00000000    
 TMAX           7          14          20   10.0000076    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.72539878E-02  seconds
          11 ---------------------   4.58333343E-02
          11          12          12           1   3.78215201E-02
          11          11          26          19   34.0000229    
          11  0.159979358       4.71406100E+10   1008.03955    
 SMAX          11          26          19   34.0000229    
 SMIN           1           1          32  -1.09354674E-04
 TMAX          13          48           9   10.0000076    
 TMIN           1           1          32  -3.12328411E-05
 This timestep:   8.79600048E-02  seconds
          12 ---------------------   5.00000045E-02
          12          12          12           1   3.96063700E-02
          12           8          19          21   34.0000267    
          12  0.175428391       4.71315087E+10   1008.04156    
 SMAX           8          19          21   34.0000267    
 SMIN           1           1           1   0.00000000    
 TMAX          13          48           9   10.0000086    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.80930424E-02  seconds
          13 ---------------------   5.41666709E-02
          13          12          12           1   4.12835479E-02
          13           8          19          21   34.0000267    
          13  0.189468056       4.71221535E+10   1008.04413    
 SMAX           8          19          21   34.0000267    
 SMIN           1           1          32  -1.23977698E-05
 TMAX          28          28           9   10.0000086    
 TMIN           1           1          32  -3.57627869E-06
 This timestep:   8.79240036E-02  seconds
          14 ---------------------   5.83333373E-02
          14          12          12           1   4.25643176E-02
          14           8          19          21   34.0000267    
          14  0.201968238       4.71125238E+10   1008.04199    
 SMAX           8          19          21   34.0000267    
 SMIN           1           1           1   0.00000000    
 TMAX          28          28           9   10.0000095    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.73739719E-02  seconds
          15 ---------------------   6.25000000E-02
          15          12          12           1   4.37466316E-02
          15           8          19          21   34.0000267    
          15  0.212781399       4.71027180E+10   1008.04242    
 SMAX           8          19          21   34.0000267    
 SMIN           1           1          32  -1.27156591E-06
 TMAX          28          28           9   10.0000105    
 TMIN           1           1          32  -3.97364374E-07
 This timestep:   9.16889906E-02  seconds
          16 ---------------------   6.66666701E-02
          16          12          12           1   4.45762239E-02
          16          12          41          26   34.0000267    
          16  0.221779972       4.70927483E+10   1008.04352    
 SMAX          12          41          26   34.0000267    
 SMIN           1           1           1   0.00000000    
 TMAX          29          31          12   10.0000105    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.79720449E-02  seconds
          17 ---------------------   7.08333403E-02
          17          12          12           1   4.52937558E-02
          17           9          15          22   34.0000267    
          17  0.228932247       4.70826844E+10   1008.04376    
 SMAX           9          15          22   34.0000267    
 SMIN           1           1           1   0.00000000    
 TMAX          28          33          11   10.0000095    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.81819725E-02  seconds
          18 ---------------------   7.50000030E-02
          18          12          12           1   4.57154363E-02
          18          18           8          21   34.0000267    
          18  0.234207675       4.70725304E+10   1008.04285    
 SMAX          18           8          21   34.0000267    
 SMIN           1           1           1   0.00000000    
 TMAX          29          25          11   10.0000095    
 TMIN           1           1           1   0.00000000    
 This timestep:   9.04890299E-02  seconds
          19 ---------------------   7.91666731E-02
          19          12          12           1   4.60373089E-02
          19           9          15          22   34.0000305    
          19  0.237604052       4.70623683E+10   1008.04309    
 SMAX           9          15          22   34.0000305    
 SMIN           1           1           1   0.00000000    
 TMAX          15          27           4   10.0000105    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.85040760E-02  seconds
          20 ---------------------   8.33333358E-02
          20          12          12           1   4.60774451E-02
          20           9          15          22   34.0000305    
          20  0.239153251       4.70521938E+10   1008.04321    
 SMAX           9          15          22   34.0000305    
 SMIN           1           1           1   0.00000000    
 TMAX          29          25          11   10.0000114    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.70878696E-02  seconds
          21 ---------------------   8.75000060E-02
          21          12          12           1   4.60361540E-02
          21          10          43          25   34.0000343    
          21  0.238916904       4.70420685E+10   1008.04193    
 SMAX          10          43          25   34.0000343    
 SMIN           1           1           1   0.00000000    
 TMAX          13          12          12   10.0000124    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.78050327E-02  seconds
          22 ---------------------   9.16666687E-02
          22          12          12           1   4.57354039E-02
          22          15          12          24   34.0000343    
          22  0.236942634       4.70320579E+10   1008.03864    
 SMAX          15          12          24   34.0000343    
 SMIN           1           1           1   0.00000000    
 TMAX          13          12          12   10.0000134    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.86189938E-02  seconds
          23 ---------------------   9.58333388E-02
          23          12          12           1   4.53583971E-02
          23           9          21          25   34.0000343    
          23  0.233343735       4.70221005E+10   1008.04187    
 SMAX           9          21          25   34.0000343    
 SMIN           1           1           1   0.00000000    
 TMAX          13          12          12   10.0000134    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.90369415E-02  seconds
          24 ---------------------  0.100000009    
          24          12          12           1   4.47402783E-02
          24           9          21          25   34.0000343    
          24  0.228179708       4.70123520E+10   1008.04254    
 SMAX           9          21          25   34.0000343    
 SMIN           1           1           1   0.00000000    
 TMAX          13          12          12   10.0000134    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.85088444E-02  seconds
          25 ---------------------  0.104166672    
          25          12          12           1   4.40469533E-02
          25          10          43          25   34.0000381    
          25  0.221592352       4.70027510E+10   1008.04291    
 SMAX          10          43          25   34.0000381    
 SMIN           1           1           1   0.00000000    
 TMAX           8          21          11   10.0000134    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.97040367E-02  seconds
          26 ---------------------  0.108333342    
          26          12          12           1   4.31328751E-02
          26          15          12          24   34.0000343    
          26  0.213667512       4.69933998E+10   1008.04132    
 SMAX          15          12          24   34.0000343    
 SMIN           1           1           1   0.00000000    
 TMAX           8          21          11   10.0000143    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.92939568E-02  seconds
          27 ---------------------  0.112500004    
          27          12          12           1   4.21520174E-02
          27          15          12          24   34.0000343    
          27  0.204562634       4.69842616E+10   1008.03668    
 SMAX          15          12          24   34.0000343    
 SMIN           1           1           1   0.00000000    
 TMAX           8          21          11   10.0000153    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.83431435E-02  seconds
          28 ---------------------  0.116666675    
          28          12          12          13   4.10771929E-02
          28          15          12          24   34.0000381    
          28  0.194378734       4.69753856E+10   1008.03955    
 SMAX          15          12          24   34.0000381    
 SMIN           1           1           1   0.00000000    
 TMAX           8          21          11   10.0000162    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.83579254E-02  seconds
          29 ---------------------  0.120833337    
          29          12          12          13   3.99699323E-02
          29          30          28          26   34.0000420    
          29  0.183284208       4.69668372E+10   1008.03735    
 SMAX          30          28          26   34.0000420    
 SMIN           1           1           1   0.00000000    
 TMAX           8          21          11   10.0000172    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.83607864E-02  seconds
          30 ---------------------  0.125000000    
          30          12          12          13   3.86661105E-02
          30          10          43          25   34.0000381    
          30  0.171390384       4.69585551E+10   1008.03461    
 SMAX          10          43          25   34.0000381    
 SMIN           1           1           1   0.00000000    
 TMAX           8          21          11   10.0000181    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.82461071E-02  seconds
          31 ---------------------  0.129166678    
          31          12          12          13   3.73204723E-02
          31          10          43          25   34.0000381    
          31  0.158936977       4.69506949E+10   1008.03705    
 SMAX          10          43          25   34.0000381    
 SMIN           1           1           1   0.00000000    
 TMAX          13          45           4   10.0000181    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.77201557E-02  seconds
          32 ---------------------  0.133333340    
          32          12          12          13   3.57897542E-02
          32          10          43          25   34.0000381    
          32  0.146029204       4.69431747E+10   1008.03394    
 SMAX          10          43          25   34.0000381    
 SMIN           1           1           1   0.00000000    
 TMAX          13          45           4   10.0000181    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.78119469E-02  seconds
          33 ---------------------  0.137500003    
          33          12          12          13   3.42218876E-02
          33          10          43          25   34.0000381    
          33  0.132860512       4.69360517E+10   1008.03351    
 SMAX          10          43          25   34.0000381    
 SMIN           1           1           1   0.00000000    
 TMAX          13          45           4   10.0000191    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.82627964E-02  seconds
          34 ---------------------  0.141666681    
          34          12          12          13   3.24843638E-02
          34          27          35          25   34.0000420    
          34  0.119555764       4.69293220E+10   1008.03058    
 SMAX          27          35          25   34.0000420    
 SMIN           1           1           1   0.00000000    
 TMAX          13          45           4   10.0000191    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.78372192E-02  seconds
          35 ---------------------  0.145833343    
          35          12          12          13   3.07183489E-02
          35          27          35          25   34.0000420    
          35  0.106304795       4.69230838E+10   1008.02795    
 SMAX          27          35          25   34.0000420    
 SMIN           1           1           1   0.00000000    
 TMAX          28          20          12   10.0000191    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.86220932E-02  seconds
          36 ---------------------  0.150000006    
          36          12          12          13   2.87939087E-02
          36          27          35          25   34.0000458    
          36   9.32381526E-02   4.69172675E+10   1008.02649    
 SMAX          27          35          25   34.0000458    
 SMIN           1           1           1   0.00000000    
 TMAX          28          20          12   10.0000200    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.86280537E-02  seconds
          37 ---------------------  0.154166669    
          37          12          12          13   2.68524233E-02
          37          27          35          25   34.0000458    
          37   8.05377811E-02   4.69119099E+10   1008.02673    
 SMAX          27          35          25   34.0000458    
 SMIN           1           1           1   0.00000000    
 TMAX          28          20          12   10.0000210    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.76638889E-02  seconds
          38 ---------------------  0.158333346    
          38          12          12          13   2.47660950E-02
          38          27          35          25   34.0000420    
          38   6.83282390E-02   4.69070684E+10   1008.02472    
 SMAX          27          35          25   34.0000420    
 SMIN           1           1           1   0.00000000    
 TMAX          28          20          12   10.0000219    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.83190632E-02  seconds
          39 ---------------------  0.162500009    
          39          12          12          13   2.26727948E-02
          39          27          35          25   34.0000420    
          39   5.67778498E-02   4.69026816E+10   1008.02032    
 SMAX          27          35          25   34.0000420    
 SMIN           1           1           1   0.00000000    
 TMAX          28          20          12   10.0000229    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.92069340E-02  seconds
          40 ---------------------  0.166666672    
          40          24          17          22   2.05213577E-02
          40          27          35          25   34.0000420    
          40   4.60010953E-02   4.68988600E+10   1008.01978    
 SMAX          27          35          25   34.0000420    
 SMIN           1           1           1   0.00000000    
 TMAX          10          54           4   10.0000210    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.78000259E-02  seconds
          41 ---------------------  0.170833349    
          41          24          17          22   2.06546299E-02
          41          10          19          24   34.0000420    
          41   3.61448526E-02   4.68955505E+10   1008.02002    
 SMAX          10          19          24   34.0000420    
 SMIN           1           1           1   0.00000000    
 TMAX          10          54           4   10.0000210    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.82809162E-02  seconds
          42 ---------------------  0.175000012    
          42          24          17          22   2.09066179E-02
          42          30          28          26   34.0000458    
          42   2.73081288E-02   4.68927365E+10   1008.01709    
 SMAX          30          28          26   34.0000458    
 SMIN           1           1           1   0.00000000    
 TMAX          10          54           4   10.0000210    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.83417130E-02  seconds
          43 ---------------------  0.179166675    
          43          24          17          22   2.09936649E-02
          43          30          28          26   34.0000496    
          43   1.96126141E-02   4.68905411E+10   1008.01660    
 SMAX          30          28          26   34.0000496    
 SMIN           1           1           1   0.00000000    
 TMAX          10          54           4   10.0000219    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.91909599E-02  seconds
          44 ---------------------  0.183333337    
          44          24          17          22   2.11983416E-02
          44          30          28          26   34.0000496    
          44   1.31373117E-02   4.68888740E+10   1008.01416    
 SMAX          30          28          26   34.0000496    
 SMIN           1           1           1   0.00000000    
 TMAX           7          43           3   10.0000210    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.88330936E-02  seconds
          45 ---------------------  0.187500015    
          45          24          17          22   2.12380588E-02
          45          11          25          21   34.0000458    
          45   7.97396153E-03   4.68877148E+10   1008.01416    
 SMAX          11          25          21   34.0000458    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000229    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.89158249E-02  seconds
          46 ---------------------  0.191666678    
          46          24          17          22   2.13960893E-02
          46          11          25          21   34.0000458    
          46   4.17688722E-03   4.68871782E+10   1008.01135    
 SMAX          11          25          21   34.0000458    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000248    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.83469582E-02  seconds
          47 ---------------------  0.195833340    
          47          24          17          22   2.13833209E-02
          47          11          25          21   34.0000458    
          47   1.80550304E-03   4.68871700E+10   1008.00574    
 SMAX          11          25          21   34.0000458    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000267    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.81395340E-02  seconds
          48 ---------------------  0.200000018    
          48          24          17          22   2.14829799E-02
          48          11          25          21   34.0000420    
          48   8.88677139E-04   4.68877599E+10   1008.00623    
 SMAX          11          25          21   34.0000420    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000286    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.87713432E-02  seconds
          49 ---------------------  0.204166681    
          49          24          17          22   2.14138553E-02
          49          11          25          21   34.0000420    
          49   1.44270831E-03   4.68889149E+10   1008.00281    
 SMAX          11          25          21   34.0000420    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000305    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.87088776E-02  seconds
          50 ---------------------  0.208333343    
          50          24          17          22   2.14859210E-02
          50          11          25          21   34.0000420    
          50   3.48400814E-03   4.68905984E+10   1008.00110    
 SMAX          11          25          21   34.0000420    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000324    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.84337425E-02  seconds
          51 ---------------------  0.212500006    
          51          24          17          22   2.14340370E-02
          51          11          25          21   34.0000420    
          51   6.99316245E-03   4.68928758E+10   1007.99799    
 SMAX          11          25          21   34.0000420    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000343    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.82477760E-02  seconds
          52 ---------------------  0.216666684    
          52          24          17          22   2.15463694E-02
          52          11          25          21   34.0000458    
          52   1.19463429E-02   4.68956979E+10   1007.99542    
 SMAX          11          25          21   34.0000458    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000362    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.73508453E-02  seconds
          53 ---------------------  0.220833346    
          53          24          17          22   2.15258729E-02
          53          11          25          21   34.0000496    
          53   1.82922948E-02   4.68990894E+10   1007.99432    
 SMAX          11          25          21   34.0000496    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000381    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.77227783E-02  seconds
          54 ---------------------  0.225000009    
          54          24          17          22   2.16426980E-02
          54          11          25          21   34.0000496    
          54   2.59818155E-02   4.69029888E+10   1007.99738    
 SMAX          11          25          21   34.0000496    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000401    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.85143280E-02  seconds
          55 ---------------------  0.229166672    
          55          24          17          22   2.16116291E-02
          55          11          25          21   34.0000458    
          55   3.49298380E-02   4.69074780E+10   1007.99451    
 SMAX          11          25          21   34.0000458    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000420    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.89320374E-02  seconds
          56 ---------------------  0.233333349    
          56          24          17          22   2.17028446E-02
          56          11          25          21   34.0000458    
          56   4.50650454E-02   4.69124096E+10   1007.99414    
 SMAX          11          25          21   34.0000458    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000439    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.95309448E-02  seconds
          57 ---------------------  0.237500012    
          57          24          17          22   2.16388106E-02
          57          11          25          21   34.0000458    
          57   5.62721007E-02   4.69178900E+10   1007.99652    
 SMAX          11          25          21   34.0000458    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000448    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.71667862E-02  seconds
          58 ---------------------  0.241666675    
          58           8          13          11   2.31314879E-02
          58          11          25          21   34.0000458    
          58   6.84599578E-02   4.69239071E+10   1007.99225    
 SMAX          11          25          21   34.0000458    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000458    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.97026062E-02  seconds
          59 ---------------------  0.245833352    
          59           8          13          11   2.49411017E-02
          59          11          25          21   34.0000458    
          59   8.14873949E-02   4.69303419E+10   1007.99335    
 SMAX          11          25          21   34.0000458    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000467    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.66608620E-02  seconds
          60 ---------------------  0.250000000    
          60           8          13          11   2.67280936E-02
          60          10          19          24   34.0000458    
          60   9.52480733E-02   4.69373215E+10   1007.99091    
 UT AV SECTIO-1           9           0
 UT AV SECTIO-2           7           0
 UT AV SECTIO-3          12           0
 UT AV SECTIO-4           8           0
 SMAX          10          19          24   34.0000458    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000477    
 TMIN           1           1           1   0.00000000    
 This timestep:  0.131924629      seconds
          61 ---------------------  0.254166692    
          61           8          13          12   2.84177158E-02
          61          31          30          26   34.0000496    
          61  0.109578595       4.69446779E+10   1007.99097    
 SMAX          31          30          26   34.0000496    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000477    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.79788399E-02  seconds
          62 ---------------------  0.258333355    
          62           8          13          12   3.00934780E-02
          62          31          30          26   34.0000534    
          62  0.124365032       4.69525176E+10   1007.98895    
 SMAX          31          30          26   34.0000534    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000477    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.78772736E-02  seconds
          63 ---------------------  0.262500018    
          63           8          13          12   3.16575058E-02
          63          31          30          26   34.0000572    
          63  0.139425933       4.69607219E+10   1007.98712    
 SMAX          31          30          26   34.0000572    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000477    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.80646706E-02  seconds
          64 ---------------------  0.266666681    
          64           8          13          12   3.31821442E-02
          64          31          30          26   34.0000534    
          64  0.154641524       4.69693686E+10   1007.98474    
 SMAX          31          30          26   34.0000534    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000467    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.74710083E-02  seconds
          65 ---------------------  0.270833343    
          65           8          13          12   3.45897004E-02
          65          11          25          21   34.0000496    
          65  0.169823602       4.69783511E+10   1007.98547    
 SMAX          11          25          21   34.0000496    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000458    
 TMIN           1           1           1   0.00000000    
 This timestep:   9.06901360E-02  seconds
          66 ---------------------  0.275000006    
          66           8          13          12   3.59511487E-02
          66          11          25          21   34.0000496    
          66  0.184852079       4.69877105E+10   1007.98206    
 SMAX          11          25          21   34.0000496    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000448    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.85920525E-02  seconds
          67 ---------------------  0.279166669    
          67           8          13          12   3.71807665E-02
          67          11          25          21   34.0000458    
          67  0.199538723       4.69973852E+10   1007.98096    
 SMAX          11          25          21   34.0000458    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000439    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.82630348E-02  seconds
          68 ---------------------  0.283333361    
          68           8          13          12   3.83550674E-02
          68          11          25          21   34.0000458    
          68  0.213770166       4.70073713E+10   1007.98114    
 SMAX          11          25          21   34.0000458    
 SMIN           1           1           1   0.00000000    
 TMAX          12          27          13   10.0000429    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.78553391E-02  seconds
          69 ---------------------  0.287500024    
          69           8          13          12   3.93978953E-02
          69          15          21          25   34.0000496    
          69  0.227361456       4.70175990E+10   1007.97968    
 SMAX          15          21          25   34.0000496    
 SMIN           1           1           1   0.00000000    
 TMAX          14          21          12   10.0000429    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.85910988E-02  seconds
          70 ---------------------  0.291666687    
          70           8          13          12   4.03805822E-02
          70          15          21          25   34.0000496    
          70  0.240214720       4.70281134E+10   1007.97906    
 SMAX          15          21          25   34.0000496    
 SMIN           1           1           1   0.00000000    
 TMAX          14          21          12   10.0000439    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.81471634E-02  seconds
          71 ---------------------  0.295833349    
          71           8          13          12   4.12214734E-02
          71          31          30          26   34.0000534    
          71  0.252156407       4.70388572E+10   1007.97980    
 SMAX          31          30          26   34.0000534    
 SMIN           1           1           1   0.00000000    
 TMAX          14          21          12   10.0000448    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.97059441E-02  seconds
          72 ---------------------  0.300000012    
          72           8          13          12   4.19968814E-02
          72          15          21          25   34.0000496    
          72  0.263107389       4.70497812E+10   1007.98242    
 SMAX          15          21          25   34.0000496    
 SMIN           1           1           1   0.00000000    
 TMAX          14          21          12   10.0000458    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.87980461E-02  seconds
          73 ---------------------  0.304166675    
          73           8          13          12   4.26297039E-02
          73          15          21          25   34.0000496    
          73  0.272910714       4.70608650E+10   1007.97839    
 SMAX          15          21          25   34.0000496    
 SMIN           1           1           1   0.00000000    
 TMAX          14          21          12   10.0000458    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.80289078E-02  seconds
          74 ---------------------  0.308333337    
          74           8          13          12   4.31935862E-02
          74          28          22          24   34.0000496    
          74  0.281510502       4.70721126E+10   1007.97754    
 SMAX          28          22          24   34.0000496    
 SMIN           1           1           1   0.00000000    
 TMAX          14          21          12   10.0000458    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.85481834E-02  seconds
          75 ---------------------  0.312500030    
          75           8          13          12   4.36100215E-02
          75          28          22          24   34.0000534    
          75  0.288773417       4.70834749E+10   1007.97577    
 SMAX          28          22          24   34.0000534    
 SMIN           1           1           1   0.00000000    
 TMAX          14          21          12   10.0000458    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.81772041E-02  seconds
          76 ---------------------  0.316666692    
          76           8          13          12   4.39559221E-02
          76          28          22          24   34.0000534    
          76  0.294669569       4.70948864E+10   1007.97906    
 SMAX          28          22          24   34.0000534    
 SMIN           1           1           1   0.00000000    
 TMAX          14          21          12   10.0000458    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.79759789E-02  seconds
          77 ---------------------  0.320833355    
          77           8          13          12   4.41539958E-02
          77          30          27          21   34.0000496    
          77  0.299093068       4.71063470E+10   1007.97827    
 SMAX          30          27          21   34.0000496    
 SMIN           1           1           1   0.00000000    
 TMAX          14          21          12   10.0000458    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.91556740E-02  seconds
          78 ---------------------  0.325000018    
          78           8          13          12   4.42779399E-02
          78          30          27          21   34.0000534    
          78  0.302041411       4.71178854E+10   1007.97986    
 SMAX          30          27          21   34.0000534    
 SMIN           1           1           1   0.00000000    
 TMAX          14          21          12   10.0000458    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.60867500E-02  seconds
          79 ---------------------  0.329166681    
          79           8          13          12   4.42531146E-02
          79          30          27          21   34.0000572    
          79  0.303440303       4.71293870E+10   1007.97809    
 SMAX          30          27          21   34.0000572    
 SMIN           1           1           1   0.00000000    
 TMAX          14          21          12   10.0000458    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.83817673E-02  seconds
          80 ---------------------  0.333333343    
          80           8          13          12   4.41516899E-02
          80          30          27          21   34.0000572    
          80  0.303319871       4.71408312E+10   1007.97736    
 SMAX          30          27          21   34.0000572    
 SMIN           1           1           1   0.00000000    
 TMAX          14          21          12   10.0000458    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.79650116E-02  seconds
          81 ---------------------  0.337500006    
          81           8          13          12   4.39047627E-02
          81          30          27          21   34.0000572    
          81  0.301633835       4.71522836E+10   1007.97913    
 SMAX          30          27          21   34.0000572    
 SMIN           1           1           1   0.00000000    
 TMAX          14          21          12   10.0000458    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.77408981E-02  seconds
          82 ---------------------  0.341666698    
          82           8          13          12   4.35838737E-02
          82          30          27          21   34.0000572    
          82  0.298446804       4.71635804E+10   1007.98022    
 SMAX          30          27          21   34.0000572    
 SMIN           1           1           1   0.00000000    
 TMAX          14          21          12   10.0000458    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.80990028E-02  seconds
          83 ---------------------  0.345833361    
          83           8          13          12   4.31169383E-02
          83          30          27          21   34.0000572    
          83  0.293744117       4.71748035E+10   1007.97736    
 SMAX          30          27          21   34.0000572    
 SMIN           1           1           1   0.00000000    
 TMAX          14          21          12   10.0000458    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.83169174E-02  seconds
          84 ---------------------  0.350000024    
          84           8          13          12   4.25753482E-02
          84          30          27          21   34.0000534    
          84  0.287617922       4.71858627E+10   1007.97900    
 SMAX          30          27          21   34.0000534    
 SMIN           1           1           1   0.00000000    
 TMAX          14          21          12   10.0000458    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.76998901E-02  seconds
          85 ---------------------  0.354166687    
          85           8          13          12   4.18894365E-02
          85          30          27          21   34.0000534    
          85  0.280087918       4.71967212E+10   1007.97925    
 SMAX          30          27          21   34.0000534    
 SMIN           1           1           1   0.00000000    
 TMAX          19          47           4   10.0000458    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.89978409E-02  seconds
          86 ---------------------  0.358333349    
          86           8          13          12   4.11364138E-02
          86          30          27          21   34.0000534    
          86  0.271273315       4.72073626E+10   1007.98181    
 SMAX          30          27          21   34.0000534    
 SMIN           1           1           1   0.00000000    
 TMAX          19          47           4   10.0000467    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.78829956E-02  seconds
          87 ---------------------  0.362500012    
          87           8          13          12   4.02432084E-02
          87          21          20          26   34.0000534    
          87  0.261221260       4.72178074E+10   1007.98273    
 SMAX          21          20          26   34.0000534    
 SMIN           1           1           1   0.00000000    
 TMAX          18          46           4   10.0000467    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.78052711E-02  seconds
          88 ---------------------  0.366666675    
          88           8          13          12   3.92832644E-02
          88          30          27          21   34.0000534    
          88  0.250076592       4.72279736E+10   1007.98627    
 SMAX          30          27          21   34.0000534    
 SMIN           1           1           1   0.00000000    
 TMAX          19          47           4   10.0000467    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.96477699E-02  seconds
          89 ---------------------  0.370833367    
          89           8          13          12   3.81908193E-02
          89          30          27          21   34.0000534    
          89  0.237912044       4.72379105E+10   1007.98535    
 SMAX          30          27          21   34.0000534    
 SMIN           1           1           1   0.00000000    
 TMAX          19          47           4   10.0000467    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.88433456E-02  seconds
          90 ---------------------  0.375000030    
          90           8          13          12   3.70371826E-02
          90          30          27          21   34.0000534    
          90  0.224892423       4.72474419E+10   1007.99103    
 SMAX          30          27          21   34.0000534    
 SMIN           1           1           1   0.00000000    
 TMAX          19          47           4   10.0000477    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.79945755E-02  seconds
          91 ---------------------  0.379166692    
          91           8          13          12   3.57540138E-02
          91          30          27          21   34.0000534    
          91  0.211110756       4.72567112E+10   1007.98505    
 SMAX          30          27          21   34.0000534    
 SMIN           1           1           1   0.00000000    
 TMAX          19          47           4   10.0000496    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.99515152E-02  seconds
          92 ---------------------  0.383333355    
          92           8          13          12   3.44149135E-02
          92          21          20          26   34.0000534    
          92  0.196745962       4.72655913E+10   1007.98529    
 SMAX          21          20          26   34.0000534    
 SMIN           1           1           1   0.00000000    
 TMAX          19          47           4   10.0000486    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.87727737E-02  seconds
          93 ---------------------  0.387500018    
          93           8          13          12   3.29560786E-02
          93          21          20          26   34.0000534    
          93  0.181909576       4.72741110E+10   1007.98700    
 SMAX          21          20          26   34.0000534    
 SMIN           1           1           1   0.00000000    
 TMAX          10          54           3   10.0000486    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.80184174E-02  seconds
          94 ---------------------  0.391666681    
          94           8          13          12   3.14476900E-02
          94          21          20          26   34.0000534    
          94  0.166785374       4.72821965E+10   1007.98633    
 SMAX          21          20          26   34.0000534    
 SMIN           1           1           1   0.00000000    
 TMAX          19          47           4   10.0000496    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.80661011E-02  seconds
          95 ---------------------  0.395833343    
          95           8          13          12   2.98283473E-02
          95          29          33          19   34.0000534    
          95  0.151498020       4.72898642E+10   1007.99042    
 SMAX          29          33          19   34.0000534    
 SMIN           1           1           1   0.00000000    
 TMAX          19          47           4   10.0000505    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.84361267E-02  seconds
          96 ---------------------  0.400000036    
          96           8          13          12   2.81667095E-02
          96          29          33          19   34.0000572    
          96  0.136231035       4.72970691E+10   1007.99023    
 SMAX          29          33          19   34.0000572    
 SMIN           1           1           1   0.00000000    
 TMAX          19          47           4   10.0000525    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.82835388E-02  seconds
          97 ---------------------  0.404166698    
          97          29          22           1   2.65580229E-02
          97          29          33          19   34.0000610    
          97  0.121114366       4.73038397E+10   1007.99646    
 SMAX          29          33          19   34.0000610    
 SMIN           1           1           1   0.00000000    
 TMAX          19          47           4   10.0000525    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.85305405E-02  seconds
          98 ---------------------  0.408333361    
          98          29          22           1   2.51515489E-02
          98          29          33          19   34.0000534    
          98  0.106328435       4.73101312E+10   1007.99701    
 SMAX          29          33          19   34.0000534    
 SMIN           1           1           1   0.00000000    
 TMAX          19          47           4   10.0000525    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.84914398E-02  seconds
          99 ---------------------  0.412500024    
          99          29          22           1   2.37711463E-02
          99          30          27          21   34.0000534    
          99   9.20005664E-02   4.73159188E+10   1007.99847    
 SMAX          30          27          21   34.0000534    
 SMIN           1           1           1   0.00000000    
 TMAX          19          47           4   10.0000544    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.76340866E-02  seconds
         100 ---------------------  0.416666687    
         100          29          22           1   2.22505108E-02
         100           9          46          22   34.0000572    
         100   7.82990605E-02   4.73211740E+10   1007.99890    
 SMAX           9          46          22   34.0000572    
 SMIN           1           1           1   0.00000000    
 TMAX          19          47           4   10.0000553    
 TMIN           1           1           1   0.00000000    
 This timestep:   8.80937576E-02  seconds
 CPU TIME (SECONDS) SINCE BEGINNING =    8.88134193    
ian@ian-HP-Stream-Laptop-11-y0XX:~/bergenoceanforecast$ cat *.f90
SUBROUTINE ADD1(MAXNODES,MAXEL,NUMNODES,NUMEL,NODES,ELEMENTS,IM,JM,I,J,H,CELLS)
IMPLICIT NONE
INTEGER MAXNODES,MAXEL,NUMNODES,NUMEL,IM,JM,I,J
INTEGER CELLS(0:IM+1,0:JM+1,4)
INTEGER ELEMENTS(MAXEL,4)
REAL NODES(4,MAXNODES),H(IM,JM)
!
INTEGER INDEX
!
  NUMEL = NUMEL + 1
!
  INDEX = MAX(CELLS(I-1,J-1,3),CELLS(I,J-1,4),CELLS(I-1,J,2))
  IF (INDEX.GT.0) THEN
    ELEMENTS(NUMEL,1) = INDEX
    CELLS(I,J,1) = INDEX
    NODES(3,INDEX) = NODES(3,INDEX) + H(I,J)
    NODES(4,INDEX) = NODES(4,INDEX) + 1.
  ELSE
    NUMNODES = NUMNODES + 1
    NODES(1,NUMNODES) = I-1
    NODES(2,NUMNODES) = J-1
    NODES(3,NUMNODES) = H(I,J)
    NODES(4,NUMNODES) = 1.
    CELLS(I,J,1) = NUMNODES
    ELEMENTS(NUMEL,1) = NUMNODES
  ENDIF
!
  INDEX = MAX(CELLS(I,J-1,3),CELLS(I+1,J-1,4),CELLS(I+1,J,1))
  IF (INDEX.GT.0) THEN
    ELEMENTS(NUMEL,2) = INDEX
    CELLS(I,J,2) = INDEX
    NODES(3,INDEX) = NODES(3,INDEX) + H(I,J)
    NODES(4,INDEX) = NODES(4,INDEX) + 1.
  ELSE
    NUMNODES = NUMNODES + 1
    NODES(1,NUMNODES) = I
    NODES(2,NUMNODES) = J-1
    NODES(3,NUMNODES) = H(I,J)
    NODES(4,NUMNODES) = 1.
    CELLS(I,J,2) = NUMNODES
    ELEMENTS(NUMEL,2) = NUMNODES
  ENDIF
!
  INDEX = MAX(CELLS(I+1,J,4),CELLS(I+1,J+1,1),CELLS(I,J+1,2))
  IF (INDEX.GT.0) THEN
    ELEMENTS(NUMEL,3) = INDEX
    CELLS(I,J,3) = INDEX
    NODES(3,INDEX) = NODES(3,INDEX) + H(I,J)
    NODES(4,INDEX) = NODES(4,INDEX) + 1.
  ELSE
    NUMNODES = NUMNODES + 1
    NODES(1,NUMNODES) = I
    NODES(2,NUMNODES) = J
    NODES(3,NUMNODES) = H(I,J)
    NODES(4,NUMNODES) = 1.
    CELLS(I,J,3) = NUMNODES
    ELEMENTS(NUMEL,3) = NUMNODES
  ENDIF
!
  INDEX = MAX(CELLS(I-1,J,3),CELLS(I-1,J+1,2),CELLS(I,J+1,1))
  IF (INDEX.GT.0) THEN
    ELEMENTS(NUMEL,4) = INDEX
    CELLS(I,J,4) = INDEX
    NODES(3,INDEX) = NODES(3,INDEX) + H(I,J)
    NODES(4,INDEX) = NODES(4,INDEX) + 1.
  ELSE
    NUMNODES = NUMNODES + 1
    NODES(1,NUMNODES) = I-1
    NODES(2,NUMNODES) = J
    NODES(3,NUMNODES) = H(I,J)
    NODES(4,NUMNODES) = 1.
    CELLS(I,J,4) = NUMNODES
    ELEMENTS(NUMEL,4) = NUMNODES
  ENDIF
RETURN
END

SUBROUTINE ADDETA(MAXNODES,MAXEL,NUMNODES,NUMEL,NODES,ELEMENTS,IM,JM,I,J,H, &
   &   SPEED1,U1,V1,SPEED2,U2,V2,CELLS)
IMPLICIT NONE
INTEGER MAXNODES,MAXEL,NUMNODES,NUMEL,IM,JM,I,J
INTEGER CELLS(0:IM+1,0:JM+1,4)
INTEGER ELEMENTS(MAXEL,4)
REAL NODES(10,MAXNODES),H(IM,JM),SPEED1(IM,JM),SPEED2(IM,JM)
REAL U1(IM,JM),V1(IM,JM),U2(IM,JM),V2(IM,JM)
!
INTEGER INDEX
!
  NUMEL = NUMEL + 1
!
  INDEX = MAX(CELLS(I-1,J-1,3),CELLS(I,J-1,4),CELLS(I-1,J,2))
  IF (INDEX.GT.0) THEN
    ELEMENTS(NUMEL,1) = INDEX
    CELLS(I,J,1) = INDEX
    NODES(3,INDEX) = NODES(3,INDEX) + H(I,J)
    NODES(4,INDEX) = NODES(4,INDEX) + SPEED1(I,J)
    NODES(5,INDEX) = NODES(5,INDEX) + U1(I,J)
    NODES(6,INDEX) = NODES(6,INDEX) + V1(I,J)
    NODES(7,INDEX) = NODES(7,INDEX) + SPEED2(I,J)
    NODES(8,INDEX) = NODES(8,INDEX) + U2(I,J)
    NODES(9,INDEX) = NODES(9,INDEX) + V2(I,J)
    NODES(10,INDEX) = NODES(10,INDEX) + 1.
  ELSE
    NUMNODES = NUMNODES + 1
    NODES(1,NUMNODES) = I-1
    NODES(2,NUMNODES) = J-1
    NODES(3,NUMNODES) = H(I,J)
    NODES(4,NUMNODES) = SPEED1(I,J)
    NODES(5,NUMNODES) = U1(I,J)
    NODES(6,NUMNODES) = V1(I,J)
    NODES(7,NUMNODES) = SPEED2(I,J)
    NODES(8,NUMNODES) = U2(I,J)
    NODES(9,NUMNODES) = V2(I,J)
    NODES(10,NUMNODES) = 1.
    CELLS(I,J,1) = NUMNODES
    ELEMENTS(NUMEL,1) = NUMNODES
  ENDIF
!
  INDEX = MAX(CELLS(I,J-1,3),CELLS(I+1,J-1,4),CELLS(I+1,J,1))
  IF (INDEX.GT.0) THEN
    ELEMENTS(NUMEL,2) = INDEX
    CELLS(I,J,2) = INDEX
    NODES(3,INDEX) = NODES(3,INDEX) + H(I,J)
    NODES(4,INDEX) = NODES(4,INDEX) + SPEED1(I,J)
    NODES(5,INDEX) = NODES(5,INDEX) + U1(I,J)
    NODES(6,INDEX) = NODES(6,INDEX) + V1(I,J)
    NODES(7,INDEX) = NODES(7,INDEX) + SPEED2(I,J)
    NODES(8,INDEX) = NODES(8,INDEX) + U2(I,J)
    NODES(9,INDEX) = NODES(9,INDEX) + V2(I,J)
    NODES(10,INDEX) = NODES(10,INDEX) + 1.
  ELSE
    NUMNODES = NUMNODES + 1
    NODES(1,NUMNODES) = I
    NODES(2,NUMNODES) = J-1
    NODES(3,NUMNODES) = H(I,J)
    NODES(4,NUMNODES) = SPEED1(I,J)
    NODES(5,NUMNODES) = U1(I,J)
    NODES(6,NUMNODES) = V1(I,J)
    NODES(7,NUMNODES) = SPEED2(I,J)
    NODES(8,NUMNODES) = U2(I,J)
    NODES(9,NUMNODES) = V2(I,J)
    NODES(10,NUMNODES) = 1.
    CELLS(I,J,2) = NUMNODES
    ELEMENTS(NUMEL,2) = NUMNODES
  ENDIF
!
  INDEX = MAX(CELLS(I+1,J,4),CELLS(I+1,J+1,1),CELLS(I,J+1,2))
  IF (INDEX.GT.0) THEN
    ELEMENTS(NUMEL,3) = INDEX
    CELLS(I,J,3) = INDEX
    NODES(3,INDEX) = NODES(3,INDEX) + H(I,J)
    NODES(4,INDEX) = NODES(4,INDEX) + SPEED1(I,J)
    NODES(5,INDEX) = NODES(5,INDEX) + U1(I,J)
    NODES(6,INDEX) = NODES(6,INDEX) + V1(I,J)
    NODES(7,INDEX) = NODES(7,INDEX) + SPEED2(I,J)
    NODES(8,INDEX) = NODES(8,INDEX) + U2(I,J)
    NODES(9,INDEX) = NODES(9,INDEX) + V2(I,J)
    NODES(10,INDEX) = NODES(10,INDEX) + 1.
  ELSE
    NUMNODES = NUMNODES + 1
    NODES(1,NUMNODES) = I
    NODES(2,NUMNODES) = J
    NODES(3,NUMNODES) = H(I,J)
    NODES(4,NUMNODES) = SPEED1(I,J)
    NODES(5,NUMNODES) = U1(I,J)
    NODES(6,NUMNODES) = V1(I,J)
    NODES(7,NUMNODES) = SPEED2(I,J)
    NODES(8,NUMNODES) = U2(I,J)
    NODES(9,NUMNODES) = V2(I,J)
    NODES(10,NUMNODES) = 1.
    CELLS(I,J,3) = NUMNODES
    ELEMENTS(NUMEL,3) = NUMNODES
  ENDIF
!
  INDEX = MAX(CELLS(I-1,J,3),CELLS(I-1,J+1,2),CELLS(I,J+1,1))
  IF (INDEX.GT.0) THEN
    ELEMENTS(NUMEL,4) = INDEX
    CELLS(I,J,4) = INDEX
    NODES(3,INDEX) = NODES(3,INDEX) + H(I,J)
    NODES(4,INDEX) = NODES(4,INDEX) + SPEED1(I,J)
    NODES(5,INDEX) = NODES(5,INDEX) + U1(I,J)
    NODES(6,INDEX) = NODES(6,INDEX) + V1(I,J)
    NODES(7,INDEX) = NODES(7,INDEX) + SPEED2(I,J)
    NODES(8,INDEX) = NODES(8,INDEX) + U2(I,J)
    NODES(9,INDEX) = NODES(9,INDEX) + V2(I,J)
    NODES(10,INDEX) = NODES(10,INDEX) + 1.
  ELSE
    NUMNODES = NUMNODES + 1
    NODES(1,NUMNODES) = I-1
    NODES(2,NUMNODES) = J
    NODES(3,NUMNODES) = H(I,J)
    NODES(4,NUMNODES) = SPEED1(I,J)
    NODES(5,NUMNODES) = U1(I,J)
    NODES(6,NUMNODES) = V1(I,J)
    NODES(7,NUMNODES) = SPEED2(I,J)
    NODES(8,NUMNODES) = U2(I,J)
    NODES(9,NUMNODES) = V2(I,J)
    NODES(10,NUMNODES) = 1.
    CELLS(I,J,4) = NUMNODES
    ELEMENTS(NUMEL,4) = NUMNODES
  ENDIF
RETURN
END

SUBROUTINE ADVECT(FIELDOLD,FIELD,DELFIELD,FAVER,ICODE)
!
!           ADVECT integrates the equation
!
!           d(FIELD*D)/d(T) + d(FIELD*U*D)/d(X) + d(FIELD*V*D)/d(Y) +
!       
!           d(FIELD*W)/d(SIGMA) = d(AH*d(FIELD*D)/d(X))/d(X) +
!                                 d(AH*d(FIELD*D)/d(Y))/d(Y)
!
!           from timestep n to timestep n+1
!           with a superbee limiter TVD scheme.
!
!           d(*) is the differential operator,
!           FIELD is the scalar field to be integrated,
!           D is the dynamic depth,
!           T is time,
!           X and Y are the horisontal coordinates,
!           U is the horisontal velocity in X-direction,
!           V is the horisontal velocity in Y-direction,
!           SIGMA is the vertical coordinate,
!           W is the vertical velocity. 
!           
!           FAVER is the average value of the scalar field which is 
!                 subtracted from FIELD before differences are 
!                 computed to reduce the cancellation errors.
!           ICODE is an integer flag to signal which scalar field
!                 that is advected. ICODE is needed when river-runoff
!                 is included.
!
!***ROUTINES CALLED-NONE
!***END PROLOGUE
!
!   Global variables.
!
USE MOD_BOUND
IMPLICIT NONE
REAL FIELDOLD(IM,JM,KB),FIELD(IM,JM,KB),DELFIELD(IM,JM,KB),FAVER
INTEGER ICODE
!
!   Local variables.
!
REAL, DIMENSION(IM,JM,KB) :: XFLUX,YFLUX,ZFLUX
REAL, DIMENSION(IM,JM,KB) :: XFLUXD,YFLUXD
REAL, DIMENSION(IM,JM,KB) :: DIFF1,DIFF2,FNEW
!
REAL AREA,NETFLUX,VOLUME,VOLUMEP
REAL AREAT,AREATU,AREATV,AREATW
REAL EPSILON,ONESIX
INTEGER I,J,K
REAL FRAC,FLUX,FIELDRIVER
REAL SUM,PROD
!
EPSILON = 1.E-5
ONESIX = 1.D0/6.D0
!
!   Define FIELD(KB) = FIELD(KB-1)
!
FIELD(1:IM,1:JM,KB) = FIELD(1:IM,1:JM,KB-1)
!
  FIELD = FIELD - FAVER
  FIELDOLD = FIELDOLD - FAVER
  DELFIELD = 0.
!
XFLUX = 0.
XFLUXD = 0.
YFLUX = 0.
YFLUXD = 0.
ZFLUX = 0.
!
!   Compute F*U*D in U-points of the
!   Arakawa C-grid.
!
!   Compute the sum of the advective and diffusive
!   fluxes  in X-direction.
!
IF (RIVLOG) THEN
  DO I = 1,NUMC
    IF (ICODE.EQ.1) THEN
!
!  Salinity of river water
!
      FIELDRIVER = SRIVER(I)
    ELSEIF (ICODE.EQ.2) THEN
!
! Temperature of the river water
!
      FIELDRIVER = TRIVER(I)
    ELSE
      WRITE(*,*)'ERROR IN ADVECT'
      STOP
    ENDIF
    FIELDRIVER = FIELDRIVER - FAVER
    DO K = KRIVER1(I),KRIVER2(I)
      FRAC = DZ(K)/DZRIVER(I)
      FLUX = FRAC*FRIVER(I)*FIELDRIVER 
      IF (CODERIVER(I).EQ.1) THEN
        XFLUX(IRIVER(I),JRIVER(I),K) = FLUX
      ELSEIF (CODERIVER(I).EQ.2) THEN
        YFLUX(IRIVER(I),JRIVER(I),K) = FLUX
      ELSEIF (CODERIVER(I).EQ.3) THEN
        XFLUX(IRIVER(I)+1,JRIVER(I),K) = -FLUX
      ELSEIF (CODERIVER(I).EQ.4) THEN
        YFLUX(IRIVER(I),JRIVER(I)+1,K) = -FLUX
      ELSE
        WRITE(*,*)'ERROR IN ADVECT-2'
        STOP
      ENDIF
    END DO
  END DO
ENDIF
! 
!  DIFF1
!
DIFF1 = 0.
!$OMP PARALLEL DO PRIVATE(I,J,K)
DO J = 1,JM
  DO I = 2,IM
    DO K = 1,KB-1
      DIFF1(I,J,K) = (FIELD(I,J,K) -FIELD(I-1,J,K))*DUM(I,J)
    END DO
  END DO
END DO 
!
!  DIFF2
!
DIFF2 = 0.
!$OMP PARALLEL DO PRIVATE(I,J,K)
DO J = 1,JM
  DO I = 1,IM-1
    DO K = 1,KB-1
      SUM = DIFF1(I,J,K)+DIFF1(I+1,J,K)
      PROD = DIFF1(I,J,K)*DIFF1(I+1,J,K)
      IF (ABS(SUM).GT.EPSILON .AND. PROD.GT.EPSILON) THEN
        DIFF2(I,J,K) = 2.0*PROD/SUM
        DIFF2(I,J,K) = DIFF2(I,J,K)*FSM(I,J)
      ENDIF
    END DO
  END DO
END DO
!
!  FNEW
!
FNEW = 0.
!$OMP PARALLEL DO PRIVATE(I,J,K)
DO J = 1,JM
  DO I = 2,IM
    DO K = 1,KB-1
      FNEW(I,J,K) = 0.5*(FIELD(I,J,K)+FIELD(I-1,J,K)) - ONESIX*(DIFF2(I,J,K)-DIFF2(I-1,J,K))
      FNEW(I,J,K) = FNEW(I,J,K)*DUM(I,J)
    END DO
  END DO
END DO
      

!$OMP PARALLEL DO PRIVATE(I,J,K,AREAT,AREATU)
DO J = 2,JM-1
  DO I = 2,IM
    IF (DUM(I,J).NE.0.) THEN
      DO K = 1,KB-1
      AREAT = DY*DUDZ(I,J,K)
      AREATU = AREAT*UADV(I,J,K)
      XFLUXD(I,J,K) = AH(I,J,K)*AREAT*(FIELD(I,J,K)-FIELD(I-1,J,K))/DX
      XFLUX(I,J,K) = AREATU*FNEW(I,J,K)
      XFLUX(I,J,K) = XFLUX(I,J,K) - XFLUXD(I,J,K)
      END DO
    ENDIF
  END DO
END DO
!
!  DIFF1
!
DIFF1 = 0.
!$OMP PARALLEL DO PRIVATE(I,J,K)
DO J = 2,JM
  DO I = 1,IM
    DO K = 1,KB-1
      DIFF1(I,J,K) = (FIELD(I,J,K) -FIELD(I,J-1,K))*DVM(I,J)
    END DO
  END DO
END DO
!
!  DIFF2
!
DIFF2 = 0.
!$OMP PARALLEL DO PRIVATE(I,J,K)
DO J = 1,JM-1
  DO I = 1,IM-1
    DO K = 1,KB-1
      SUM = DIFF1(I,J,K)+DIFF1(I,J+1,K)
      PROD = DIFF1(I,J,K)*DIFF1(I,J+1,K)
      IF (ABS(SUM).GT.EPSILON .AND. PROD.GT.EPSILON) THEN
        DIFF2(I,J,K) = 2.0*PROD/SUM
        DIFF2(I,J,K) = DIFF2(I,J,K)*FSM(I,J)
      ENDIF
    END DO
  END DO
END DO
!
!  FNEW
!
FNEW = 0.
!$OMP PARALLEL DO PRIVATE(I,J,K)
DO J = 2,JM
  DO I = 1,IM
    DO K = 1,KB-1
      FNEW(I,J,K) = 0.5*(FIELD(I,J,K)+FIELD(I,J-1,K)) - ONESIX*(DIFF2(I,J,K)-DIFF2(I,J-1,K))
      FNEW(I,J,K) = FNEW(I,J,K)*DVM(I,J)
    END DO
  END DO
END DO
!
!   Compute the sum of the advective and diffusive
!   fluxes  in Y-direction.
!
!$OMP PARALLEL DO PRIVATE(I,J,K,AREAT,AREATV)
DO J = 2,JM
  DO I = 2,IM-1
    IF (DVM(I,J).NE.0.) THEN
      DO K = 1,KB-1
      AREAT = DX*DVDZ(I,J,K)
      AREATV = AREAT*VADV(I,J,K)
      YFLUXD(I,J,K) = AREAT*AH(I,J,K)*((FIELD(I,J,K)-FIELD(I,J-1,K))/DY)
      YFLUX(I,J,K) = AREATV*FNEW(I,J,K)
      YFLUX(I,J,K) = YFLUX(I,J,K) - YFLUXD(I,J,K)
      END DO
    ENDIF
  END DO
END DO
!
!   Compute the advective fluxes in sigma-direction.
!
!
!  DIFF1
!
DIFF1 = 0.
!$OMP PARALLEL DO PRIVATE(I,J,K)
DO J = 1,JM
  DO I = 1,IM
    DO K = 2,KB
      DIFF1(I,J,K) = (FIELD(I,J,K-1) -FIELD(I,J,K))*FSM(I,J)
    END DO
  END DO
END DO
!
!  DIFF2
!
DIFF2 = 0.
!$OMP PARALLEL DO PRIVATE(I,J,K)
DO J = 1,JM
  DO I = 1,IM-1
    DO K = 1,KB-1
      SUM = DIFF1(I,J,K)+DIFF1(I,J,K+1)
      PROD = DIFF1(I,J,K)*DIFF1(I,J,K+1)
      IF (ABS(SUM).GT.EPSILON .AND. PROD.GT.EPSILON) THEN
        DIFF2(I,J,K) = 2.0*PROD/SUM
        DIFF2(I,J,K) = DIFF2(I,J,K)*FSM(I,J)
      ENDIF
    END DO
  END DO
END DO
!
!  FNEW
!
FNEW = 0.
!$OMP PARALLEL DO PRIVATE(I,J,K)
DO J = 2,JM
  DO I = 1,IM
    DO K = 2,KB-1
      FNEW(I,J,K) = 0.5*(FIELD(I,J,K)+FIELD(I,J,K-1)) - ONESIX*(DIFF2(I,J,K-1)-DIFF2(I,J,K))
      FNEW(I,J,K) = FNEW(I,J,K)*FSM(I,J)
    END DO
  END DO
END DO
AREA = DX*DY
!$OMP PARALLEL DO PRIVATE(I,J,K,AREATW)
DO J = 2,JM-1
  DO I = 2,IM-1
    IF(FSM(I,J).NE.0.) THEN
      DO K = 2,KB
        AREATW = AREA*W(I,J,K)
        ZFLUX(I,J,K) = AREATW*FNEW(I,J,K)
      END DO
    ENDIF
  END DO
END DO
!
!   Take a step to timestep n+1  by adding up the fluxes in and out of each cell.
!
!$OMP PARALLEL DO PRIVATE(I,J,K,NETFLUX,VOLUME,VOLUMEP)
DO J = 2,JM-1
  DO I =2,IM-1
    IF (FSM(I,J).GT.0.0) THEN
      DO K = 1,KB-1
        NETFLUX = (ZFLUX(I,J,K)-ZFLUX(I,J,K+1)) + &
   &            XFLUX(I+1,J,K) - XFLUX(I,J,K) + &
   &            YFLUX(I,J+1,K) - YFLUX(I,J,K)
        VOLUME = DX*DY*DZ(K)*(H(I,J)+ETA(I,J))
        VOLUMEP = DX*DY*DZ(K)*(H(I,J)+ETAP(I,J))
        FIELD(I,J,K) = (FIELDOLD(I,J,K)*VOLUMEP - DT*NETFLUX)/VOLUME
!
      END DO
    ENDIF
  END DO
END DO
!
  DELFIELD = FIELD - FIELDOLD
  FIELD = FIELD + FAVER
  FIELDOLD = FIELDOLD + FAVER
!
RETURN
END
SUBROUTINE ATMOSP
!
!  ATMOSP propagates the solution of the equations
!
!  d(U)/dt = - (1/RHO0)*d(Patm)/dx
!
!  d(V)/dt = - (1/RHO0)*d(Patm)/dy
!
!  where Patm is the atmospheric pressure
!
USE MOD_MAIN
IMPLICIT NONE
REAL XFACT,YFACT
!
XFACT = DT/(DX*RHO0)
YFACT = DT/(DY*RHO0)
DO J = 2,JM
  DO I = 2,IM
    IF (DUM(I,J).GT.0.) THEN
      DO K = 1,KB-1
        U(I,J,K) = U(I,J,K) - XFACT*(PATM(I,J)-PATM(I-1,J))
      END DO
    ENDIF
    IF (DVM(I,J).GT.0.) THEN
      DO K = 1,KB-1
        V(I,J,K) = V(I,J,K) - YFACT*(PATM(I,J)-PATM(I,J-1))
      END DO
    ENDIF
  END DO
END DO
!
!  Estimate a water level that balances the atmospheric pressure.
!
ETABFRS = -(PATM-PMEAN)/(RHO0*GRAV)
!
RETURN
END
SUBROUTINE BOUND2D(ETAF,UAF,VAF)
!
!            BOUND is a modified version of a
!            boundary condition routine written by
!            E. A. Martinsen DNMI .
!
!***PURPOSE BOUND relaxes the solution in the FRS-zone
!           towards a specified FRS-zone solution.
!
!***DESCRIPTION
!
!           BOUND uses the FRS-bondary condition to specify
!           the solution in specified boundary zones.
!
!   ON ENTRY
!
!***ROUTINES CALLED RELAX
!***END PROLOGUE BOUND2D
!
!   Global variables
!
  USE MOD_BOUND
  IMPLICIT NONE
REAL, DIMENSION(IM,JM) :: UAF,VAF,ETAF
!
  INTEGER I,J,K
!
!
     CALL RELAX(ALPHAE,ETAFRS,ETATFRS,ETAF,1,1)
     CALL RELAX(ALPHAE,UAFRS,UATFRS,UAF,2,1)
     CALL RELAX(ALPHAE,VAFRS,VATFRS,VAF,3,1)
!
!  For the river case Neumann conditions may be more appropriate.
!
!     DO J = 13,14
!       ETAF(1,J) = 0.
!       ETAF(2,J) = 0.
!       UAF(1,J) = UAF(3,J)
!       UAF(2,J) = UAF(3,J)
!       VAF(1,J) = 0.
!       VAF(2,J) = 0.
!     END DO
!     DO I = 15,18
!       ETAF(I,1) = 0.
!       ETAF(I,2) = 0.
!       VAF(I,1) = VAF(I,3)
!       VAF(I,2) = VAF(I,3)
!       UAF(I,1) = 0.
!       UAF(I,2) = 0.
!     END DO
!
!
     DO J = 1,JM
        DO I = 1,IM
           ETAF(I,J)=ETAF(I,J)*FSM(I,J)
           UAF(I,J) = UAF(I,J)*DUM(I,J)
           VAF(I,J) = VAF(I,J)*DVM(I,J)
        END DO
     END DO
!
!
!***END BOUND2D
!
RETURN
END SUBROUTINE BOUND2D
SUBROUTINE BOUND(IDX,NDATE)
!
!            BOUND is a modified version of a
!            boundary condition routine written by
!            E. A. Martinsen DNMI .
!
!***PURPOSE BOUND relaxes the solution in the FRS-zone
!           towards a specified FRS-zone solution.
!
!***DESCRIPTION
!
!           BOUND uses the FRS-bondary condition to specify
!           the solution in specified boundary zones.
!
!   ON ENTRY
!
!     IDX    Integer.
!            If IDX = 1 on entry, the water elevation , and the
!               depth averaged velocities UA and VA are
!               updated in the FRS-zone.
!            If IDX = 3 on entry, the 3-D horisontal velocities are
!               updated in the FRS-zone. 
!            If IDX = 4 on entry, the S and T fields are updated.
!            If IDX = 6 on entry, the Q2 and Q2L fields are updated.
!
!***ROUTINES CALLED RELAX
!***END PROLOGUE BOUND
!
!   Global variables
!
  USE MOD_BOUND
  IMPLICIT NONE
  INTEGER IDX,NDATE(5)
!
  INTEGER I,J,K
  REAL SDUM(IM,JM,KB)
!
!
  IF (IDX.EQ.3) THEN
!
!   Update the 3-D horizontal velocities at the boundaries.
!
     CALL RELAX(ALPHA,UFRS,UTFRS,U,2,KB-1)
     CALL RELAX(ALPHA,VFRS,VTFRS,V,3,KB-1)
!
!
!  Neumann on U-normal.
!
!     DO J = 13,14
!     DO K = 1,KB-1
!       U(1,J,K) = U(3,J,K)
!       U(2,J,K) = U(3,J,K)
!       V(1,J,K) = 0.
!       V(2,J,K) = 0.
!     END DO
!     END DO
!     DO I = 15,18
!     DO K = 1,KB-1
!       V(I,1,K) = V(I,3,K)
!       V(I,1,K) = V(I,3,K)
!       U(I,1,K) = 0.
!       U(I,2,K) = 0.
!     END DO
!     END DO
!
!
     DO K = 1,KB-1
        DO J = 1,JM
           DO I = 1,IM
              U(I,J,K)=U(I,J,K)*DUM(I,J)
              V(I,J,K)=V(I,J,K)*DVM(I,J)
           END DO
        END DO
     END DO
!
  ELSEIF (IDX.EQ.4) THEN
     SDUM = 0.
!
!   Update the 3-D horizontal velocities at the boundaries.
!
     CALL RELAX(ALPHA,SFRS,SDUM,S,1,KB-1)
     CALL RELAX(ALPHA,TFRS,SDUM,T,1,KB-1)
!
!   If RIVLOG is .TRUE., you may want to apply the below
!   Neumann-condition for S and T and comment away the above calls to RELAX.
!
!     DO J = 13,14
!     DO K = 1,KB-1
!       S(1,J,K) = S(3,J,K)
!       T(1,J,K) = T(3,J,K)
!       S(2,J,K) = S(3,J,K)
!       T(2,J,K) = T(3,J,K)
!     END DO
!     END DO
!     DO I = 15,18
!     DO K = 1,KB-1
!       S(I,1,K) = S(I,3,K)
!       T(I,1,K) = T(I,3,K)
!       S(I,2,K) = S(I,3,K)
!       T(I,2,K) = T(I,3,K)
!     END DO
!     END DO
!
!
!
     DO K = 1,KB-1
        DO J = 1,JM
           DO I = 1,IM
              S(I,J,K)=S(I,J,K)*FSM(I,J)
              T(I,J,K)=T(I,J,K)*FSM(I,J)
           END DO
        END DO
     END DO
  ELSEIF (IDX.EQ.6) THEN
     SDUM = 0.
!
!   Update Q2 and Q2L at the open boundaries.
!
     CALL RELAX(ALPHA,Q2FRS,SDUM,Q2,1,KB-1)
     CALL RELAX(ALPHA,Q2LFRS,SDUM,Q2L,1,KB-1)
!
     DO K = 1,KB-1
        DO J = 1,JM
           DO I = 1,IM
              Q2(I,J,K)=Q2(I,J,K)*FSM(I,J)
              Q2L(I,J,K)=Q2L(I,J,K)*FSM(I,J)
           END DO
        END DO
     END DO
  ENDIF
!
!***END BOUND
!
RETURN
END SUBROUTINE BOUND
! This routine sets up the logical arrays used to manually do
! gather-scatter optimization; counts the number of sea points, and
! generates array indices to access sea points. now looping over wet
! points can be done without if-statements inside the loop
!
!DO pt=1,numup
!   i=indu(1,pt)
!   j=indu(2,pt)
!
!   blablalba...
!
!END DO
!
! Now we can automatically parallelize the pt loop, and get automatic
! load balancing w.r. floating point ops. without any more tricks.
! The downside is the placement of stuff in memory. 
!
! Helge Avlesen <avle@ii.uib.no>

SUBROUTINE condition
  USE state

  numup=0
  numvp=0
  numcp=0
  numcp2=0

  DO j = 2,jm-1  
     DO i = 2,im  
        IF (dum(i,j).NE.0.) THEN
           numup=numup+1
           indu(1,numup)=i
           indu(2,numup)=j           
        END IF
     END DO
  END DO

  DO j = 2,jm  
     DO i = 2,im-1  
        IF (dvm(i,j).NE.0.) THEN
           numvp=numvp+1
           indv(1,numvp)=i
           indv(2,numvp)=j           
        END IF
     END DO
  END DO

  DO j = 2,jm-1  
     DO i = 2,im-1          
        IF (fsm(i,j).NE.0.) THEN
           numcp=numcp+1
           indc(1,numcp)=i
           indc(2,numcp)=j           
        END IF
     END DO
  END DO

! loop ranges for my2halv  
  DO j = 1,jm-1  
     DO i = 1,im-1          
        IF (fsm(i,j).NE.0.) THEN
           numcp2=numcp2+1
           indc2(1,numcp2)=i
           indc2(2,numcp2)=j           
        END IF
     END DO
  END DO


  WRITE(*,*) '____________________________________________________'
  WRITE(*,*) 'Condition.f90:  Horisontal points totally IM*JM:',im*jm
  WRITE(*,*) 'Number of ETA points:',numcp
  WRITE(*,*) 'Number of U points:',  numup
  WRITE(*,*) 'Number of V points:',  numvp    


END SUBROUTINE condition
SUBROUTINE DENS
!***BEGIN PROLOGUE DENS
!***DATE WRITTEN   910723 (YYMMDD)
!***PURPOSE DENS computes the density in all sea cells
!           as a function of S and T.
!
!***DESCRIPTION DENS is a computing the density RHO 
!           as a function of S and T by a formula from
!           WANG, JPO '84, 1191-1199.
!
!   ON EXIT
!
!   RHO    contains the densities - RHOAVER.
!           
!***ROUTINES CALLED-NONE
!***END PROLOGUE DENS
!
!   Global variables.
!
USE STATE
IMPLICIT NONE
!   Local variables.
!
REAL R1,R2,RR3,R4,R5,R6
INTEGER I,J,K
!
DATA R1,R2,RR3,R4,R5,R6/28.152,7.35E-2,4.69E-3,8.02E-1,2.0E-3,35.0/
!
!  THIS FUNCTION COMPUTES DENSITY-1; FROM WANG, JPO '84, 1191-1199.
!
!$omp parallel do firstprivate(R1,R2,RR3,R4,R5,R6)
DO K = 1,KB-1
  DO J = 1,JM
    DO I = 1,IM
      RHO(I,J,K) = R1-R2*T(I,J,K)-RR3*T(I,J,K)*T(I,J,K)+&
     &             (R4-R5*T(I,J,K))*(S(I,J,K)-R6)
!     RHO(I,J,K) = 1000. + RHO(I,J,K)
    END DO
  END DO
END DO
RHO = RHO - RHOAVER
RETURN
END
SUBROUTINE DENSUNESCO
USE STATE
IMPLICIT NONE
INTEGER I,J,K
!
!         THIS SUBROUTINE COMPUTES DENSITY AFTER UNESCOS FORMULA AS GIVEN in GILL
!
!$omp parallel do
DO K=1,KB-1
  DO  J=1,JM
    DO I=1,IM
!
      RHO(I,J,K) = 999.842594 + 6.793952E-2*T(I,J,K)  &
     &        - 9.095290E-3*T(I,J,K)**2 + 1.001685E-4*T(I,J,K)**3  &
     &        - 1.120083E-6*T(I,J,K)**4 + 6.536332E-9*T(I,J,K)**5
!
      RHO(I,J,K) = RHO(I,J,K) + (0.824493 - 4.0899E-3*T(I,J,K) &
     &       + 7.6438E-5*T(I,J,K)**2 - 8.2467E-7*T(I,J,K)**3 &
     &       + 5.3875E-9*T(I,J,K)**4) * S(I,J,K) &
     &       + 4.8314E-4 * S(I,J,K)**2
!
      IF (S(I,J,K).GT.0.) THEN
        RHO(I,J,K) = RHO(I,J,K)  &
     &       + (-5.72466E-3 + 1.0227E-4*T(I,J,K) &
     &       - 1.6546E-6*T(I,J,K)**2) * S(I,J,K)**1.5 
      ENDIF
!
      RHO(I,J,K) = RHO(I,J,K) - 1000.
    END DO
  END DO
END DO
RHO = RHO - RHOAVER
RETURN
END
SUBROUTINE DEPTH(KB,Z,DZ,DZR,DZZ,ZZ,DSBOT)
!***BEGIN PROLOGUE DEPTH
!***DATE WRITTEN   910904 (YYMMDD)
!***REVISION DATE  910904 (YYMMDD)
!***AUTHOR
!            Jarle Berntsen, Institute of Marine Research,
!            Postboks 1870,
!            N-5024 Bergen-Nordnes, Norway
!            Email..  jarle.berntsen@mi.uib.no
!
!***PURPOSE DEPTH computes the array Z,DZ,DZR,DZZ and ZZ
!
!   DSBOT is the sigma-thickness of the bottom and surface layers
!   and must be given by the user if the below formulae by Lynch
!   et al. is to be applied.
!
!
!***END PROLOGUE DEPTH
!
!   Global variables.
!
  IMPLICIT NONE
  INTEGER KB
  REAL Z(KB),DZ(KB),DZR(KB),DZZ(KB),ZZ(KB)
  REAL DSBOT
!
!   Local variables.
!
  INTEGER K
  REAL DELTAEPS,PI,AA,EPS
  LOGICAL :: LYNCH_DISTRIBUTION=.TRUE.

!
!   This part of DEPTH may have to be modified from one
!   implementation to the other.
!
!
!***FIRST EXECUTABLE STATEMENT DEPTH
!
!   Compute Z.
  
  LYNCH_DISTRIBUTION=.FALSE.
  
  IF(LYNCH_DISTRIBUTION)THEN
      
!   Here we are using the algorithm due to Lynch et.al,1995.
!   Convergence Studies of Tidally-Rectified Circulation on Georges Bank.
!   In: Quantitative Skill Assessment for Coastal Ocean Models,
!   Lynch,D.R. and Davies,A.M. (editors), American Geophysical Union.
!
      DELTAEPS = 1.0/(KB-1.)
      PI = 4.*ATAN(1.0)
      AA = (DELTAEPS - DSBOT)/SIN(2.*PI*DELTAEPS)
      DO K = 1,KB
          EPS = (K-1.)/(KB-1.)
          Z(KB + 1 - K) = -1. + EPS - AA*SIN(2*PI*EPS)
      END DO
  ELSE

!
!   When focusing on fjord studies with fresh water runoff it is probably
!   better to have better resolution of the surface layer as suggested below.
!
      DO K = 1,6
          Z(K) = -(K-1)*.005
      END DO
      Z(7) = -0.025 - 0.006
      Z(8) = -0.031 - 0.007
      Z(9) = -0.038 - 0.008
      Z(10) = -0.046 - 0.009
      Z(11) = -0.055 - 0.010
      Z(12) = -0.065 - 0.012
      Z(13) = -0.077 - 0.014
      Z(14) = -0.091 - 0.016
      Z(15) = -0.107 - 0.018
      Z(16) = -0.125 - 0.020
      Z(17) = -0.145 - 0.025
      Z(18) = -0.170 - 0.030
      Z(19) = -0.200 - 0.040
      Z(20) = -0.240 - 0.050
      Z(21) = -0.290 - 0.060
      Z(22) = -0.350 - 0.070
      Z(23) = -0.420 - 0.080
      Z(24) = -0.500 - 0.090
      Z(25) = -0.590 - 0.100
      Z(26) = -0.690 - 0.100
      Z(27) = -0.790 - 0.100
      Z(28) = -0.890 - 0.050
      Z(29) = -0.940 - 0.025
      Z(30) = -0.965 - 0.015
      Z(31) = -0.980 - 0.010
      Z(32) = -0.990 - 0.010
  END IF

!
  DO K = 1,KB
      DZ(K)=0.0
      DZR(K)=0.0
      DZZ(K)=0.0
  END DO
!
!   Compute ZZ.
!
  DO K = 1,KB-1
      ZZ(K)=(Z(K)+Z(K+1))/2.
  END DO
  ZZ(KB) = 0.
!
!    Compute DZ,DZZ and DZR.
!
  DO K = 1,KB-1
      DZ(K)=Z(K)-Z(K+1)
      DZR(K)=1./DZ(K)
      DZZ(K)=ZZ(K)-ZZ(K+1)
  END DO
!
!   Write out the depth parameters.
!
  WRITE(*,70)
70 FORMAT(/2X,'K',7X,'Z',9X,'ZZ',9X,'DZ',9X,'DZZ',/)
  DO K = 1,KB
      WRITE(*,80) K,Z(K),ZZ(K),DZ(K),DZZ(K)
  END DO
80 FORMAT(' ',I5,4F10.3)
!
!***END DEPTH
!
  RETURN
END SUBROUTINE DEPTH
SUBROUTINE DIAGNOSE(INR)
  USE STATE
  IMPLICIT NONE
  INTEGER I,J,K,K2,INR
  REAL VELMAX,SMAX
  PARAMETER (VELMAX=10.0 ,SMAX = 100.0)

  LOGICAL do_continue

  do_continue=.true.

!$omp parallel do
  DO K = 1,KB-1
      DO J = 1,JM
          DO I = 1,IM
              IF (ABS(U(I,J,K)).GT.VELMAX.and. do_continue) THEN
                  WRITE(*,*)'TOO LARGE U******',INR
                  WRITE(*,*)I,J,K,U(I,J,K),DU(I,J),ETA(I,J)
                  WRITE(*,*)'U '
                  DO K2 = 1,KB-1
                      WRITE(*,*)K2,U(I,J,K2),V(I,J,K2)
                  END DO
                  WRITE(*,*)'Mixing Coeef'
                  DO K2 = 1,KB-1
                      WRITE(*,*)K2,AM(I,J,K2),KH(I,J,K2),KM(I,J,K2)
                  END DO
!          STOP
                  do_continue=.false.
              ENDIF
          END DO
      END DO
  END DO

  if( .not. do_continue) then
      stop
  end if

  
!$omp parallel do
  DO K = 1,KB-1
      DO J = 1,JM
          DO I = 1,IM
              IF (ABS(V(I,J,K)).GT.VELMAX .and. do_continue) THEN
                  WRITE(*,*)'TOO LARGE V******',INR
                  WRITE(*,*)I,J,K,V(I,J,K),DV(I,J),ETA(I,J)
                  WRITE(*,*)'U '
                  DO K2 = 1,KB-1
                      WRITE(*,*)K2,U(I,J,K2),V(I,J,K2)
                  END DO
                  WRITE(*,*)'Mixing Coeef'
                  DO K2 = 1,KB-1
                      WRITE(*,*)K2,AM(I,J,K2),KH(I,J,K2),KM(I,J,K2)
                  END DO
!          STOP
                  do_continue=.false.          
              ENDIF
          END DO
      END DO
  END DO
  
  if( .not. do_continue) then
      stop
  end if
  
!
!$omp parallel do
  DO K = 1,KB-1
      DO J = 1,JM
          DO I = 1,IM
              IF (S(I,J,K).GT.SMAX .and. do_continue) THEN
                  WRITE(*,*)'TOO LARGE S******',INR
                  WRITE(*,*)I,J,K,S(I,J,K),D(I,J),ETA(I,J)
                  WRITE(*,*)'U '
                  DO K2 = 1,KB-1
                      WRITE(*,*)K2,S(I,J,K2),U(I,J,K2),V(I,J,K2)
                  END DO
                  WRITE(*,*)'Mixing Coeef'
                  DO K2 = 1,KB-1
                      WRITE(*,*)K2,AM(I,J,K2),KH(I,J,K2),KM(I,J,K2)
                  END DO
!          STOP
                  do_continue=.false.          
              ENDIF
          END DO
      END DO
  END DO

  if( .not. do_continue) then
      stop
  end if
  
!
  RETURN
END SUBROUTINE DIAGNOSE
SUBROUTINE DYPGRIN(DEPMIN,NFILTER,DEPMAX,DSBOT)
!
!  The variables COR, FSM, DUM, DVM are defined.
!  DEPTH is called to set up the vertical distribution of
!  sigma-layers
!  The bottom matrix H is Shapiro-filtered NFILTER times.
!  The maximum depth, DEPMAX, in the model region is computed
!  The bottom friction coefficients CBC are computed.
!
USE STATE
IMPLICIT NONE
REAL DEPMIN,DEPMAX,DSBOT,AREA
INTEGER NFILTER
!
INTEGER I,J,IF
REAL H2(IM,JM)
REAL HAVER1,HAVER2
INTEGER NUM1,NUM2
!
!Read the depth matrix from the file 'bottom1km.dat',
!and place it in H.
! The present bottom matrix is based on a matrix produced by Trygve Sagberg, Geophysics Department,
! University of Bergen
! for studies of the circulation in the fjord system around Osteroy.
!
DO J = 1,JM
   DO I = 1,IM
      READ(10,*)H(I,J)
   END DO
END DO   
!
DO J = 1,JM
  H(IM,J) = 0.
END DO
!
!  Open up some passages.
!
H(15,8) = 0.5*(H(16,8)+H(15,9))
H(15,7) = 0.5*(H(16,7)+H(15,6))
!
H(10,18) = (H(10,19)+H(10,17)+H(9,18))/3.
!
H(9,19) = H(10,19)
H(9,20) = H(10,20)
H(9,21) = H(10,21)
!
!  Compute an average depth interior to the open boundaries.
!
HAVER1 = 0.
NUM1 = 0
DO I = 8,15
  DO J = 10,15
    IF (H(I,J).GT.0.) THEN
      NUM1 = NUM1 + 1
      HAVER1 = HAVER1 + H(I,J)
    ENDIF
  END DO
END DO
!
!  Produce a flat bottom through the in and outflow channels.
!
HAVER1 = HAVER1/NUM1
DO I = 1,9
  DO J = 13,14
    H(I,J) = HAVER1
  END DO
END DO
HAVER2 = 0.
NUM2 = 0
DO I = 12,18
  DO J = 7,10
    IF (H(I,J).GT.0.) THEN
      NUM2 = NUM2 + 1
      HAVER2 = HAVER2 + H(I,J)
    ENDIF
  END DO
END DO
HAVER2 = HAVER2/NUM2
DO I = 15,18
  DO J = 1,9
    H(I,J) = HAVER2
  END DO
END DO

!
!  Shapiro filter H NFILTER times.
!
IF (NFILTER.GE.1) THEN
  DO IF = 1,NFILTER
    H2 = H
    DO I = 1,IM
      DO J = 2,JM-1
        IF (H(I,J).GT.0.) THEN
          IF (H(I,J-1).GT.0. .AND. H(I,J+1).GT.0. ) THEN
            H2(I,J) = 0.25*H(I,J-1) + 0.5*H(I,J) + 0.25*H(I,J+1)
          ELSEIF (H(I,J-1).GT.0. .AND. H(I,J+1).LE.0. ) THEN
            H2(I,J) = 0.25*H(I,J-1) + 0.75*H(I,J)
          ELSEIF (H(I,J-1).LE.0. .AND. H(I,J+1).GT.0. ) THEN
            H2(I,J) = 0.25*H(I,J+1) + 0.75*H(I,J)
          ENDIF
        ENDIF
      END DO
    END DO
    H = H2
    DO I = 2,IM-1
      DO J = 1,JM
        IF (H(I,J).GT.0.) THEN
          IF (H(I-1,J).GT.0. .AND. H(I+1,J).GT.0. ) THEN
            H2(I,J) = 0.25*H(I-1,J) + 0.5*H(I,J) + 0.25*H(I+1,J)
          ELSEIF (H(I-1,J).GT.0. .AND. H(I+1,J).LE.0. ) THEN
            H2(I,J) = 0.25*H(I-1,J) + 0.75*H(I,J)
          ELSEIF (H(I-1,J).LE.0. .AND. H(I+1,J).GT.0. ) THEN
            H2(I,J) = 0.25*H(I+1,J) + 0.75*H(I,J)
          ENDIF
        ENDIF
      END DO
    END DO
    H = H2
!
!  Keep flat bottom through the open channels.
!
    DO I = 1,9
      DO J = 13,14
        H(I,J) = HAVER1
      END DO
    END DO
    DO I = 15,18
      DO J = 1,9
        H(I,J) = HAVER2
      END DO
    END DO
!
  END DO
ENDIF
!
!Compute the maximum depth in the region.
!
DEPMAX = 0.0
DO I = 1,IM
  DO J =1,JM
    DEPMAX = MAX(H(I,J),DEPMAX)
  END DO
END DO
!
!Define COR.
!
COR = 1.3D-4
!
!Initialize FSM, DUM and DVM.
!
FSM = 1.D0
DUM = 1.D0
DVM = 1.D0
!
!
!Define the minimum allowed depth of a sea cell.
!
DO J = 1,JM
  DO I = 1,IM
    IF(H(I,J).LT.DEPMIN) THEN
      FSM(I,J)=0.
      DUM(I,J)=0.
      DVM(I,J)=0.
    ENDIF
  END DO
END DO
!
!  Compute area of the surface of the fjord system
!
AREA = 0.
DO I = 1,IM
  DO J = 1,JM
    IF (FSM(I,J).GT.0.) THEN
      AREA = AREA + 1.
    ENDIF
  END DO
END DO
AREA = AREA*DX*DY
WRITE(*,*)'AREA of the surface of the fjords is',AREA
!
!DVM is zero in all V-points with land on one side.
!
DO J = 1,JM-1
  DO I = 1,IM
    IF(FSM(I,J).EQ.0..AND.FSM(I,J+1).NE.0.) THEN
      DVM(I,J+1)=0.
    ENDIF
  END DO
END DO
!
!DUM is zero in all U-points with land on one side.
!
DO J = 1,JM
  DO I = 1,IM-1
    IF(FSM(I,J).EQ.0..AND.FSM(I+1,J).NE.0.) THEN
      DUM(I+1,J)=0.
    ENDIF
  END DO
END DO
!
!Compute the model static depths H, HU and HV.
!
H(1:IM,1:JM) = FSM(1:IM,1:JM)*H(1:IM,1:JM)
HU(1,1:JM) = H(1,1:JM)*DUM(1,1:JM)
HU(2:IM,1:JM) = 0.5*DUM(2:IM,1:JM)*(H(1:IM-1,1:JM)+H(2:IM,1:JM))
HV(1:IM,1) = H(1:IM,1)*DVM(1:IM,1)
HV(1:IM,2:JM) = 0.5*DVM(1:IM,2:JM)*(H(1:IM,1:JM-1)+H(1:IM,2:JM))
 
!
!  Define Weights to be used in the Coriolis averaging.
!
  DO I = 1,IM
     DO J = 1,JM
        HVSQR(I,J) = 0.D0
        IF (DVM(I,J).NE.0.) THEN
           HVSQR(I,J) = SQRT(DBLE(HV(I,J)))
        ENDIF
        HUSQR(I,J) = 0.D0
        IF (DUM(I,J).NE.0.) THEN
           HUSQR(I,J) = SQRT(DBLE(HU(I,J)))
        ENDIF
        IF (DVM(I,J).GT.0. .AND. HVSQR(I,J).LT.1.0) THEN
           WRITE(*,*)'ERROR IN HVSQR'
           WRITE(*,*)I,J,HVSQR(I,J)
           STOP
        ENDIF
        IF (DUM(I,J).GT.0. .AND. HUSQR(I,J).LT.1.0) THEN
           WRITE(*,*)'ERROR IN HUSQR'
           WRITE(*,*)I,J,HUSQR(I,J)
           STOP
        ENDIF
     END DO
  END DO
          
!
!Define layer thicknesses.
!
CALL DEPTH(KB,Z,DZ,DZR,DZZ,ZZ,DSBOT)
!
!  Define the bottom drag coefficients.
!
CBC = 0.0
!
DO J = 1,JM
  DO I = 1,IM
    IF (FSM(I,J).GT.0.0) THEN
      CBC(I,J)=AMAX1(CD,.16/ALOG((ZZ(KB-1)-Z(KB))*H(I,J)/Z0)**2)
    ENDIF
  END DO
END DO
!
RETURN
END
SUBROUTINE FIELDINIT
USE MOD_MAIN
IMPLICIT NONE
!
!   Local variables
!
REAL R1,R2,RR3,R4,R5,R6
!
REAL SMAX,SMINW,DELTAZS,ZS,S1Z,DEP,DELTAS
INTEGER IS
!
DATA R1,R2,RR3,R4,R5,R6/28.152,7.35E-2,4.69E-3,8.02E-1,2.0E-3,35.0/
!
!  Initialize ETA, ETAP, U, V, W, WR, S, T and D.
ETA = 0.
U = 0.
V = 0.
UADV = 0.0
VADV = 0.0
W = 0.
WR = 0.
S = 35.
T = 10.
!
!   Zero ETA in land points.
!
DO J = 1,JM
  DO I = 1,IM
    ETA(I,J) = ETA(I,J)*FSM(I,J)
  END DO
END DO
!
! If TIDE, set the water level throughout the fjord system
!
IF (TIDE) THEN
  ISTEP = 0
  IS = 0
  CALL TIDEFRS(IS)
  ETA = ETATFRS(2,13)
ENDIF
!
ETAP = ETA
!
!  Define the Salinity profile using a TANH function.
!
SMAX = 34.
SMINW = 27.
DELTAZS = 3.
ZS = -8.
DO I = 1,IM
  DO J = 1,JM
    IF (FSM(I,J).NE.0.) THEN
      DO K = 1,KB-1
        DEP = ZZ(K)*H(I,J)
        DELTAS = 0.5*(SMAX-SMINW)
        S1Z = 0.5*(SMAX+SMINW) - DELTAS*TANH((DEP-ZS)/DELTAZS)
        S(I,J,K) = S1Z 
      END DO
    ENDIF
  END DO
END DO
!
!Compute the Density from Wang
!
RHOAVER = 0.
IF (UNESCO) THEN
  CALL DENSUNESCO
ELSE
  CALL DENS
ENDIF
!
!  Compute SAVER,TAVER and RHOAVER.
!
VOLUME = 0.
MASS = 0.
SAVER = 0.
TAVER = 0.
DO I = 1,IM-1
  DO J = 1,JM-1
    IF (FSM(I,J).GT.0.) THEN
      VOLUME = VOLUME + H(I,J)
      DO K = 1,KB-1
        MASS = MASS + RHO(I,J,K)*H(I,J)*DZ(K)
        SAVER = SAVER + S(I,J,K)*H(I,J)*DZ(K)
        TAVER = TAVER + T(I,J,K)*H(I,J)*DZ(K)
      END DO
    ENDIF
  END DO
END DO
MASS = MASS/VOLUME
SAVER = SAVER/VOLUME
TAVER = TAVER/VOLUME
RHOAVER = MASS
WRITE(*,*)'MASS=',MASS,SAVER,TAVER
DO J = 1,JM
  DO I = 1,IM
      DO K = 1,KB-1
        RHO(I,J,K) =RHO(I,J,K)-MASS
      END DO
  END DO
END DO
!
!Initialize dynamic depths D, DU and DV.
!
CALL UPDATEDD
!
!   Zero the arrays in land points.
!
DO K = 1,KB-1
  DO J = 1,JM
    DO I = 1,IM
      RHO(I,J,K) = RHO(I,J,K)*FSM(I,J)
      S(I,J,K) = S(I,J,K)*FSM(I,J)
      T(I,J,K) = T(I,J,K)*FSM(I,J)
      U(I,J,K) = U(I,J,K)*DUM(I,J)
      V(I,J,K) = V(I,J,K)*DVM(I,J)
    END DO
  END DO
END DO
DO J = 1,JM
  DO I = 1,IM
    ETA(I,J) = ETA(I,J)*FSM(I,J)
  END DO
END DO
!
! Initiate KM, KH, KQ, Q2, Q2L, 
! SSURF, TSURF, WUBOT, WVBOT, WUSURF and WVSURF.
!
KM = 1.E-3
KH = 1.E-4
KQ = 1.E-4
Q2 = 1.E-4
Q2L = 1.E-4
KM(1:IM,1:JM,1) = 0.
KH(1:IM,1:JM,1) = 0.
KQ(1:IM,1:JM,1) = 0.
KM(1:IM,1:JM,KB) = 0.
KH(1:IM,1:JM,KB) = 0.
KQ(1:IM,1:JM,KB) = 0.
WUSURF = 0.0
WVSURF = 0.0
PATM = PMEAN
SSURF = 0.0
TSURF = 0.0
!
WUBOT = 0.
WVBOT = 0.
!
!2-D boundary value arrays.
!
ETAFRS = 0.
ETATFRS = 0.
ETABFRS = 0.
UAFRS = 0.
UATFRS = 0.
VAFRS = 0.
VATFRS = 0.
!
!3-D boundary value arrays.
!
UFRS = U
VFRS = V
UTFRS = 0.
VTFRS = 0.
SFRS = S
TFRS = T
Q2FRS = Q2
Q2LFRS = Q2L
!
!
!  Initialize ver 4.0 variables
!
UNM1 = U
DELUN = 0.
DELUSTAR = 0.
DELUNM1 = 0.
!
VNM1 = V
DELVN = 0.
DELVSTAR = 0.
DELVNM1 = 0.
!
SNM1 = S
DELSN = 0.
DELSSTAR = 0.
DELSNM1 = 0.
!
TNM1 = T
DELTN = 0.
DELTSTAR = 0.
DELTNM1 = 0.

TN = T
SN = S
UN = U
VN = V

RETURN
END SUBROUTINE FIELDINIT
SUBROUTINE FILES
IMPLICIT NONE
INTEGER LENREC
PARAMETER (LENREC = 1000)
!
! Open all input and output datafiles to be used by the model.
!
!  Input files
OPEN (10,FILE='bottom1km.dat',STATUS='OLD')
OPEN (40,FILE='setupfile.dat',STATUS='OLD')
!
!  Output files
!
OPEN(43,FILE='energy.plt')
OPEN(81,FILE='bottom.plt')
OPEN(82,FILE='field2d.plt')
OPEN(83,FILE='point.plt')
OPEN(84,FILE='point2.plt')
OPEN(85,FILE='point3.plt')
!
OPEN(86,FILE='arnaelven.plt')
!
OPEN(91,FILE='section1.plt')
!
END SUBROUTINE FILES
SUBROUTINE HORVISCUV2D(C2U,C2V)
!
!           HORVISCUV2D computes contributions from the 
!           the horizontal viscosity terms of the depth integrated moment
!           equations:
!
!           d(AM2D*(d(UA*D)/dy))/dy + d(AM2D*(d(UA*D)/dx))/dx
!  and
!           d(AM2D*(d(VA*D)/dx))/dx + d(AM2D*(d(VA*D)/dy))/dy
!
!           The contributions are 
!           stored in the 2-D fields C2U and C2V before
!           exit
!
!           d(*) is the differential operator,
!           D is the dynamic depth,
!           AM2D is the vertically averaged horizontal eddy viscosity.
!
!***ROUTINES CALLED-NONE
!***END PROLOGUE
!
!   Global variables.
!
USE STATE
IMPLICIT NONE
REAL C2U(IM,JM),C2V(IM,JM)
!
!   Local variables.
!
!   XFLUX,YFLUX are used to store the viscosity fluxes 
!                     in the two space directions
!   DAM is used to store averages of AM
!
! ..
! .. Local Arrays ..
REAL :: XFLUX(IM,JM), YFLUX(IM,JM)
REAL :: FIELDD(IM,JM),DELTAI(IM,JM)
!
REAL AREA,NETFLUX
REAL DAM
INTEGER I,J
!
C2U = 0.
C2V = 0.
AREA = DX*DY
!
! Compute UA * DU 
!
XFLUX = 0.
FIELDD = 0.
DO J = 1,JM
  DO I = 1,IM
    FIELDD(I,J) = UA(I,J)*DU(I,J)
  END DO
END DO
!
!  Compute differences in FIELDD in X-direction
!
DELTAI = 0.
DO I = 2,IM
  DO J = 1,JM
    DELTAI(I,J) = FIELDD(I,J)-FIELDD(I-1,J)
  END DO
END DO
!
!$OMP PARALLEL DO PRIVATE(I,J) FIRSTPRIVATE(DX,DY)
DO J = 2,JM-1
  DO I = 1,IM-1
    IF (FSM(I,J).NE.0.) THEN
      XFLUX(I,J) = DY*AM2D(I,J)*DELTAI(I+1,J)/DX
    ENDIF
  END DO
END DO
YFLUX = 0.
!
!  Compute differences in FIELDD in Y-direction
!
DELTAI = 0.
DO I = 1,IM
  DO J = 2,JM
    DELTAI(I,J) = FIELDD(I,J)-FIELDD(I,J-1)
  END DO
END DO
!$OMP PARALLEL DO PRIVATE(I,J,DAM) FIRSTPRIVATE(DX,DY)
DO J = 1,JM-1
  DO I = 2,IM-1
    IF (DVM(I-1,J+1).NE.0. .AND. DVM(I,J+1).NE.0.) THEN
      DAM = .25*(AM2D(I,J)+AM2D(I-1,J)+AM2D(I,J+1)+AM2D(I-1,J+1))
      YFLUX(I,J) = DX*DAM*DELTAI(I,J+1)/DY
    ENDIF
  END DO
END DO
!
!   Compute the net viscosity fluxes into each ocean cell.
!
!$OMP PARALLEL DO PRIVATE(I,J,NETFLUX) FIRSTPRIVATE(AREA)
DO J = 2,JM-1
  DO I =2,IM-1
    IF (DUM(I,J).GT.0.0) THEN
        NETFLUX = XFLUX(I,J) - XFLUX(I-1,J) + &
    &             YFLUX(I,J) - YFLUX(I,J-1) 
        C2U(I,J) =   NETFLUX/AREA
    ENDIF
  END DO
END DO
!
!   Then the momentum equation in V.
!
!   Compute VA * DV
!
XFLUX = 0.
FIELDD = 0.
  DO J = 1,JM
    DO I = 1,IM
      FIELDD(I,J) = VA(I,J)*DV(I,J)
    END DO
  END DO
!
!  Compute differences in FIELDD in X-direction
!
DELTAI = 0.
DO I = 2,IM
  DO J = 1,JM
      DELTAI(I,J) = FIELDD(I,J)-FIELDD(I-1,J)
  END DO
END DO
!$OMP PARALLEL DO PRIVATE(I,J,DAM) FIRSTPRIVATE(DX,DY)
DO J = 2,JM-1
  DO I = 1,IM-1
    IF (DUM(I+1,J-1).NE.0. .AND. DUM(I+1,J).NE.0.) THEN
      DAM = .25*(AM2D(I,J)+AM2D(I,J-1)+AM2D(I+1,J)+AM2D(I+1,J-1))
      XFLUX(I,J) = DY*DAM*DELTAI(I+1,J)/DX
    ENDIF
  END DO
END DO
!
!  Compute the viscosity fluxes for the V-equation in Y-direction.
!
YFLUX = 0.
!
!  Compute differences in FIELDD in Y-direction
!
DELTAI = 0.
DO I = 1,IM
  DO J = 2,JM
      DELTAI(I,J) = FIELDD(I,J)-FIELDD(I,J-1)
  END DO
END DO
!$OMP PARALLEL DO PRIVATE(I,J) FIRSTPRIVATE(DX,DY)
DO J = 1,JM-1
  DO I = 2,IM-1
    IF (FSM(I,J).NE.0.) THEN
        YFLUX(I,J) = DX*AM2D(I,J)*DELTAI(I,J+1)/DY
    ENDIF
  END DO
END DO
!
!   Compute the net viscosity fluxes into each ocean cell.
!
!$OMP PARALLEL DO PRIVATE(I,J,NETFLUX) FIRSTPRIVATE(AREA)
DO J = 2,JM-1
  DO I =2,IM-1
    IF (DVM(I,J).GT.0.0) THEN
        NETFLUX = XFLUX(I,J) - XFLUX(I-1,J) + &
    &             YFLUX(I,J) - YFLUX(I,J-1) 
        C2V(I,J) =   NETFLUX/AREA
    ENDIF
  END DO
END DO
!
RETURN
END
SUBROUTINE HORVISCUV2DPOM(C2U,C2V)
!
!           HORVISCUV2D computes contributions from the 
!           the horizontal viscosity terms of the depth integrated moment
!           equations:
!
!           d(AM2D*(d(UA*D)/dy))/dy + d(AM2D*(d(UA*D)/dx))/dx
!  and
!           d(AM2D*(d(VA*D)/dx))/dx + d(AM2D*(d(VA*D)/dy))/dy
!
!           The contributions are 
!           stored in the 2-D fields C2U and C2V before
!           exit
!
!           d(*) is the differential operator,
!           D is the dynamic depth,
!           AM2D is the vertically averaged horizontal eddy viscosity.
!
!***ROUTINES CALLED-NONE
!***END PROLOGUE
!
!   Global variables.
!
USE STATE
IMPLICIT NONE
REAL C2U(IM,JM),C2V(IM,JM)
!
!   Local variables.
!
!   XFLUX,YFLUX are used to store the viscosity fluxes 
!                     in the two space directions
!   DAM is used to store averages of AM
!
! ..
! .. Local Arrays ..
REAL :: XFLUX(IM,JM), YFLUX(IM,JM)
!
REAL AREA,NETFLUX
REAL DAM,DEP
INTEGER I,J
!
C2U = 0.
C2V = 0.
AREA = DX*DY
!
! Compute UA * DU 
!
XFLUX = 0.
!
!$OMP PARALLEL DO PRIVATE(I,J) FIRSTPRIVATE(DX,DY)
DO J = 2,JM-1
  DO I = 1,IM-1
    IF (FSM(I,J).NE.0.) THEN
      XFLUX(I,J) = DY*2*D(I,J)*AM2D(I,J)*(UA(I+1,J)-UA(I,J))/DX
    ENDIF
  END DO
END DO
YFLUX = 0.
!
!$OMP PARALLEL DO PRIVATE(I,J,DAM,DEP) FIRSTPRIVATE(DX,DY)
DO J = 1,JM-1
  DO I = 2,IM-1
    IF (DVM(I-1,J+1).NE.0. .AND. DVM(I,J+1).NE.0.) THEN
      DAM = .25*(AM2D(I,J)+AM2D(I-1,J)+AM2D(I,J+1)+AM2D(I-1,J+1))
      DEP = .25*(D(I,J)+D(I-1,J)+D(I,J+1)+D(I-1,J+1))
!     YFLUX(I,J) = DX*DAM*DELTAI(I,J+1)/DY
      YFLUX(I,J) = DX*DEP*DAM*((UA(I,J+1)-UA(I,J))/DY + &
     &      (VA(I,J+1)-VA(I-1,J+1))/DX )
    ENDIF
  END DO
END DO
!
!   Compute the net viscosity fluxes into each ocean cell.
!
!$OMP PARALLEL DO PRIVATE(I,J,NETFLUX) FIRSTPRIVATE(AREA)
DO J = 2,JM-1
  DO I =2,IM-1
    IF (DUM(I,J).GT.0.0) THEN
        NETFLUX = XFLUX(I,J) - XFLUX(I-1,J) + &
    &             YFLUX(I,J) - YFLUX(I,J-1) 
        C2U(I,J) =   NETFLUX/AREA
    ENDIF
  END DO
END DO
!
!   Then the momentum equation in V.
!
!   Compute VA * DV
!
XFLUX = 0.
!
!$OMP PARALLEL DO PRIVATE(I,J,DAM,DEP) FIRSTPRIVATE(DX,DY)
DO J = 2,JM-1
  DO I = 1,IM-1
    IF (DUM(I+1,J-1).NE.0. .AND. DUM(I+1,J).NE.0.) THEN
      DAM = .25*(AM2D(I,J)+AM2D(I,J-1)+AM2D(I+1,J)+AM2D(I+1,J-1))
      DEP = .25*(D(I,J)+D(I,J-1)+D(I+1,J)+D(I+1,J-1))
!     XFLUX(I,J) = DY*DAM*DELTAI(I+1,J)/DX
      XFLUX(I,J) = DY*DEP*DAM*((UA(I+1,J)-UA(I+1,J-1))/DY + &
     &      (VA(I+1,J)-VA(I,J))/DX)
    ENDIF
  END DO
END DO
!
!  Compute the viscosity fluxes for the V-equation in Y-direction.
!
YFLUX = 0.
!
!$OMP PARALLEL DO PRIVATE(I,J) FIRSTPRIVATE(DX,DY)
DO J = 1,JM-1
  DO I = 2,IM-1
    IF (FSM(I,J).NE.0.) THEN
        YFLUX(I,J) = DX*D(I,J)*AM2D(I,J)*(VA(I,J+1)-VA(I,J))/DY
    ENDIF
  END DO
END DO
!
!   Compute the net viscosity fluxes into each ocean cell.
!
!$OMP PARALLEL DO PRIVATE(I,J,NETFLUX) FIRSTPRIVATE(AREA)
DO J = 2,JM-1
  DO I =2,IM-1
    IF (DVM(I,J).GT.0.0) THEN
        NETFLUX = XFLUX(I,J) - XFLUX(I-1,J) + &
    &             YFLUX(I,J) - YFLUX(I,J-1) 
        C2V(I,J) =   NETFLUX/AREA
    ENDIF
  END DO
END DO
!
RETURN
END
SUBROUTINE HORVISCUV(UBCLIN,VBCLIN,C3U,C3V)
!
!           HORVISCUV computes the following terms from the
!           Baroclinic parts of the momentum equations: 
!
!           d(AM*(d(UBCLIN*D)/dy))/dy + d(AM*(d(UBCLIN*D)/dx))/dx
!  and
!           d(AM*(d(VBCLIN*D)/dx))/dx + d(AM*(d(VBCLIN*D)/dy))/dy
!
!           d(*) is the differential operator,
!           D is the dynamic depth,
!           AM is the horizontal eddy viscosity,
!           The net-fluxes for each cell are stored in the 3-D arrays
!           C3U and C3V.
!
!***ROUTINES CALLED-NONE
!***END PROLOGUE
!
!   Global variables.
!
USE STATE
IMPLICIT NONE
REAL UBCLIN(IM,JM,KB),VBCLIN(IM,JM,KB),C3U(IM,JM,KB),C3V(IM,JM,KB)
!
!   Local variables.
!
!   XFLUX,YFLUX are used to store the diffusive fluxes in
!                     the three space directions
! ..
! .. Local Arrays ..
REAL :: XFLUX(IM,JM,KB), YFLUX(IM,JM,KB)
REAL :: FIELDD(IM,JM,KB),DELTAI(IM,JM,KB)
!
REAL AREA,NETFLUX
REAL DAM
INTEGER I,J,K
!
C3U = 0.
C3V = 0.
AREA = DX*DY
!
!
!  First the diffusive fluxes for the U equation in X-direction.
!
XFLUX = 0.
FIELDD = 0.
DO K = 1,KB-1
  DO J = 1,JM
    DO I = 1,IM
      FIELDD(I,J,K) = UBCLIN(I,J,K)*DU(I,J)
    END DO
  END DO
END DO
!
!  Compute differences in FIELDD in X-direction
!
DELTAI = 0.
DO I = 2,IM
  DO J = 1,JM
    DO K = 1,KB-1
      DELTAI(I,J,K) = FIELDD(I,J,K)-FIELDD(I-1,J,K)
    END DO
  END DO
END DO
!
!$OMP PARALLEL DO  PRIVATE(I,J,K) FIRSTPRIVATE(DX,DY)
DO J = 2,JM-1
  DO I = 1,IM-1
    IF (FSM(I,J).NE.0.) THEN
      DO K = 1,KB-1
        XFLUX(I,J,K) = DY*AM(I,J,K)*DELTAI(I+1,J,K)/DX
      END DO
    ENDIF
  END DO
END DO
!
!  Compute the diffusive fluxes for the U-equation in Y-direction.
!
YFLUX = 0.
!
!  Compute differences in FIELDD in Y-direction
!
DELTAI = 0.
DO I = 1,IM
  DO J = 2,JM
    DO K = 1,KB-1
      DELTAI(I,J,K) = FIELDD(I,J,K)-FIELDD(I,J-1,K)
    END DO
  END DO
END DO
!$OMP PARALLEL DO PRIVATE(I,J,K,DAM) FIRSTPRIVATE(DX,DY)
DO J = 1,JM-1
  DO I = 2,IM-1
    IF (DVM(I-1,J+1).NE.0. .AND. DVM(I,J+1).NE.0.) THEN
      DO K = 1,KB-1
        DAM = .25*(AM(I,J,K)+AM(I-1,J,K)+AM(I,J+1,K)+AM(I-1,J+1,K))
        YFLUX(I,J,K) = DX*DAM*DELTAI(I,J+1,K)/DY
     END DO
    ENDIF
 END DO
END DO
!
!   Take a step to timestep n+1 for the U-equation
!   by adding up the fluxes in and out of the cell.
!
!$OMP PARALLEL DO PRIVATE(I,J,K,NETFLUX) FIRSTPRIVATE(AREA)
DO J = 2,JM-1
  DO I =2,IM-1
    IF (DUM(I,J).GT.0.0) THEN
      DO K = 1,KB-1
        NETFLUX = XFLUX(I,J,K) - XFLUX(I-1,J,K) + &
    &             YFLUX(I,J,K) - YFLUX(I,J-1,K) 
        C3U(I,J,K) =   NETFLUX/AREA
      END DO
    ENDIF
  END DO
END DO
!
!
!   Then the momentum equation in V.
!
!   First the diffusive fluxes in X-direction.
!
XFLUX = 0.
FIELDD = 0.
DO K = 1,KB-1
  DO J = 1,JM
    DO I = 1,IM
      FIELDD(I,J,K) = VBCLIN(I,J,K)*DV(I,J)
    END DO
  END DO
END DO
!
!  Compute differences in FIELDD in X-direction
!
DELTAI = 0.
DO I = 2,IM
  DO J = 1,JM
    DO K = 1,KB-1
      DELTAI(I,J,K) = FIELDD(I,J,K)-FIELDD(I-1,J,K)
    END DO
  END DO
END DO
!$OMP PARALLEL DO PRIVATE(I,J,K,DAM) FIRSTPRIVATE(DX,DY)
DO J = 2,JM-1
  DO I = 1,IM-1
    IF (DUM(I+1,J-1).NE.0. .AND. DUM(I+1,J).NE.0.) THEN
      DO K = 1,KB-1
        DAM = .25*(AM(I,J,K)+AM(I,J-1,K)+AM(I+1,J,K)+AM(I+1,J-1,K))
        XFLUX(I,J,K) = DY*DAM*DELTAI(I+1,J,K)/DX
      END DO
    ENDIF
 END DO
END DO
!
!  Compute the diffusive fluxes for the V-equation in Y-direction.
!
YFLUX = 0.
!
!  Compute differences in FIELDD in Y-direction
!
DELTAI = 0.
DO I = 1,IM
  DO J = 2,JM
    DO K = 1,KB-1
      DELTAI(I,J,K) = FIELDD(I,J,K)-FIELDD(I,J-1,K)
    END DO
  END DO
END DO
!$OMP PARALLEL DO PRIVATE(I,J,K) FIRSTPRIVATE(DX,DY)
DO J = 1,JM-1
  DO I = 2,IM-1
    IF (FSM(I,J).NE.0.) THEN
      DO K = 1,KB-1
        YFLUX(I,J,K) = DX*AM(I,J,K)*DELTAI(I,J+1,K)/DY
      END DO
    ENDIF
  END DO
END DO
!
!   Take a step to timestep n+1 for the V-equation by adding up the
!   fluxes in and out of the cell.
!
!$OMP PARALLEL DO PRIVATE(I,J,K,NETFLUX) FIRSTPRIVATE(AREA)
DO J = 2,JM-1
  DO I =2,IM-1
    IF (DVM(I,J).GT.0.0) THEN
      DO K = 1,KB-1
        NETFLUX = XFLUX(I,J,K) - XFLUX(I-1,J,K) + &
    &             YFLUX(I,J,K) - YFLUX(I,J-1,K) 
        C3V(I,J,K) =   NETFLUX/AREA
      END DO
    ENDIF
  END DO
END DO
!
!
RETURN
END
SUBROUTINE HORVISCUVPOM(UBCLIN,VBCLIN,C3U,C3V)
!
!           HORVISCUV computes the following terms from the
!           Baroclinic parts of the momentum equations: 
!
!           d(AM*(d(UBCLIN*D)/dy))/dy + d(AM*(d(UBCLIN*D)/dx))/dx
!  and
!           d(AM*(d(VBCLIN*D)/dx))/dx + d(AM*(d(VBCLIN*D)/dy))/dy
!
!           d(*) is the differential operator,
!           D is the dynamic depth,
!           AM is the horizontal eddy viscosity,
!           The net-fluxes for each cell are stored in the 3-D arrays
!           C3U and C3V.
!
!***ROUTINES CALLED-NONE
!***END PROLOGUE
!
!   Global variables.
!
USE STATE
IMPLICIT NONE
REAL UBCLIN(IM,JM,KB),VBCLIN(IM,JM,KB),C3U(IM,JM,KB),C3V(IM,JM,KB)
!
!   Local variables.
!
!   XFLUX,YFLUX are used to store the diffusive fluxes in
!                     the three space directions
! ..
! .. Local Arrays ..
REAL :: XFLUX(IM,JM,KB), YFLUX(IM,JM,KB)
!
REAL AREA,NETFLUX
REAL DAM,DEP
INTEGER I,J,K
!
C3U = 0.
C3V = 0.
AREA = DX*DY
!
!
!  First the diffusive fluxes for the U equation in X-direction.
!
XFLUX = 0.
!
!$OMP PARALLEL DO PRIVATE(I,J,K) FIRSTPRIVATE(DX,DY)
DO J = 2,JM-1
  DO I = 1,IM-1
    IF (FSM(I,J).NE.0.) THEN
      DO K = 1,KB-1
        XFLUX(I,J,K) = DY*2*D(I,J)*AM(I,J,K)*(UBCLIN(I+1,J,K)-UBCLIN(I,J,K))/DX
      END DO
    ENDIF
  END DO
END DO
!
!  Compute the diffusive fluxes for the U-equation in Y-direction.
!
YFLUX = 0.
!
!$OMP PARALLEL DO PRIVATE(I,J,K,DAM,DEP) FIRSTPRIVATE(DX,DY) 
DO J = 1,JM-1
  DO I = 2,IM-1
    IF (DVM(I-1,J+1).NE.0. .AND. DVM(I,J+1).NE.0.) THEN
      DO K = 1,KB-1
        DAM = .25*(AM(I,J,K)+AM(I-1,J,K)+AM(I,J+1,K)+AM(I-1,J+1,K))
        DEP = .25*(D(I,J)+D(I-1,J)+D(I,J+1)+D(I-1,J+1))
!        YFLUX(I,J,K) = DX*DAM*DELTAI(I,J+1,K)/DY
        YFLUX(I,J,K) = DX*DEP*DAM*((UBCLIN(I,J+1,K)-UBCLIN(I,J,K))/DY + &
     &      (VBCLIN(I,J+1,K)-VBCLIN(I-1,J+1,K))/DX )
     END DO
    ENDIF
 END DO
END DO
!
!   Take a step to timestep n+1 for the U-equation
!   by adding up the fluxes in and out of the cell.
!
!$OMP PARALLEL DO PRIVATE(I,J,K,NETFLUX) FIRSTPRIVATE(AREA) 
DO J = 2,JM-1
  DO I =2,IM-1
    IF (DUM(I,J).GT.0.0) THEN
      DO K = 1,KB-1
        NETFLUX = XFLUX(I,J,K) - XFLUX(I-1,J,K) + &
    &             YFLUX(I,J,K) - YFLUX(I,J-1,K) 
        C3U(I,J,K) =   NETFLUX/AREA
      END DO
    ENDIF
  END DO
END DO
!
!
!   Then the momentum equation in V.
!
!   First the diffusive fluxes in X-direction.
!
XFLUX = 0.
!
!  Compute differences in FIELDD in X-direction
!
!$OMP PARALLEL DO PRIVATE(I,J,K,DAM,DEP) FIRSTPRIVATE(DX,DY)
DO J = 2,JM-1
  DO I = 1,IM-1
    IF (DUM(I+1,J-1).NE.0. .AND. DUM(I+1,J).NE.0.) THEN
      DO K = 1,KB-1
        DAM = .25*(AM(I,J,K)+AM(I,J-1,K)+AM(I+1,J,K)+AM(I+1,J-1,K))
        DEP = .25*(D(I,J)+D(I,J-1)+D(I+1,J)+D(I+1,J-1))
!       XFLUX(I,J,K) = DY*DAM*DELTAI(I+1,J,K)/DX
        XFLUX(I,J,K) = DY*DEP*DAM*((UBCLIN(I+1,J,K)-UBCLIN(I+1,J-1,K))/DY + &
     &      (VBCLIN(I+1,J,K)-VBCLIN(I,J,K))/DX)
      END DO
    ENDIF
 END DO
END DO
!
!  Compute the diffusive fluxes for the V-equation in Y-direction.
!
YFLUX = 0.
!
!$OMP PARALLEL DO PRIVATE(I,J,K) FIRSTPRIVATE(DX,DY)
DO J = 1,JM-1
  DO I = 2,IM-1
    IF (FSM(I,J).NE.0.) THEN
      DO K = 1,KB-1
        YFLUX(I,J,K) = DX*2*D(I,J)*AM(I,J,K)*(VBCLIN(I,J+1,K)-VBCLIN(I,J,K))/DY
      END DO
    ENDIF
  END DO
END DO
!
!   Take a step to timestep n+1 for the V-equation by adding up the
!   fluxes in and out of the cell.
!
!$OMP PARALLEL DO PRIVATE(I,J,K,NETFLUX) FIRSTPRIVATE(AREA)
DO J = 2,JM-1
  DO I =2,IM-1
    IF (DVM(I,J).GT.0.0) THEN
      DO K = 1,KB-1
        NETFLUX = XFLUX(I,J,K) - XFLUX(I-1,J,K) + &
    &             YFLUX(I,J,K) - YFLUX(I,J-1,K) 
        C3V(I,J,K) =   NETFLUX/AREA
      END DO
    ENDIF
  END DO
END DO
!
!
RETURN
END
SUBROUTINE INTERNAL4
!
!  INTERNAL computes the following terms of the
!  moment equations:
!
!   -(g*D/RHO0)*d(Integral from z to 0 of RHO)/dx
!
!   -(g*D/RHO0)*d(Integral from z to 0 of RHO)/dy
!
!  where g is gravity, D ia dynamic depth
!  and RHO0 reference density,
!  with an explicit technique.
!
!  The method is a 4th order according to McCalpin (1994)
!
USE STATE
IMPLICIT NONE
REAL, DIMENSION(IM,JM,KB) :: DRHODX,DRHODY
REAL, DIMENSION(KB) :: ZZ2(KB)
REAL REFDENS,XFACTOR,YFACTOR, DIFF
INTEGER I,J,K
REAL DRHO(IM,JM,KB),DDX(IM,JM),RHOU(IM,JM,KB),D4(IM,JM)
!
REFDENS = 1.0 / RHO0
ZZ2 = 0.
DO K = 2,KB-1
  ZZ2(K) = 0.5*(ZZ(K-1)+ZZ(K))
END DO
!
!               X COMPONENT OF BAROCLINIC PRESSURE GRADIENT
!
DRHODX = 0.
DRHODY = 0.
DRHO = 0.
DDX = 0.
RHOU = 0.
D4 = 0.
!
!  Compute DRHO
!
DO K = 1,KB-1
  DO J=2,JM-1
    DO I=2,IM-1
      DRHO(I,J,K)=(RHO(I,J,K)-RHO(I-1,J,K))
    END DO
  END DO
END DO
DO K = 1,KB-1
  DO J=2,JM-1
    DO I=3,IM-1
      DRHO(I,J,K)=DRHO(I,J,K) - (1./24.)*                   &
      &           (DUM(I+1,J)*(RHO(I+1,J,K)-RHO(I,J,K))-  &
      &            2*(RHO(I,J,K)-RHO(I-1,J,K))+           &
      &            DUM(I-1,J)*(RHO(I-1,J,K)-RHO(I-2,J,K))  )
    END DO
  END DO
END DO
!
!  Compute DDX
!
DO J=2,JM-1
  DO I=2,IM-1
    DDX(I,J)=(D(I,J)-D(I-1,J))
    D4(I,J) = 0.5*(D(I,J)+D(I-1,J))
  END DO
END DO
DO J=2,JM-1
  DO I=3,IM-1
    DDX(I,J)=DDX(I,J) - (1./24.)*                   &
      &           (DUM(I+1,J)*(D(I+1,J)-D(I,J))-  &
      &            2*(D(I,J)-D(I-1,J))+           &
      &            DUM(I-1,J)*(D(I-1,J)-D(I-2,J))  )
    D4(I,J) = D4(I,J) + (1./16.)*                   &
      &           (DUM(I+1,J)*(D(I,J)-D(I+1,J))+  &
      &            DUM(I-1,J)*(D(I-1,J)-D(I-2,J))  )
  END DO
END DO
!
!  Compute RHOU
!
DO K = 1,KB-1
  DO J=2,JM-1
    DO I=2,IM-1
      RHOU(I,J,K)=0.5*(RHO(I,J,K)+RHO(I-1,J,K))
    END DO
  END DO
END DO
DO K = 1,KB-1
  DO J=2,JM-1
    DO I=3,IM-1
      RHOU(I,J,K)=RHOU(I,J,K) + (1./16.)*                   &
      &           (DUM(I+1,J)*(RHO(I,J,K)-RHO(I+1,J,K))+  &
      &            DUM(I-1,J)*(RHO(I-1,J,K)-RHO(I-2,J,K))  )
    END DO
  END DO
END DO
!
!  Integrate vertically contributions to DRHODX
!  Utilizes that int (sigma d(rho)/d(sigma)) dsigma = sigma*rho - int rho dsigma
!  after partial integration
!
DO J=2,JM-1
  DO I=2,IM-1
   DRHODX(I,J,1)=GRAV*(-ZZ(1))*(D4(I,J)*DRHO(I,J,1)+     &
      &   DDX(I,J)*RHOU(I,J,1) )
  END DO
END DO
DO K=2,KB-1
  DO J=2,JM-1
    DO I=2,IM-1
      DRHODX(I,J,K)=DRHODX(I,J,K-1) + GRAV*.5E0*DZZ(K-1)* &
     &      (D4(I,J)*(DRHO(I,J,K-1)+DRHO(I,J,K)) + &
     &       DDX(I,J)*(RHOU(I,J,K-1)+RHOU(I,J,K))  )
    END DO
  END DO
END DO
!
!  Compute direct contribution to DRHODX. from (dD/dx)*sigma*g*RHO
!
DO K=1,KB-1
  DO J=2,JM-1
    DO I=2,IM-1
      DRHODX(I,J,K)= DRHODX(I,J,K) + DDX(I,J)*ZZ(K)*RHOU(I,J,K)*GRAV
    END DO
  END DO
END DO
!
!               Y COMPONENT OF BAROCLINIC PRESSURE GRADIENT
!
DRHO = 0.
DDX = 0.
RHOU = 0.
D4 = 0.
!
!  Compute DRHO
!
DO K = 1,KB-1
  DO J=2,JM-1
    DO I=2,IM-1
      DRHO(I,J,K)=(RHO(I,J,K)-RHO(I,J-1,K))
    END DO
  END DO
END DO
DO K = 1,KB-1
  DO J=3,JM-1
    DO I=2,IM-1
      DRHO(I,J,K)=DRHO(I,J,K) - (1./24.)*                   &
      &           (DVM(I,J+1)*(RHO(I,J+1,K)-RHO(I,J,K))-  &
      &            2*(RHO(I,J,K)-RHO(I,J-1,K))+           &
      &            DVM(I,J-1)*(RHO(I,J-1,K)-RHO(I,J-2,K))  )
    END DO
  END DO
END DO
!
!  Compute DDX
!
DO J=2,JM-1
  DO I=2,IM-1
      DDX(I,J)=(D(I,J)-D(I,J-1))
      D4(I,J) = 0.5*(D(I,J)+D(I,J-1))
  END DO
END DO
DO J=3,JM-1
  DO I=2,IM-1
    DDX(I,J)=DDX(I,J) - (1./24.)*               &
      &           (DVM(I,J+1)*(D(I,J+1)-D(I,J))-  &
      &            2*(D(I,J)-D(I,J-1))+           &
      &            DVM(I,J-1)*(D(I,J-1)-D(I,J-2)) )
    D4(I,J) = D4(I,J) + (1./16.)*                   &
      &           (DVM(I,J+1)*(D(I,J)-D(I,J+1))+  &
      &            DVM(I,J-1)*(D(I,J-1)-D(I,J-2))  )
  END DO
END DO
!
!  Compute RHOU
!
DO K = 1,KB-1
  DO J=2,JM-1
    DO I=2,IM-1
      RHOU(I,J,K)=0.5*(RHO(I,J,K)+RHO(I,J-1,K))
    END DO
  END DO
END DO
DO K = 1,KB-1
  DO J=3,JM-1
    DO I=2,IM-1
      RHOU(I,J,K)=RHOU(I,J,K) + (1./16.)*                   &
      &           (DVM(I,J+1)*(RHO(I,J,K)-RHO(I,J+1,K))+  &
      &            DVM(I,J-1)*(RHO(I,J-1,K)-RHO(I,J-2,K))  )
    END DO
  END DO
END DO
!
!  Integrate vertically contributions to DRHODY
!
DO J=2,JM-1
  DO I=2,IM-1
   DRHODY(I,J,1)=GRAV*(-ZZ(1))*(D4(I,J)*DRHO(I,J,1)+     &
      &   DDX(I,J)*RHOU(I,J,1) )
  END DO
END DO
DO K=2,KB-1
  DO J=2,JM-1
    DO I=2,IM-1
      DRHODY(I,J,K)=DRHODY(I,J,K-1) + GRAV*.5E0*DZZ(K-1)* &
     &      (D4(I,J)*(DRHO(I,J,K-1)+DRHO(I,J,K)) + &
     &       DDX(I,J)*(RHOU(I,J,K-1)+RHOU(I,J,K))  )
    END DO
  END DO
END DO
!
!  Compute direct contribution to DRHODY. from (dD/dx)*sigma*g*RHO
!
DO K=1,KB-1
  DO J=2,JM-1
    DO I=2,IM-1
      DRHODY(I,J,K)= DRHODY(I,J,K) + DDX(I,J)*ZZ(K)*RHOU(I,J,K)*GRAV
    END DO
  END DO
END DO
!
!  Include effect of internal pressure.
!
XFACTOR = REFDENS/DX
YFACTOR = REFDENS/DY
  DELTAU = 0.
  DELTAV = 0.
DO K = 1,KB-1
  DO J = 2,JM-1
    DO I = 2,IM-1
       DELTAU(I,J,K) = - XFACTOR*DRHODX(I,J,K)*DU(I,J)*DUM(I,J)
      DELTAV(I,J,K) = - YFACTOR*DRHODY(I,J,K)*DV(I,J)*DVM(I,J)
    END DO
  END DO
END DO
!
RETURN
END
SUBROUTINE INTERNAL
!
!  INTERNAL computes the following terms of the
!  moment equations:
!
!   -(g*D**2/RHO0)*Integral from sigma to 0 of
!                  ((dRHO/dx) - (sigma/D)*(dsigma/dx)*(dRHO/dsigma) )
!
!   -(g*D**2/RHO0)*Integral from sigma to 0 of
!                  ((dRHO/dy) - (sigma/D)*(dsigma/dy)*(dRHO/dsigma)
!
!  where g is gravity, D ia dynamic depth
!  and RHO0 reference density,
!  with an explicit technique.
!
!  The results are stored in DELTAU and DELTAV.
!
!  The method is as in Blumberg and Mellor (1987).
!
  USE STATE
  IMPLICIT NONE
  REAL, DIMENSION(IM,JM,KB) :: DRHODX,DRHODY
  REAL, DIMENSION(KB) :: ZZ2(KB)
  REAL REFDENS,XFACTOR,YFACTOR, DIFF
  INTEGER I,J,K
  REAL DRHO
!
  REFDENS = 1.0 / RHO0
  ZZ2 = 0.
!$omp parallel do
  DO K = 2,KB-1
     ZZ2(K) = 0.5*(ZZ(K-1)+ZZ(K))
  END DO
!
!               X COMPONENT OF BAROCLINIC PRESSURE GRADIENT
!
  DRHODX = 0.
  DRHODY = 0.
  DO J=2,JM-1
     DO I=2,IM-1
        DRHODX(I,J,1)=GRAV*(-ZZ(1))*DU(I,J)*(RHO(I,J,1)-RHO(I-1,J,1))
     END DO
  END DO
  DO K=2,KB-1
     DO J=2,JM-1
        DO I=2,IM-1
           DRHODX(I,J,K)=DRHODX(I,J,K-1) + GRAV*.5E0*DZZ(K-1)*DU(I,J) &
                &      *(RHO(I,J,K)-RHO(I-1,J,K)+RHO(I,J,K-1)-RHO(I-1,J,K-1)) &
                &      +GRAV*.5E0*ZZ2(K)*(D(I,J)-D(I-1,J)) &
                &      *(RHO(I,J,K)+RHO(I-1,J,K)-RHO(I,J,K-1)-RHO(I-1,J,K-1))
        END DO
     END DO
  END DO
!
!               Y COMPONENT OF BAROCLINIC PRESSURE GRADIENT
!
  DO J=2,JM-1
     DO I=2,IM-1
        DRHODY(I,J,1)=GRAV*(-ZZ(1))*DV(I,J)*(RHO(I,J,1)-RHO(I,J-1,1))
     END DO
  END DO
  DO K=2,KB-1
     DO J=2,JM-1
        DO I=2,IM-1
           DRHODY(I,J,K)=DRHODY(I,J,K-1) +GRAV*.5E0*DZZ(K-1)*DV(I,J) &
                &        *(RHO(I,J,K)-RHO(I,J-1,K)+RHO(I,J,K-1)-RHO(I,J-1,K-1)) &
                &        +GRAV*.5E0*ZZ2(K)*(D(I,J)-D(I,J-1)) &
                &        *(RHO(I,J,K)+RHO(I,J-1,K)-RHO(I,J,K-1)-RHO(I,J-1,K-1)) 
        END DO
     END DO
  END DO
!
!  Include effect of internal pressure.
!
  XFACTOR = REFDENS/DX
  DELTAU = 0.
  DELTAV = 0.
  YFACTOR = REFDENS/DY
  DO K = 1,KB-1
     DO J = 2,JM-1
        DO I = 2,IM-1
           DELTAU(I,J,K) = - XFACTOR*DRHODX(I,J,K)*DU(I,J)*DUM(I,J)
           DELTAV(I,J,K) = - YFACTOR*DRHODY(I,J,K)*DV(I,J)*DVM(I,J)
        END DO
     END DO
  END DO
!
  RETURN
END SUBROUTINE INTERNAL
PROGRAM MAIN
! 
! program MAIN is the main program in
! an implementation of a sigma-coordinate model
! on the Osteroy-Byfjorden system close to Bergen, NORWAY
! 
! build a fresh bom with the commands  make clean, make mod , make.
! this must typically be done when you make changes in the modules
! or move the code to another platform. when only minor changes are
! done to the code, a single "make" will do.  
!
! 
! Variables are declared in mod_main.f90 that contains the
! application specific variables and  which uses the variables
! defined in mod_bound.f90 and state.f90
! 
  USE MOD_MAIN
  IMPLICIT NONE
!
! open all datafiles
!
  CALL FILES
!
!  Read variable and parameter settings from datafile
!
  CALL SETUP
!
!  DYPGRIN computes H, HU, HV, FSM, DUM, DVM, COR, CBC.
!  DEPTH is called from DYGRIN to compute Z,ZZ,DZ,DZR and DZZ.
!  INto DYPGRIN goes DEPMIN and NFILTER and DSBOT.
!  Out comes DEPMAX
!
  CALL DYPGRIN(DEPMIN,NFILTER,DEPMAX,DSBOT)
!
! Count the number of ocean cells, and store their locations in 2D arrays.
!
  CALL condition 
!
!  Dump H to bottom.plt for plotting in TECPLOT
!
  CALL OUTBOTTOMFEM
!
! After DEPMAX is computed from H, the Courant number may be
! computed.
!
  COURANT = (DT/N2D)*SQRT(2.*GRAV*DEPMAX)/DX
  WRITE(*,*)'The 2-D Courant number is',COURANT
  IF (COURANT.GT.1.0) THEN
    WRITE(*,*)'The 2-D Courant number is too large'
    STOP
  ENDIF
!
!   If TIDE , then initialize tidal fields.
!
  IF(TIDE) THEN
     WRITE(*,*)'THE SIMULATION INCL. ',KCON,' TIDAL CONSTITUENT(S)'
     CALL TIDEINIT
  ENDIF
! 
! FIELDINIT is called to initialize all prognostic fields.
!
  CALL FIELDINIT
!
!  Call NCALFA to compute the relaxation parameters 
!  ALPHA and ALPHAE to be
!  used in the FRS-zones at the open boundaries for the 3-D variables and
!  2-D variables respectively.
!
  CALL NCALFA
!
!  Initialize output for Tecplot.
!
  WRITE(82,*)'TITLE = "2 D Fields " '
  WRITE(82,*)'VARIABLES = "X" "Y" "ETA" "U2" "V2" "RHO2" "U5" "V5" "RHO5"  '
  CALL NRG3D(EKIN,VOLUME,MASS,EETA)
  WRITE(*,*)ISTEP,EKIN,VOLUME,MASS
  WRITE(43,*)'TITLE = "ENERGIES " '
  WRITE(43,*)'VARIABLES = "TIME" "KIN-E" "VOLUME" "MASS" "POT-E" '
  WRITE(43,*)'ZONE T="ENERGY"', 'I=',NUMSTEP+1
  WRITE(43,1005)ISTEP*DT/3600.,EKIN,VOLUME,MASS,EETA
1005 FORMAT(1X,F8.4,2X,E12.5,2X,E10.4,2X,E11.5,2X,F8.4)
  WRITE(83,*)'TITLE = "POINT " '
  WRITE(83,*)'VARIABLES = "TIME" "ETA" "U" "V" '
  WRITE(83,*)'ZONE T="POINT"', 'I=',NUMSTEP+1
  WRITE(83,1006)ISTEP*DT/(3600.*24),ETA(10,20),U(10,20,1),V(10,20,1)
  WRITE(84,*)'TITLE = "POINT2 " '
  WRITE(84,*)'VARIABLES = "TIME" "ETA" "U" "V" '
  WRITE(84,*)'ZONE T="POINT2"', 'I=',NUMSTEP+1
  WRITE(84,1006)ISTEP*DT/(3600.*24),ETA(13,11),U(13,11,1),V(13,11,1)
  WRITE(85,*)'TITLE = "POINT3 " '
  WRITE(85,*)'VARIABLES = "TIME" "ETA" "U" "V" '
  WRITE(85,*)'ZONE T="POINT3"', 'I=',NUMSTEP+1
  WRITE(85,1006)ISTEP*DT/(3600.*24),ETA(23,19),U(23,19,1),V(23,19,1)  
1006 FORMAT(1X,F8.4,2X,E11.4,2X,E10.4,2X,E10.4)
! Print sections initially
!
WRITE(91,*)'TITLE = "Section 1 " '
WRITE(91,*)'VARIABLES = "X" "Z" "U" "V" "W" "SPEED" "RHO" '
!

!##############################################################
! START TIMESTEPPING
  
  DO ISTEP = 1,NUMSTEP
    CALL CPU_TIME(T1)
!
!  Compute the time in days.
!
     TIME = DT*FLOAT(ISTEP)/86400.
     WRITE (*,*) ISTEP, "---------------------", TIME
!
!***Atmospheric part
!
    IF (WIND) THEN
        CALL WINDFORCING
    ENDIF
    IF (ATMPRESS) THEN
        CALL ATMOSP
        ETATFRS = ETATFRS + ETABFRS
    ENDIF
!
!***River runoff part.
!
    IF (RIVLOG) THEN
      CALL RIVERS(NDATE)
    ENDIF
!
!   update ndate every hour.
!
     IF(MOD(ISTEP,NDIVIS).EQ.0)THEN
        CALL POSTID4(NDATE(1),NDATE(2),NDATE(3),NDATE(4),1)
        NDATE(5)=NDATE(5)+1
     ENDIF
!
!  Update the density field.
!
     IF (UNESCO) THEN
       CALL DENSUNESCO
     ELSE
       CALL DENS
     ENDIF
!
!  Compute vertical diffusivities and viscositities
!
     CALL MY2HALV
!
!  Advect Q2 and Q2L if ADVTURB is true
!
     IF (ADVTURB) THEN
       CALL UPSTREAMQ(Q2)
       CALL UPSTREAMQ(Q2L)
     ENDIF
!
     CALL BOUND(6,NDATE)
!
!  Store old values.
!
     ETAP = ETA
!
     DELETAE = 0.
     DELETAI = 0.
!
!  ver 4.0 initialization
!
     UNM1 = UN
     UN = U
     DELUNM1 = DELUN
     DELUN = 0.
     DELUSTAR = 0.
!
     VNM1 = VN
     VN = V
     DELVNM1 = DELVN
     DELVN = 0.
     DELVSTAR = 0.
!
     SNM1 = SN
     SN = S
     DELSNM1 = DELSN
     DELSN = 0.
     DELSSTAR = 0.
!
     TNM1 = TN
     TN = T
     DELTNM1 = DELTN
     DELTN = 0.
     DELTSTAR = 0.
!
!  Take an explicit predictor step in ETA, U, V, S and T
!  and store coorrections DELETA, DELUE, DELVE, DELSE and DELTE.
!
!
!  Compute contributions from the internal pressure from old values of RHO
!                                !
     IF (INTP4) THEN
       CALL INTERNAL4
     ELSE
       CALL INTERNAL
     ENDIF
!
!  Compute contributions from the advective terms in the momentum equations
!
     CALL SUPERBEEUV
!
!  In MODESPLIT the U and V fields are split in 2-D external parts and 3-D internal parts
!  and propagated in time
!
     CALL MODESPLIT(ISTEP,NDATE,1)
!
!  Call Diagnose each NDIVISth time step to test for abnormal values.
!
!    IF (MOD(ISTEP,NDIVIS).EQ.0) THEN
       CALL DIAGNOSE(1)
!    ENDIF
     CALL BOUND(3,NDATE)
     CALL UPDATEDD
!
! Include advection and horizontal diffusivity of S and T 
!
     IF (FOURTH) THEN
       CALL ADVECT(SN,S,DELSN,SAVER,1)
       CALL ADVECT(TN,T,DELTN,TAVER,2)
     ELSE
       CALL SUPERBEEF(SN,S,DELSN,SAVER,1)
       CALL SUPERBEEF(TN,T,DELTN,TAVER,2)
     ENDIF
!
!  In 4.0 : Leapfrog predictor step.
!
     S = SNM1 + 2.0*DELSN
     T = TNM1 + 2.0*DELTN

     CALL BOUND(4,NDATE)
!    WRITE(*,*)MAXLOC(S),MAXVAL(S),MAXVAL(DELSE)
!    WRITE(*,*)MAXLOC(T),MAXVAL(T),MAXVAL(DELTE)
!
!
!  Update the density field.
!
       IF (UNESCO) THEN
         CALL DENSUNESCO
       ELSE
         CALL DENS
       ENDIF
!
!  Take an implicit corrector step in U, V, S and T
!  and store coorrections DELUI, DELVI, DELSI and DELTI.
!
!
!  Compute contributions from the internal pressure from new values of RHO
!                                !
       IF (INTP4) THEN
         CALL INTERNAL4
       ELSE
         CALL INTERNAL
       ENDIF
!
!  Compute contributions from the advective terms in the momentum equations
!
       CALL SUPERBEEUV
!
!  In MODESPLIT the U and V fields are split in 2-D external parts and 3-D internal parts
!  and propagated in time
!
!  Start from the previous water-level again 
!
       ETA = ETAP
!
       CALL MODESPLIT(ISTEP,NDATE,2)
!
       ETA = ETAP + DELETAI 
       W = WI 
!
!      WRITE(*,*)'max corr-UV',ISTEP,MAXVAL(DELUE-DELUI),MAXVAL(DELVE-DELVI)
!
!  Call Diagnose each NDIVISth time step to test for abnormal values.
!
       CALL DIAGNOSE(1)
       CALL BOUND(3,NDATE)
       CALL UPDATEDD
       IF (FOURTH) THEN
         CALL ADVECT(SN,S,DELSSTAR,SAVER,1)
         CALL ADVECT(TN,T,DELTSTAR,TAVER,2)
       ELSE
         CALL SUPERBEEF(SN,S,DELSSTAR,SAVER,1)
         CALL SUPERBEEF(TN,T,DELTSTAR,TAVER,2)
       ENDIF
!      WRITE(*,*)MAXLOC(S),MAXVAL(S),MAXVAL(DELSI)
!      WRITE(*,*)MAXLOC(T),MAXVAL(T),MAXVAL(DELTI)
!
!  In 4.0 AM-2 Corrector
!
       S = SN + (5.0/12.0)*DELSSTAR + (2.0/3.0)*DELSN - (1.0/12.0)*DELSNM1
       T = TN + (5.0/12.0)*DELTSTAR + (2.0/3.0)*DELTN - (1.0/12.0)*DELTNM1

!
!  Call WREAL to get the z-coordinate vertical velocities
!
     CALL WREAL
!
     TSURF = 0.
     SSURF = 0.
!
!  Vertical diffusion of S and T
!
     CALL VERTDIFF(S,SSURF)
     CALL VERTDIFF(T,TSURF)
     CALL BOUND(4,NDATE)
!
!  test on output
!
     CALL OUTPUT
     WRITE(*,*)'SMAX',MAXLOC(S),MAXVAL(S)
     WRITE(*,*)'SMIN',MINLOC(S),MINVAL(S)
     WRITE(*,*)'TMAX',MAXLOC(T),MAXVAL(T)
     WRITE(*,*)'TMIN',MINLOC(T),MINVAL(T)
!
!  END MAIN DO LOOP IN TIME
!
     CALL CPU_TIME(T2)
     TOTTIME=(TOTTIME+T2)-T1
     PRINT *,'This timestep:',t2-t1,' seconds'
  END DO

  PRINT*, 'CPU TIME (SECONDS) SINCE BEGINNING = ', TOTTIME

END PROGRAM MAIN

MODULE MOD_BOUND
  USE STATE
!
!FRS-zone arrays
!
  INTEGER LB
  PARAMETER (LB=7)
!
  REAL, DIMENSION(LB) :: ALPHA,ALPHAE
!
  REAL, DIMENSION(IM,JM) :: UAFRS,UATFRS,VAFRS,VATFRS, &
      & ETAFRS,ETATFRS,ETABFRS
  REAL, DIMENSION(IM,JM,KB) :: SFRS,TFRS,Q2FRS,Q2LFRS, &
      & UFRS,UTFRS,VFRS,VTFRS
!
! River values.
!
   LOGICAL RIVLOG
   INTEGER NUMC
   PARAMETER (NUMC=7)
   INTEGER, DIMENSION(NUMC) :: IRIVER,JRIVER,KRIVER1,KRIVER2,CODERIVER
   REAL, DIMENSION(NUMC) :: SRIVER,TRIVER,FRIVER,DZRIVER
!
! Tidal variables
!
   LOGICAL TIDE
   INTEGER KCON
   PARAMETER (KCON = 4)
   REAL FREQ(KCON)
   REAL, DIMENSION(IM,JM,KCON) :: ETATAMP,ETATPHA,UATAMP, &
       & UATPHA,VATAMP,VATPHA 
!
!  Atmospheric forcing variables
!
   LOGICAL WIND,ATMPRESS
   REAL, DIMENSION(IM,JM) :: WSPEEDU,WSPEEDV
!
END MODULE MOD_BOUND 
SUBROUTINE MODESPLIT(ISTEP,NDATE,IDX)
!
! MODESPLIT propagates the solution of the equations
!
! d(UD)/dt = -g*D*d(eta)/dx + f*V*D + d((KM/D)*(dU/dsigma))/dsigma +
!       d(AM*(d(U*D)/dy))/dy + d(AM*(d(U*D)/dx))/dx + deltaU 
!
! d(VD)/dt = -g*D*d(eta)/dy - f*U*D + d((KM/D)*(dV/dsigma))/dsigma +
!       d(AM*(d(V*D)/dx))/dx + d(AM*(d(V*D)/dy))/dy + deltaV 
!
! d(eta)/dt = -d(UA)/dx -d(VA)/dy
!
! with a time split method.
!
! The Depth integrated versions of these equations are
! propagated with a number of shorter timesteps (DTE).
! The Baroclinic remainders, UBCLIN and VBCLIN, are
! then propagated with a longer time step (DT). 
! U and V are then computed as the sums of the barotropic
! the baroclinic contributions.
!
! deltaU and deltaV are the sums of internal pressure terms and
! non-linear terms computed before the call to MODESPLIT
! by the routines INTERNAL and LAXWUV.
!
! The order in which the U and V equations are propagated
! is symmetric over a double step both in the barotropic
! steps and in the baroclinic steps.
!
! UA and VA are the depth integrated transports in
! x and y direction respectively.
!
!
USE MOD_BOUND
IMPLICIT NONE
INTEGER ISTEP,NDATE(5),IDX
!
! Local variables.
!
INTEGER I,J,K
REAL RX,RY,AREA
REAL, DIMENSION(IM,JM,KB) :: UV,VU,UBCLIN,VBCLIN,C3U,C3V
REAL, DIMENSION(IM,JM) :: AX,AY,UV2D,VU2D,UASUM,VASUM
REAL, DIMENSION(IM,JM) :: CORU,CORV
REAL, DIMENSION(IM,JM) :: C2U,C2V
REAL, DIMENSION(IM,JM) :: UAD,VAD,UASTAR,VASTAR,ETASTAR
REAL, DIMENSION(IM,JM) :: UAF,UAB,VAF,VAB,ETAB,ETAF
INTEGER IS
REAL DTE,FRAC
!
DTE = DT/N2D
RX = DTE/DX
RY = DTE/DY
!
!
!  Depth integrate the corrections DELTAU and DELTAV
!
AX = 0.
DO J = 1,JM
  DO I = 1,IM
    IF (DUM(I,J).NE.0.) THEN
      DO K = 1,KB-1
        AX(I,J) = AX(I,J)+DUM(I,J)*DELTAU(I,J,K)*DZ(K)
      END DO
    ENDIF
  END DO
END DO
AY = 0.
DO J = 1,JM
  DO I = 1,IM
    IF (DVM(I,J).NE.0.) THEN
      DO K = 1,KB-1
        AY(I,J) = AY(I,J)+DVM(I,J)*DELTAV(I,J,K)*DZ(K)
      END DO
    ENDIF 
  END DO
END DO
!
!
! Depth integrate U and V
!
UA = 0.
DO K = 1,KB-1
  DO J = 1,JM
    DO I = 1,IM
      UA(I,J) = UA(I,J) + DUM(I,J)*UN(I,J,K)*DZ(K)
    END DO
  END DO
END DO
!
VA = 0.
DO K = 1,KB-1
  DO J = 1,JM
    DO I = 1,IM
      VA(I,J) = VA(I,J) + DVM(I,J)*VN(I,J,K)*DZ(K)
    END DO
  END DO
END DO
!
!  Compute the baroclinic parts of U and V
!
UBCLIN = 0.
VBCLIN = 0.
DO K = 1,KB-1
  DO J = 1,JM
    DO I = 1,IM
      UBCLIN(I,J,K) = UN(I,J,K) - UA(I,J)
      VBCLIN(I,J,K) = VN(I,J,K) - VA(I,J)
    END DO
  END DO
END DO
!
!  2-D loop N2D times
UASUM = 0.
VASUM = 0.
UAB = UA
VAB = VA
ETAB = ETA
UASTAR = UA
VASTAR = VA
ETASTAR = ETA
UAF = UA
VAF = VA
ETAF = ETA
!
DO IS = 1,N2D
!
!  If TIDE, then update the BCs every 2D time step.
!
  IF (TIDE) THEN
    CALL TIDEFRS(IS)
  ENDIF
!
!  River Specific
!
  UAD = 0.
  VAD = 0.
  IF (RIVLOG) THEN
    DO I = 1,NUMC
      IF (CODERIVER(I).EQ.1) THEN
        UAD(IRIVER(I),JRIVER(I)) = FRIVER(I)/DY
      ELSEIF (CODERIVER(I).EQ.2) THEN
        VAD(IRIVER(I),JRIVER(I)) = FRIVER(I)/DX
      ELSEIF (CODERIVER(I).EQ.3) THEN
        UAD(IRIVER(I)+1,JRIVER(I)) = -FRIVER(I)/DY
      ELSEIF (CODERIVER(I).EQ.4) THEN
        VAD(IRIVER(I),JRIVER(I)+1) = -FRIVER(I)/DX
      ELSE
        WRITE(*,*)'ERROR IN MODESPLIT-1'
        WRITE(*,*)I,CODERIVER(I)
        STOP
      ENDIF
    END DO
  ENDIF
!
! Compute contributions horizontal viscosity.
!
  IF (SMAG) THEN
    CALL SMAGOR2D
  ENDIF
  IF (VISCPOM) THEN
     CALL HORVISCUV2DPOM(C2U,C2V)
  ELSE
     CALL HORVISCUV2D(C2U,C2V)
  ENDIF
!
!
!  Add effects of wind stress and bottom friction and AX to C2U.
!
  DO J = 2,JM-1
    DO I = 2,IM
      C2U(I,J) = WUSURF(I,J)+WUBOT(I,J) + AX(I,J) + C2U(I,J)
    END DO
  END DO
!
! Add effects of wind stress and bottom friction and AY to C2V.
!
  DO J = 2,JM
     DO I = 2,IM-1
      C2V(I,J) = WVSURF(I,J)+WVBOT(I,J) + AY(I,J) + C2V(I,J)
     END DO
  END DO
!
!  Compute VA*D in U-points
!
  VU2D = 0.
!
! DO J = 2,JM-1
!   DO I = 2,IM
!     VU2D(I,J) = 0.25*(DV(I,J+1)*VA(I,J+1)+DV(I,J)*VA(I,J)+&
!          &  DV(I-1,J+1)*VA(I-1,J+1)+DV(I-1,J)*VA(I-1,J))
!   END DO
! END DO
!$omp parallel do
  DO J = 2,JM-1
     DO I = 2,IM
        IF (DUM(I,J).GT.0.) THEN
           IF (DVM(I,J+1).GT.0.) THEN
              VU2D(I,J) = VA(I,J+1)*DV(I,J+1)/HVSQR(I,J+1)
           ENDIF
           IF (DVM(I,J).GT.0.) THEN
              VU2D(I,J) = VU2D(I,J) + VA(I,J)*DV(I,J)/HVSQR(I,J)
           ENDIF
           IF (DVM(I-1,J+1).GT.0.) THEN
              VU2D(I,J) = VU2D(I,J) + VA(I-1,J+1)*DV(I-1,J+1)/HVSQR(I-1,J+1)
           ENDIF
           IF (DVM(I-1,J).GT.0.) THEN
              VU2D(I,J) = VU2D(I,J) + VA(I-1,J)*DV(I-1,J)/HVSQR(I-1,J)
           ENDIF
           VU2D(I,J) = 0.25*VU2D(I,J)*HUSQR(I,J)
        ENDIF
     END DO
  END DO

!
!Define U*D in V-points.
!
  UV2D = 0.
! DO J = 2,JM
!   DO I = 2,IM-1
!     UV2D(I,J) = 0.25*(DU(I+1,J)*UA(I+1,J)+DU(I,J)*UA(I,J)+&
!          & DU(I+1,J-1)*UA(I+1,J-1)+DU(I,J-1)*UA(I,J-1))
!   END DO
! END DO
!$omp parallel do
  DO J = 2,JM
     DO I = 2,IM-1
        IF (DVM(I,J).NE.0.) THEN
           IF (DUM(I+1,J).NE.0.) THEN
              UV2D(I,J) = UA(I+1,J)*DU(I+1,J)/HUSQR(I+1,J)
           ENDIF
           IF (DUM(I,J).NE.0.) THEN
              UV2D(I,J) = UV2D(I,J) + UA(I,J)*DU(I,J)/HUSQR(I,J)
           ENDIF
           IF (DUM(I+1,J-1).NE.0.) THEN
              UV2D(I,J) = UV2D(I,J) + UA(I+1,J-1)*DU(I+1,J-1)/HUSQR(I+1,J-1)
           ENDIF
           IF (DUM(I,J-1).NE.0.) THEN
              UV2D(I,J) = UV2D(I,J) + UA(I,J-1)*DU(I,J-1)/HUSQR(I,J-1)
           ENDIF
           UV2D(I,J) = 0.25*UV2D(I,J)*HVSQR(I,J)
        ENDIF
     END DO
  END DO
!
!  IF IS = 1, Compute solution at next time step with a predictor-corrector method similar to the trapzoidal method.
!
IF (IS.EQ.1) THEN
!
! Propagate the solution taking all terms into account.
!
  DO J = 2,JM-1
    DO I = 2,IM
      CORU(I,J) = COR(I,J)*VU2D(I,J) - GRAV*DU(I,J)* &
           &  (ETA(I,J)-ETA(I-1,J))/DX + C2U(I,J)
    END DO
  END DO
  DO J = 2,JM-1
    DO I = 2,IM
      IF (DUM(I,J).NE.0.) THEN
         UASTAR(I,J) = UA(I,J) + DTE*CORU(I,J)/DU(I,J)
      ENDIF
    END DO
  END DO
!
!  Then the V-equation to compute VASTAR.
!
!
  DO J = 2,JM
    DO I = 2,IM-1
      CORV(I,J) = -COR(I,J)*UV2D(I,J) - GRAV*DV(I,J)* &
           &  (ETA(I,J)-ETA(I,J-1))/DY +  C2V(I,J)
    END DO
  END DO
  DO J = 2,JM
    DO I = 2,IM-1
      IF (DVM(I,J).NE.0.) THEN
         VASTAR(I,J) = VA(I,J) + DTE*CORV(I,J)/DV(I,J)
      ENDIF
    END DO
  END DO
!
!
!
! Compute horizontal transports
!
  DO J = 2,JM-1
    DO I = 2,IM
      IF (DUM(I,J).NE.0.) THEN
        UAD(I,J) = UA(I,J)*DU(I,J)
      ENDIF
    END DO
  END DO
  DO J = 2,JM
    DO I = 2,IM-1
      IF (DVM(I,J).NE.0.) THEN
        VAD(I,J) = VA(I,J)*DV(I,J)
      ENDIF
    END DO
  END DO
!
!Then  the continuity eqn.
!
  DO J = 2,JM-1
    DO I = 2,IM-1
      ETASTAR(I,J) = ETA(I,J)-   &
     &  RX*(UAD(I+1,J)-UAD(I,J))- RY*(VAD(I,J+1)-VAD(I,J))
      ETASTAR(I,J) = ETASTAR(I,J)*FSM(I,J)
    END DO
  END DO
!
ELSE ! IF IS > 1
!
! Propagate the solution taking all terms into account.
! First a leapfrog predictor step
!
  DO J = 2,JM-1
    DO I = 2,IM
      CORU(I,J) = COR(I,J)*VU2D(I,J) - GRAV*DU(I,J)* &
           &  (ETA(I,J)-ETA(I-1,J))/DX + C2U(I,J)
    END DO
  END DO
  DO J = 2,JM-1
    DO I = 2,IM
      IF (DUM(I,J).NE.0.) THEN
         UASTAR(I,J) = UAB(I,J) + 2*DTE*CORU(I,J)/DU(I,J)
      ENDIF
    END DO
  END DO
!
!  Then the V-equation to compute VASTAR.
!
!
  DO J = 2,JM
    DO I = 2,IM-1
      CORV(I,J) = -COR(I,J)*UV2D(I,J) - GRAV*DV(I,J)* &
           &  (ETA(I,J)-ETA(I,J-1))/DY +  C2V(I,J)
    END DO
  END DO
  DO J = 2,JM
    DO I = 2,IM-1
      IF (DVM(I,J).NE.0.) THEN
         VASTAR(I,J) = VAB(I,J) + 2*DTE*CORV(I,J)/DV(I,J)
      ENDIF
    END DO
  END DO
!
!
!
! Compute horizontal transports
!
  DO J = 2,JM-1
    DO I = 2,IM
      IF (DUM(I,J).NE.0.) THEN
        UAD(I,J) = UA(I,J)*DU(I,J)
      ENDIF
    END DO
  END DO
  DO J = 2,JM
    DO I = 2,IM-1
      IF (DVM(I,J).NE.0.) THEN
        VAD(I,J) = VA(I,J)*DV(I,J)
      ENDIF
    END DO
  END DO
!
!Then  the continuity eqn.
!
  DO J = 2,JM-1
    DO I = 2,IM-1
      ETASTAR(I,J) = ETAB(I,J)-   &
     &  2*RX*(UAD(I+1,J)-UAD(I,J))- 2*RY*(VAD(I,J+1)-VAD(I,J))
      ETASTAR(I,J) = ETASTAR(I,J)*FSM(I,J)
    END DO
  END DO
ENDIF
!
!  Boundary conditions for the intermediate values of ETA, UA and VA
!
CALL BOUND2D(ETASTAR,UASTAR,VASTAR)
!
!
!  Then a corrector step with the theta- method
!
!
!  First in UA
!
!
!  Compute VA*D in U-points
!
  VU2D = 0.
! DO J = 2,JM-1
!   DO I = 2,IM
!     VU2D(I,J) = 0.25*(DV(I,J+1)*(THETA2D*VASTAR(I,J+1) + (1-THETA2D)*VA(I,J+1)) + &
!        & DV(I,J)*(THETA2D*VASTAR(I,J) + (1-THETA2D)*VA(I,J)) + &
!       &  DV(I-1,J+1)*(THETA2D*VASTAR(I-1,J+1) + (1-THETA2D)*VA(I-1,J+1)) + &
!       &  DV(I-1,J)*(THETA2D*VASTAR(I-1,J) + (1-THETA2D)*VA(I-1,J)))
!   END DO
! END DO
!
!$omp parallel do
  DO J = 2,JM-1
     DO I = 2,IM
        IF (DUM(I,J).GT.0.) THEN
           IF (DVM(I,J+1).GT.0.) THEN
              VU2D(I,J) = (THETA2D*VASTAR(I,J+1) + (1-THETA2D)*VA(I,J+1))*DV(I,J+1)/HVSQR(I,J+1)
           ENDIF
           IF (DVM(I,J).GT.0.) THEN
              VU2D(I,J) = VU2D(I,J) + (THETA2D*VASTAR(I,J) + (1-THETA2D)*VA(I,J))*DV(I,J)/HVSQR(I,J)
           ENDIF
           IF (DVM(I-1,J+1).GT.0.) THEN
              VU2D(I,J) = VU2D(I,J) + (THETA2D*VASTAR(I-1,J+1) + (1-THETA2D)*VA(I-1,J+1))*DV(I-1,J+1)/HVSQR(I-1,J+1)
           ENDIF
           IF (DVM(I-1,J).GT.0.) THEN
              VU2D(I,J) = VU2D(I,J) + (THETA2D*VASTAR(I-1,J) + (1-THETA2D)*VA(I-1,J))*DV(I-1,J)/HVSQR(I-1,J)
           ENDIF
           VU2D(I,J) = 0.25*VU2D(I,J)*HUSQR(I,J)
        ENDIF
     END DO
  END DO

!
! Propagate the solution taking all terms into account.
!
  DO J = 2,JM-1
    DO I = 2,IM
      CORU(I,J) = COR(I,J)*VU2D(I,J) - GRAV*DU(I,J)* &
           &  (THETA2D*(ETASTAR(I,J)-ETASTAR(I-1,J)) + &
           &   (1-THETA2D)*(ETA(I,J)-ETA(I-1,J)))/DX + C2U(I,J)
    END DO
  END DO
  DO J = 2,JM-1
    DO I = 2,IM
      IF (DUM(I,J).NE.0.) THEN
         UAF(I,J) = UA(I,J) + DTE*CORU(I,J)/DU(I,J)
      ENDIF
    END DO
  END DO
!
!
!  Then the VA-eqn.
!
  UV2D = 0.
! DO J = 2,JM
!   DO I = 2,IM-1
!     UV2D(I,J) = 0.25*(DU(I+1,J)*(THETA2D*UASTAR(I+1,J) + (1-THETA2D)*UA(I+1,J)) + &
!          & DU(I,J)*(THETA2D*UASTAR(I,J) + (1-THETA2D)*UA(I,J)) + &
!          & DU(I+1,J-1)*(THETA2D*UASTAR(I+1,J-1) + (1-THETA2D)*UA(I+1,J-1)) + &
!          & DU(I,J-1)*(THETA2D*UASTAR(I,J-1) + (1-THETA2D)*UA(I,J-1)))
!   END DO
! END DO
!
!$omp parallel do
  DO J = 2,JM
     DO I = 2,IM-1
        IF (DVM(I,J).NE.0.) THEN
           IF (DUM(I+1,J).NE.0.) THEN
              UV2D(I,J) = (THETA2D*UASTAR(I+1,J) + (1-THETA2D)*UA(I+1,J))*DU(I+1,J)/HUSQR(I+1,J)
           ENDIF
           IF (DUM(I,J).NE.0.) THEN
              UV2D(I,J) = UV2D(I,J) + (THETA2D*UASTAR(I,J) + (1-THETA2D)*UA(I,J))*DU(I,J)/HUSQR(I,J)
           ENDIF
           IF (DUM(I+1,J-1).NE.0.) THEN
              UV2D(I,J) = UV2D(I,J) + (THETA2D*UASTAR(I+1,J-1) + (1-THETA2D)*UA(I+1,J-1))*DU(I+1,J-1)/HUSQR(I+1,J-1)
           ENDIF
           IF (DUM(I,J-1).NE.0.) THEN
              UV2D(I,J) = UV2D(I,J) + (THETA2D*UASTAR(I,J-1) + (1-THETA2D)*UA(I,J-1))*DU(I,J-1)/HUSQR(I,J-1)
           ENDIF
           UV2D(I,J) = 0.25*UV2D(I,J)*HVSQR(I,J)
        ENDIF
     END DO
  END DO
!
!
  DO J = 2,JM
    DO I = 2,IM-1
      CORV(I,J) = -COR(I,J)*UV2D(I,J) - GRAV*DV(I,J)* &
           &  (THETA2D*(ETASTAR(I,J)-ETASTAR(I,J-1)) + &
           &   (1-THETA2D)*(ETA(I,J)-ETA(I,J-1)))/DY +  C2V(I,J)
    END DO
  END DO
  DO J = 2,JM
    DO I = 2,IM-1
      IF (DVM(I,J).NE.0.) THEN
         VAF(I,J) = VA(I,J) + DTE*CORV(I,J)/DV(I,J)
      ENDIF
    END DO
  END DO
!
!
!  Finally the ETA-eqn.
!
!
!
! Compute horizontal transports
!
  DO J = 2,JM-1
    DO I = 2,IM
      IF (DUM(I,J).NE.0.) THEN
        UAD(I,J) = (THETA2D*UASTAR(I,J) + (1-THETA2D)*UA(I,J))*DU(I,J)
      ENDIF
    END DO
  END DO
  DO J = 2,JM
    DO I = 2,IM-1
      IF (DVM(I,J).NE.0.) THEN
        VAD(I,J) = (THETA2D*VASTAR(I,J) + (1-THETA2D)*VA(I,J))*DV(I,J)
      ENDIF
    END DO
  END DO
!
!Then  the continuity eqn.
!
  DO J = 2,JM-1
    DO I = 2,IM-1
      ETAF(I,J) = ETA(I,J)-   &
     &  RX*(UAD(I+1,J)-UAD(I,J))- RY*(VAD(I,J+1)-VAD(I,J))
      ETAF(I,J) = ETAF(I,J)*FSM(I,J)
    END DO
  END DO
!
!  Boundary values for the final values at time step n+1
!
  CALL BOUND2D(ETAF,UAF,VAF)
!
  UASUM = UASUM + THETA2D*UASTAR + (1-THETA2D)*UA
  VASUM = VASUM + THETA2D*VASTAR + (1-THETA2D)*VA
  UAB = UA
  UA = UAF
  VAB = VA
  VA = VAF
  ETAB = ETA
  ETA = ETAF
!
!  End 2-D loop
!
END DO
!
UASUM = UASUM/N2D
VASUM = VASUM/N2D
!
!
! Compute the divergence free velocity fields.
!
UADV = 0.
VADV = 0.
DO K = 1,KB-1
  DO J = 1,JM
    DO I = 1,IM
      UADV(I,J,K) = UBCLIN(I,J,K) + UASUM(I,J)
      VADV(I,J,K) = VBCLIN(I,J,K) + VASUM(I,J)
    END DO
  END DO
END DO
!
IF (SMAG) THEN
  CALL SMAGOR
ENDIF
IF (VISCPOM) THEN
  CALL HORVISCUVPOM(UBCLIN,VBCLIN,C3U,C3V)
ELSE 
  CALL HORVISCUV(UBCLIN,VBCLIN,C3U,C3V)
ENDIF
IF (MOD(ISTEP,2).EQ.1) THEN
   CALL STEPU3D(UBCLIN,VBCLIN,C3U,AX)
   CALL STEPV3D(UBCLIN,VBCLIN,C3V,AY)
ELSE
   CALL STEPV3D(UBCLIN,VBCLIN,C3V,AY)
   CALL STEPU3D(UBCLIN,VBCLIN,C3U,AX)
END IF
!
!  Include the effects of vertical viscosity on UBCLIN and VBCLIN
!
CALL VERTVISCUVB(UBCLIN,VBCLIN)
!  
!  After VERTVISCUVB the vertical integrals of UBCLIN and VBCLIN
!  are expected to be non-zero due to surface and bottom stress.
!  This is corrected for in the following loops.
!
DO J = 2,JM-1
  DO I = 2,IM
    IF (DUM(I,J).NE.0.) THEN
      DO K = 1,KB-1
        UBCLIN(I,J,K) = UBCLIN(I,J,K) - DT*(WUBOT(I,J)+WUSURF(I,J))/DU(I,J)
        U(I,J,K) = UBCLIN(I,J,K) + UA(I,J)
      END DO
    ENDIF
  END DO
END DO
DO J = 2,JM
  DO I = 2,IM-1
    IF (DVM(I,J).NE.0.) THEN
      DO K = 1,KB-1
        VBCLIN(I,J,K) = VBCLIN(I,J,K) - DT*(WVBOT(I,J)+WVSURF(I,J))/DV(I,J)
        V(I,J,K) = VBCLIN(I,J,K) + VA(I,J)
      END DO
    ENDIF
  END DO
END DO
!
!   compute the sigma-coord. vertical velocity W
!   from the equation
! 
!   d(W)/d(sigma) = -(d(eta)/d(T) + d(U*D)/d(X) + d(V*D)/d(Y)) .
!
!
AREA = DX*DY
!
!   Compute the horisontal fluxes.
!
!   d(U*D)/d(X) times DX*DY
!
UV = 0.
VU = 0.
!
DO J = 1,JM
  DO I = 1,IM
    UV(I,J,1) = DZ(1)*UADV(I,J,1)
    DO K = 2,KB-1
      UV(I,J,K) = UV(I,J,K-1) + DZ(K)*UADV(I,J,K)
    END DO
  END DO
END DO
UV = UV*DY
!
DO K = 1,KB-1
  DO J = 1,JM
    DO I = 1,IM
      UV(I,J,K) = UV(I,J,K)*DU(I,J)
    END DO
  END DO
END DO
!
!   d(V*D)/d(Y) times DX*DY
!
DO J = 1,JM
  DO I = 1,IM
    VU(I,J,1) = DZ(1)*VADV(I,J,1)
    DO K = 2,KB-1
      VU(I,J,K) = VU(I,J,K-1) + DZ(K)*VADV(I,J,K)
    END DO
  END DO
END DO
VU = VU*DX
DO K = 1,KB-1
  DO J = 1,JM
    DO I = 1,IM
      VU(I,J,K) = VU(I,J,K)*DV(I,J)
    END DO
  END DO
END DO
!
!  River spesific
!
IF (RIVLOG) THEN
  DO I = 1,NUMC
    IF (CODERIVER(I).EQ.1) THEN
      FRAC = DZ(1)/DZRIVER(I)
      UV(IRIVER(I),JRIVER(I),1) = FRAC*FRIVER(I)
      IF (KRIVER2(I).GT.1) THEN
        DO K = 2,KRIVER2(I)
          FRAC = DZ(K)/DZRIVER(I)
          UV(IRIVER(I),JRIVER(I),K) = UV(IRIVER(I),JRIVER(I),K-1) + &
     &                                   FRAC*FRIVER(I)
        END DO
      ENDIF
      IF (KRIVER2(I).LT.KB-1) THEN
        DO K = KRIVER2(I)+1,KB-1
          UV(IRIVER(I),JRIVER(I),K) = UV(IRIVER(I),JRIVER(I),KRIVER2(I))
        END DO
      ENDIF
    ELSEIF (CODERIVER(I).EQ.2) THEN
      FRAC = DZ(1)/DZRIVER(I)
      VU(IRIVER(I),JRIVER(I),1) = FRAC*FRIVER(I)
      IF (KRIVER2(I).GT.1) THEN
        DO K = 2,KRIVER2(I)
          FRAC = DZ(K)/DZRIVER(I)
          VU(IRIVER(I),JRIVER(I),K) = VU(IRIVER(I),JRIVER(I),K-1) + &
     &                                   FRAC*FRIVER(I)
        END DO
      ENDIF
      IF (KRIVER2(I).LT.KB-1) THEN
        DO K = KRIVER2(I)+1,KB-1
          VU(IRIVER(I),JRIVER(I),K) = VU(IRIVER(I),JRIVER(I),KRIVER2(I))
        END DO
      ENDIF
    ELSEIF (CODERIVER(I).EQ.3) THEN
      FRAC = DZ(1)/DZRIVER(I)
      UV(IRIVER(I)+1,JRIVER(I),1) = -FRAC*FRIVER(I)
      IF (KRIVER2(I).GT.1) THEN
        DO K = 2,KRIVER2(I)
          FRAC = DZ(K)/DZRIVER(I)
          UV(IRIVER(I)+1,JRIVER(I),K) = UV(IRIVER(I)+1,JRIVER(I),K-1) - &
     &                                   FRAC*FRIVER(I)
        END DO
      ENDIF
      IF (KRIVER2(I).LT.KB-1) THEN
        DO K = KRIVER2(I)+1,KB-1
          UV(IRIVER(I)+1,JRIVER(I),K) = UV(IRIVER(I)+1,JRIVER(I),KRIVER2(I))
        END DO
      ENDIF
    ELSEIF (CODERIVER(I).EQ.4) THEN
      FRAC = DZ(1)/DZRIVER(I)
      VU(IRIVER(I),JRIVER(I)+1,1) = -FRAC*FRIVER(I)
      IF (KRIVER2(I).GT.1) THEN
        DO K = 2,KRIVER2(I)
          FRAC = DZ(K)/DZRIVER(I)
          VU(IRIVER(I),JRIVER(I)+1,K) = VU(IRIVER(I),JRIVER(I)+1,K-1) - &
     &                                   FRAC*FRIVER(I)
        END DO
      ENDIF
      IF (KRIVER2(I).LT.KB-1) THEN
        DO K = KRIVER2(I)+1,KB-1
          VU(IRIVER(I),JRIVER(I)+1,K) = VU(IRIVER(I),JRIVER(I)+1,KRIVER2(I))
        END DO
      ENDIF
    ENDIF
  END DO
ENDIF
!WP = W
!
!   W = 0 for sigma = 0.
!
W(1:IM,1:JM,1) = 0.
!
!   Compute W from the equation
!   d(w)/d(sigma) = -(d(eta)/d(T) + d(U*D)/d(X) + d(V*D)/d(Y)) .
!
DO K = 1,KB-1
  DO J = 1,JM-1
    DO I = 1,IM-1
      W(I,J,K+1) = (UV(I+1,J,K) - UV(I,J,K) + &
     &             VU(I,J+1,K)-VU(I,J,K))/AREA + &
     &             ((-Z(K+1))*(ETA(I,J)-ETAP(I,J)))/DT
    END DO
  END DO
END DO
!
!  save corrections.
!
IF (IDX.EQ.1) THEN
  DELETAE = ETA - ETAP
  WE = W
  UADVE = UADV
  VADVE = VADV
!
!  version 4.0
!
  DELUN = U - UN
  U = UNM1 + 2.0*DELUN
  DELVN = V - VN
  V = VNM1 + 2.0*DELVN
ELSEIF (IDX.EQ.2) THEN
  DELETAI = ETA - ETAP
  WI = W
!
! version 4.0
!
  DELUSTAR = U - UN
  U = UN + (5.0/12.0)*DELUSTAR + (2.0/3.0)*DELUN - (1.0/12.0)*DELUNM1
  DELVSTAR = V - VN
  V = VN + (5.0/12.0)*DELVSTAR + (2.0/3.0)*DELVN - (1.0/12.0)*DELVNM1
!

ELSE
  WRITE(*,*)'ERROR IN MODETHETA',IDX
  STOP
ENDIF
!
RETURN
END
! a module containing case specific variables for bom 
! Variables used by Main.f90 and some utility routines are defined here
! subroutine

! INTEGERS:
!   NUMSTEP  : The number of 3-D time steps.
!   ISTART(4) : Start time in year,month,day and hour
!   NDATE(5)  : Running time in year,month,day,hour and hour since start
!   TIME      : Time in days since start.
!

MODULE MOD_MAIN
  USE MOD_BOUND
  INTEGER ISTEP,NUMSTEP,K,I,J
  INTEGER NFILTER
  REAL DEPMIN,DEPMAX,DSBOT
  REAL COURANT
  INTEGER NDATE(5),ISTART(4)
  INTEGER IYEAR,IMONTH,IDAY
  REAL TIME
  REAL EKIN,VOLUME,MASS,EETA
  REAL ZLEVEL
  
  REAL :: T1=0.0, T2=0.0, TOTTIME=0.0
  
  REAL U2(IM,JM),V2(IM,JM),RHO2(IM,JM),U5(IM,JM),V5(IM,JM),RHO5(IM,JM)

  LOGICAL :: TECPLOT=.true.
  
END MODULE MOD_MAIN


SUBROUTINE MY2HALV
  USE STATE
  IMPLICIT NONE
  INTEGER I,J,K,pt
  REAL, DIMENSION(IM,JM,KB) :: PROD,DVELDZ,DRHODZ,L,Q3,PRODIMP
  REAL, DIMENSION(KB-2) :: RHS,A,B,C,ALF,BET,G

  REAL A1,A2,B1,B2,C1,EPS,E1,E2,KAPPA,SQ,B123,DSQ,LDIST,wall,gh,SH,SM,Q,QL
  REAL COEFF1,COEFF2,COEFF3,COEFF4,COEFF5
  REAL KQMIN
  PARAMETER (KQMIN= 1.E-5)
!
  DATA A1/0.92/
  DATA A2/0.74/
  DATA B1/16.6/
  DATA B2/10.1/
  DATA C1/0.08/
  DATA EPS/1.E-11/
  DATA E1/1.8/
  DATA E2/1.33/
  DATA KAPPA/0.40/
  DATA SQ/0.20/
!
  PROD = 0.
  L = 0.
  Q3 = 0.
  DVELDZ = 0.
  DRHODZ = 0.
  WALL = 0.
  GH = 0.
  SM = 0.
  SM = 0.
  Q = 0.
  QL = 0.
  PRODIMP = 0.
  B123 = B1**0.6666667

!$OMP PARALLEL DO PRIVATE(I,J,K) FIRSTPRIVATE(EPS)
  DO J = 1,JM
     DO K = 1,KB
        DO I = 1,IM
           Q2(I,J,K) = MAX(EPS,Q2(I,J,K))
           Q2L(I,J,K) = MAX(EPS,Q2L(I,J,K))
        END DO
     END DO
  END DO

!
!  Define Q2 at the surface from Q2 = B1**(2/3)*|WUSURFACE|**2
!  Define Q2 at the bottom from Q2 = B1**(2/3)*|WUBOT|**2
!
!
!$OMP PARALLEL DO PRIVATE(I,J,pt) FIRSTPRIVATE(B123,indc2)
  DO pt=1,numcp2
     i=indc2(1,pt)
     j=indc2(2,pt)
!DO J = 1,JM-1
!  DO I = 1,IM-1
!    IF (FSM(I,J).NE.0.) THEN
     Q2(I,J,1) = B123*SQRT((.5*(WUSURF(I,J)+WUSURF(I+1,J)))**2 + &
          &               (.5*(WVSURF(I,J)+WVSURF(I,J+1)))**2)
     Q2(I,J,KB) = B123*SQRT((.5*(WUBOT(I,J)+WUBOT(I+1,J)))**2 + &
          &               (.5*(WVBOT(I,J)+WVBOT(I,J+1)))**2)
!    ENDIF
!  END DO
  END DO
!
!  Define production of Q2 from the term
!  2*KM*((du/dz)**2 + (dv/dz)**2)
!
!$OMP PARALLEL DO PRIVATE(I,J,K) firstprivate(indc2)
  DO pt=1,numcp2
     i=indc2(1,pt)
     j=indc2(2,pt)
!DO J = 1,JM-1
!  DO I = 1,IM-1
!    IF (FSM(I,J).NE.0.) THEN
     DO K = 2,KB-1
        DVELDZ(I,J,K) = 0.25*KM(I,J,K)* &
             &       ( (U(I,J,K)-U(I,J,K-1)+U(I+1,J,K)-U(I+1,J,K-1))**2 &
             &         +(V(I,J,K)-V(I,J,K-1)+V(I,J+1,K)-V(I,J+1,K-1))**2 ) &
             &              /(DZZ(K-1)*D(I,J))**2
        PROD(I,J,K) = 2*DVELDZ(I,J,K)
     END DO
!    ENDIF
!  END DO
  END DO
!
!   Add production/loss of Q2 from (2*g/RHO0)*KH*(dRHO/dz).

!$OMP PARALLEL DO PRIVATE(I,J,K,pt) FIRSTPRIVATE(EPS,indc2)
  DO pt=1,numcp2
     i=indc2(1,pt)
     j=indc2(2,pt)
!DO J = 1,JM-1
!  DO I = 1,IM-1
!    IF (FSM(I,J).NE.0.) THEN
     DO K = 2,KB-1
        DRHODZ(I,J,K) = (GRAV/RHO0)* &
             &       (RHO(I,J,K-1)-RHO(I,J,K))/(DZZ(K-1)*D(I,J))
        IF (DRHODZ(I,J,K).LE.0.) THEN
           PRODIMP(I,J,K) = 2*KH(I,J,K)*DRHODZ(I,J,K)/(Q2(I,J,K)+EPS)
        ELSE
           PROD(I,J,K) = PROD(I,J,K) + 2*KH(I,J,K)*DRHODZ(I,J,K)
           PRODIMP(I,J,K) = 0.
        ENDIF
     END DO
!    ENDIF
!  END DO
  END DO
!
!   Subtract loss of kinetic energy (implicit).
!
!$OMP PARALLEL DO PRIVATE(I,J,K) FIRSTPRIVATE(EPS,indc2)
  DO pt=1,numcp2
     i=indc2(1,pt)
     j=indc2(2,pt)
!DO J = 1,JM-1
!  DO I = 1,IM-1
!    IF (FSM(I,J).NE.0.) THEN
     DO K = 2,KB-1
        L(I,J,K) = Q2L(I,J,K)/(Q2(I,J,K) + EPS)
        Q3(I,J,K) = Q2(I,J,K)*SQRT(Q2(I,J,K))
        PRODIMP(I,J,K) = 2*Q3(I,J,K)/(B1*Q2L(I,J,K) + EPS) - PRODIMP(I,J,K)
     END DO
!    ENDIF
!  END DO
  END DO
!
!  Solve the equation
!  d(Q2)/dt = d(KQ d(Q2)/dz)/dz + PROD
!  with the fully implicit method.
!
!$omp parallel do private(i,j,k,pt,dsq,rhs,a,b,c,alf,bet,g) &
!$omp firstprivate(dt,dz,dzz,indc)
  DO pt=1,numcp
     i=indc(1,pt)
     j=indc(2,pt)
!DO J = 2,JM-1
!  DO I = 2,IM-1
!    IF (FSM(I,J).NE.0.) THEN
     DSQ = D(I,J)*D(I,J)
!
! Define the right hand side of the solution matrix.
!
     DO K = 2,KB-1
        RHS(K-1) = Q2(I,J,K) + DT*PROD(I,J,K) 
     END DO
     RHS(1) = RHS(1) + DT*0.5*(KQ(I,J,1)+KQ(I,J,2))* &
          &      Q2(I,J,1)/(DZ(1)*DZZ(1)*DSQ)
     RHS(KB-2) = RHS(KB-2) + DT*0.5*(KQ(I,J,KB)+KQ(I,J,KB-1))* &
          &      Q2(I,J,KB)/(DZ(KB-1)*DZZ(KB-2)*DSQ)
!
! Define the upper diagonal elements of the tridiagonal solution matrix.
!
     DO K = 2,KB-2
        B(K-1) = -DT*0.5*(KQ(I,J,K+1)+KQ(I,J,K))/(DSQ*DZ(K)*DZZ(K-1))
     END DO
!
! Define the lower diagonal elements.
!
     DO K = 3,KB-1
        C(K-1) = -DT*0.5*(KQ(I,J,K-1)+KQ(I,J,K))/(DSQ*DZ(K-1)*DZZ(K-1))
     END DO
!
! Define the diagonal elements.
!
     A(1) = 1. - B(1)
     DO K = 2,KB-3
        A(K) = 1. - B(K) - C(K)
     END DO
     A(KB-2) = 1. - C(KB-2)
     DO K = 1,KB-2
        A(K) = A(K) + DT*PRODIMP(I,J,K+1)
     END DO
!
! Solve the system of equations.
!
     ALF(1) = A(1)
     DO K = 2,KB-2
        ALF(K) = A(K) - C(K)*B(K-1)/ALF(K-1)
     END DO
     DO K = 2,KB-2
        BET(K) = C(K)/ALF(K-1)
     END DO
!
!   Forward substitute the right hand side.
!
     G(1) = RHS(1)
     DO K = 2,KB-2
        G(K) = RHS(K) - BET(K)*G(K-1)
     END DO
!
!   Back substitute to compute the solution Q2.
!
     Q2(I,J,KB-1) = G(KB-2)/ALF(KB-2)
     DO K = KB-3,1,-1
        Q2(I,J,K+1) = (G(K) - B(K)*Q2(I,J,K+2))/ALF(K)
     END DO
!
!    ENDIF
!  END DO
  END DO
!
!  Q2 must be non-negative.
!
!$OMP PARALLEL DO PRIVATE(i,j,k,pt) FIRSTPRIVATE(EPS,indc2)
  DO pt=1,numcp2
     i=indc2(1,pt)
     j=indc2(2,pt)
!DO J = 1,JM-1
!  DO I = 1,IM-1
!    IF (FSM(I,J).NE.0.) THEN
     DO K = 1,KB
        Q2(I,J,K) = MAX(EPS,Q2(I,J,K))
     END DO
!    ENDIF
!  END DO
  END DO
!
! Then update Q2L at timestep n+1.
!
! First define the boundary values at the surface and the bottom.
!
!$OMP PARALLEL DO PRIVATE(i,j)
  DO J = 1,JM
     DO I = 1,IM
!   Q2L(I,J,1) = 0.0246*Q2(I,J,1)*WSPEED10(I,J)**2
        Q2L(I,J,1) = 0.0
        Q2L(I,J,kb) = 0.0    
     END DO
  END DO
!
!
!  Define production of Q2L from the term
!  L*E1*KM*((du/dz)**2 + (dv/dz)**2)
!
!$OMP PARALLEL DO PRIVATE(I,J,K) FIRSTPRIVATE(E1,indc2)
  DO pt=1,numcp2
     i=indc2(1,pt)
     j=indc2(2,pt)
!DO J = 1,JM-1
!  DO I = 1,IM-1
!    IF (FSM(I,J).NE.0.) THEN
     DO K = 2,KB-1
        PROD(I,J,K) = L(I,J,K)*E1*DVELDZ(I,J,K)
     END DO
!    ENDIF
!  END DO
  END DO
!
!   Add production/loss of Q2L from (l*E1*g/RHO0)*KH*(dRHO/dz).
!
!$OMP PARALLEL DO PRIVATE(I,J,K) FIRSTPRIVATE(E1,EPS,indc2)
  DO pt=1,numcp2
     i=indc2(1,pt)
     j=indc2(2,pt)
!DO J = 1,JM-1
!  DO I = 1,IM-1
!    IF (FSM(I,J).NE.0.) THEN
     DO K = 2,KB-1
        IF (DRHODZ(I,J,K).LE.0.) THEN
           PRODIMP(I,J,K) = L(I,J,K)*E1*KH(I,J,K)*DRHODZ(I,J,K)/(Q2L(I,J,K)+EPS)
        ELSE
           PROD(I,J,K) = PROD(I,J,K) + L(I,J,K)*E1*KH(I,J,K)*DRHODZ(I,J,K)
           PRODIMP(I,J,K) = 0.
        ENDIF
     END DO
!    ENDIF
!  END DO
  END DO
!
! Subtract loss of Q2L from -Q3*WALL/B1 (Implicit)
!
!$OMP PARALLEL DO PRIVATE(I,J,K,LDIST,wall) FIRSTPRIVATE(E2,KAPPA,B1,EPS,indc2)
  DO pt=1,numcp2
     i=indc2(1,pt)
     j=indc2(2,pt)
!DO J = 1,JM-1
!  DO I = 1,IM-1
!    IF (FSM(I,J).NE.0.) THEN
     DO K = 2,KB-1
        LDIST = 1./(Z(1)-Z(K)) + 1./(Z(K)-Z(KB))
        LDIST = (1./LDIST)*D(I,J)
        WALL = 1. + E2*(L(I,J,K)/(KAPPA*LDIST))**2
        PRODIMP(I,J,K) =  Q3(I,J,K)*WALL/(B1*Q2L(I,J,K) + EPS) - PRODIMP(I,J,K)
     END DO
!    ENDIF
!  END DO
  END DO
!
!
!  Solve the equation
!  d(Q2L)/dt = d(KQ d(Q2L)/dz)/dz + PROD
!  with the fully implicit method.
!
!$omp parallel do private(i,j,k,dsq,rhs,a,b,c,alf,bet,g) &
!$omp firstprivate(dt,dz,dzz,indc)
  DO pt=1,numcp     
     i=indc(1,pt)
     j=indc(2,pt)
!DO J = 2,JM-1
!  DO I = 2,IM-1
!    IF (FSM(I,J).NE.0.) THEN
     DSQ = D(I,J)*D(I,J)
!
! Define the right hand side of the solution matrix.
!
     DO K = 2,KB-1
        RHS(K-1) = Q2L(I,J,K) + DT*PROD(I,J,K) 
     END DO
     RHS(1) = RHS(1) + DT*0.5*(KQ(I,J,1)+KQ(I,J,2))* &
          &      Q2L(I,J,1)/(DZ(1)*DZZ(1)*DSQ)
     RHS(KB-2) = RHS(KB-2) + DT*0.5*(KQ(I,J,KB)+KQ(I,J,KB-1))* &
          &      Q2L(I,J,KB)/(DZ(KB-1)*DZZ(KB-2)*DSQ)
!
! Define the upper diagonal elements of the tridiagonal solution matrix.
!
     DO K = 2,KB-2
        B(K-1) = -DT*0.5*(KQ(I,J,K+1)+KQ(I,J,K))/(DSQ*DZ(K)*DZZ(K-1))
     END DO
!
! Define the lower diagonal elements.
!
     DO K = 3,KB-1
        C(K-1) = -DT*0.5*(KQ(I,J,K-1)+KQ(I,J,K))/(DSQ*DZ(K-1)*DZZ(K-1))
     END DO
!
! Define the diagonal elements.
!
     A(1) = 1. - B(1)
     DO K = 2,KB-3
        A(K) = 1. - B(K) - C(K)
     END DO
     A(KB-2) = 1. - C(KB-2)
     DO K = 1,KB-2
        A(K) = A(K) + DT*PRODIMP(I,J,K+1)
     END DO
!
! Solve the system of equations.
!
     ALF(1) = A(1)
     DO K = 2,KB-2
        ALF(K) = A(K) - C(K)*B(K-1)/ALF(K-1)
     END DO
     DO K = 2,KB-2
        BET(K) = C(K)/ALF(K-1)
     END DO
!
!   Forward substitute the right hand side.
!
     G(1) = RHS(1)
     DO K = 2,KB-2
        G(K) = RHS(K) - BET(K)*G(K-1)
     END DO
!
!   Back substitute to compute the solution Q2L.
!
     Q2L(I,J,KB-1) = G(KB-2)/ALF(KB-2)
     DO K = KB-3,1,-1
        Q2L(I,J,K+1) = (G(K) - B(K)*Q2L(I,J,K+2))/ALF(K)
     END DO
!
!    ENDIF
!  END DO
  END DO
!
! Q2L must be non-negative.
!
!$OMP PARALLEL DO PRIVATE(I,J,K) FIRSTPRIVATE(EPS)
  DO pt=1,numcp2
     i=indc2(1,pt)
     j=indc2(2,pt)
!DO J = 1,JM-1
!  DO I = 1,IM-1
!    IF (FSM(I,J).NE.0.) THEN
     DO K = 2,KB-1
        Q2L(I,J,K) = MAX(EPS,Q2L(I,J,K))
     END DO
!    ENDIF
!  END DO
  END DO

!
!  SH*(1-(3*A2*B2+18*A1*A2)*GH) = A2*(1-6*A1/B1)
!
  COEFF1 = A2*(1. - 6.*A1/B1)
  COEFF2 = 3*A2*B2 + 18.*A1*A2
  COEFF3 = A1*(1. - 3*C1 - 6*A1/B1)
  COEFF4 = 18.*A1**2 + 9*A1*A2
  COEFF5 = 9.*A1*A2

! Compute the Richardson number GH.
!
!$omp parallel do private(i,j,gh,sh,sm,q,ql) &
!$omp firstprivate(sq,eps,coeff1,coeff2,coeff3,coeff4,coeff5)
  DO pt=1,numcp2
     i=indc2(1,pt)
     j=indc2(2,pt)
!DO J = 1,JM-1
!  DO I = 1,IM-1
!    IF (FSM(I,J).NE.0.) THEN
     DO K = 1,KB-1
        L(I,J,K) = Q2L(I,J,K)/(Q2(I,J,K)+EPS)
        GH = (L(I,J,K)**2/(Q2(I,J,K)+EPS))*DRHODZ(I,J,K)
        GH = MIN(GH,0.028)
        SH = COEFF1/(1. - COEFF2*GH)
        SM = (COEFF3+COEFF4*SH*GH)/(1.-COEFF5*GH)
        Q = SQRT(Q2(I,J,K))
        QL = Q*L(I,J,K)
        KM(I,J,K) = 0.5*(QL*SM+KM(I,J,K))
        KH(I,J,K) = 0.5*(QL*SH+KH(I,J,K))
        KQ(I,J,K) = 0.5*(QL*SQ+KQ(I,J,K))        
     END DO
!    ENDIF
!  END DO
  END DO
!
!   Compute KM,KH,KQ.
!
!DO J = 1,JM-1
!  DO I = 1,IM-1
!    IF (FSM(I,J).NE.0.) THEN
!      DO K = 1,KB-1
!      END DO
!    ENDIF
!  END DO
!END DO
!
!$OMP PARALLEL DO PRIVATE(I,J,K) FIRSTPRIVATE(KMMIN,KHMIN,indc)
  DO pt=1,numcp
     i=indc(1,pt)
     j=indc(2,pt)
!DO J = 2,JM-1
!  DO I = 2,IM-1
!     IF (FSM(I,J).NE.0.) THEN
     DO K = 2,KB-1
        KM(I,J,K) = MAX(KMMIN,KM(I,J,K))
        KH(I,J,K) = MAX(KHMIN,KH(I,J,K))
        KQ(I,J,K) = MAX(KQMIN,KQ(I,J,K))
     END DO
!     ENDIF
!  END DO
  END DO
!
  RETURN
END SUBROUTINE MY2HALV
SUBROUTINE NCALFA
!***BEGIN PROLOGUE NCALFA
!
!          This routine was originally written by Harald
!          Engedal, The Norwegian Meteorological Institute,
!          Box 320, 0314 Oslo 3, NORWAY.
!
!          NCALFA is later revised by
!            Jarle Berntsen 
!          Latest revision 140799
!
!
! ******************************************************************
!
!-----------------------------------------------------------------------
!  COMPUTES THE RELAXATION PARAMETERS USED BY THE FLOW RELAXATION SCHEME IN THE
!  BOUNDARY ZONES.
!  HERE : *** ALFA-2 (HYPERBOLIC REPR.) ***
!-----------------------------------------------------------------------
!
!***END PROLOGUE NCALFA
!
!   Common variables
!
USE MOD_BOUND
IMPLICIT NONE
!
!   Local variables
!
INTEGER I,JJ
REAL X,IK
REAL DTE0,DTE,DTEETA
REAL KAPPA(LB)
!
!***********************************************************************
!**                  THE RELAXATION PARAMETER                         **
!***********************************************************************
!
!   COMPUTES THE RELAXATION FACTOR "ALFA" FOR ONE COLUMN IN THE
!   I (X) -DIRECTION AND FOR ONE COLUMN IN THE J (Y) -DIRECTION. THEN,
!   THESE VALUES ARE FILLED INTO THE REST OF THE ARRAY "ALFA".
!
DO I = 1,LB-1
  JJ=I-1
  X=TANH(0.5*JJ)
  ALPHA(I)=1.0-X
END DO
ALPHA(LB)=0.
ALPHAE(1)=1.0
ALPHAE(LB)=0.
!JB
!   We assume that these alfas are appropriate for DT = DTE0
!   and compute corresponding kappas.
!JB
!  Approx. DTE0 = DX/SQRT(2*G*DEPMAX)
!
DTE0 = 1.0
!
DO I = 2,LB-1
  KAPPA(I) = ALPHA(I)/(DTE0*(1.0-ALPHA(I)))
END DO
!JB
!   Then recompute the alfas for the actual value of DT
!   First ALPHA that is to be used for 3-D variables.
!JB
DO I = 2,LB-1
  ALPHA(I) = KAPPA(I)*DT/(1.+KAPPA(I)*DT)
END DO
!
!  Then ALPHAE to be used in 2-D external time steps.
!
DTE = DT/N2D
DO I = 2,LB-1
  ALPHAE(I) = KAPPA(I)*DTE/(1.+KAPPA(I)*DTE)
END DO
WRITE(*,*)'THE alphas'
DO I = 1,LB
  WRITE(*,*)I,ALPHA(I),ALPHAE(I)
END DO
!
RETURN
END
SUBROUTINE NRG3D(EKIN,VOLUME,MASS,EETA)
  USE STATE
  IMPLICIT NONE
  REAL EKIN,VOLUME,MASS,EETA
  INTEGER I,J,K
!
!Compute Volume, Potental energy 
!
  VOLUME=0.
  EKIN=0.
  MASS = 0.
  EETA = 0.
  
!$OMP PARALLEL DO REDUCTION(+:VOLUME) REDUCTION(+:EETA)  
  DO J = 1,JM
      DO I = 1,IM
          IF (FSM(I,J).GT.0.) THEN
              VOLUME = VOLUME + D(I,J)
              EETA = EETA + ETA(I,J)*ETA(I,J)
          END IF
      END DO
  END DO

!$OMP PARALLEL DO REDUCTION(+:MASS) REDUCTION(+:EKIN)    
  DO K = 1,KB-1
      DO J = 2,JM
          DO I = 2,IM
              IF (FSM(I,J).GT.0.) THEN  
                  MASS = MASS + (RHO(I,J,K)+RHOAVER+1000.)*D(I,J)*DZ(K)
              ENDIF
              IF (DUM(I,J).GT.0.) THEN
                  EKIN = EKIN + 0.5*(RHO(I,J,K)+RHO(I-1,J,K)+2*RHOAVER+2000.)* &
                       &            DZ(K)*DU(I,J)*U(I,J,K)*U(I,J,K)
              ENDIF
              IF (DVM(I,J).GT.0.) THEN
                  EKIN = EKIN + 0.5*(RHO(I,J,K)+RHO(I,J-1,K)+2*RHOAVER+2000.)*  &
                       &            DZ(K)*DV(I,J)*V(I,J,K)*V(I,J,K)
              ENDIF
          END DO
      END DO
  END DO

  VOLUME = VOLUME*DX*DY
  EKIN = EKIN*0.5*DX*DY/VOLUME
  MASS = DX*DY*MASS/VOLUME
  EETA = EETA*0.5*GRAV*1025.*DX*DY/VOLUME
!
  RETURN
END SUBROUTINE NRG3D
SUBROUTINE OUTBOTTOMFEM
USE STATE
IMPLICIT NONE
INTEGER I,J
REAL, DIMENSION(:,:), ALLOCATABLE :: NODES
INTEGER, DIMENSION(:,:), ALLOCATABLE :: ELEMENTS
INTEGER, DIMENSION(:,:,:), ALLOCATABLE :: CELLS
INTEGER MAXNODES,MAXEL
PARAMETER (MAXNODES=4*IM*JM , MAXEL = 2*IM*JM)
INTEGER NUMNODES,NUMEL
!
WRITE(81,*)'TITLE = "bottom matrix-fem" '
WRITE(81,*)'VARIABLES = "X" "Y" "H" '
!
ALLOCATE (NODES(4,MAXNODES), ELEMENTS(MAXEL,4) , CELLS(0:IM+1,0:JM+1,4) )
NUMNODES = 0
NUMEL = 0
NODES = 0
ELEMENTS = 0
NODES = 0.
CELLS = 0.
!
!
!  Finally the interior
DO I = 1,IM
  DO J = 1,JM
    IF (FSM(I,J).NE.0.) THEN
        CALL ADD1(MAXNODES,MAXEL,NUMNODES,NUMEL,NODES,ELEMENTS,IM,JM,I,J,H,CELLS)
    ENDIF
  END DO
END DO
DO I = 1,NUMNODES
  NODES(3,I) = NODES(3,I)/NODES(4,I)
END DO
!
WRITE(81,*)'ZONE N=',NUMNODES,',E=',NUMEL,', F=FEPOINT, ET=QUADRILATERAL'
DO I = 1,NUMNODES
  WRITE(81,*)NODES(1,I),NODES(2,I),NODES(3,I)
END DO
WRITE(81,*)
DO I = 1,NUMEL
  WRITE(81,*)ELEMENTS(I,1),ELEMENTS(I,2),ELEMENTS(I,3),ELEMENTS(I,4)
END DO
    


!
DEALLOCATE (NODES,ELEMENTS,CELLS)
!
RETURN 
END
SUBROUTINE OUTETAFEM
USE MOD_MAIN
IMPLICIT NONE
REAL, DIMENSION(:,:), ALLOCATABLE :: NODES
INTEGER, DIMENSION(:,:), ALLOCATABLE :: ELEMENTS
INTEGER, DIMENSION(:,:,:), ALLOCATABLE :: CELLS
INTEGER MAXNODES,MAXEL
PARAMETER (MAXNODES=4*IM*JM , MAXEL = 2*IM*JM)
INTEGER NUMNODES,NUMEL
!
!
ALLOCATE (NODES(10,MAXNODES), ELEMENTS(MAXEL,4) , CELLS(0:IM+1,0:JM+1,4) )
NUMNODES = 0
NUMEL = 0
NODES = 0
ELEMENTS = 0
NODES = 0.
CELLS = 0.
!
!
DO I = 1,IM
  DO J = 1,JM
    IF (FSM(I,J).NE.0.) THEN
        CALL ADDETA(MAXNODES,MAXEL,NUMNODES,NUMEL,NODES,ELEMENTS,IM,JM,I,J,ETA, &
     &       U2,V2,RHO2,U5,V5,RHO5,CELLS)
    ENDIF
  END DO
END DO
DO I = 1,NUMNODES
  NODES(3,I) = NODES(3,I)/NODES(10,I)
  NODES(4,I) = NODES(4,I)/NODES(10,I)
  NODES(5,I) = NODES(5,I)/NODES(10,I)
  NODES(6,I) = NODES(6,I)/NODES(10,I)
  NODES(7,I) = NODES(7,I)/NODES(10,I)
  NODES(8,I) = NODES(8,I)/NODES(10,I)
  NODES(9,I) = NODES(9,I)/NODES(10,I)
END DO
!
WRITE(82,*)'ZONE T="',ISTEP,'" N=',NUMNODES,',E=',NUMEL,', F=FEPOINT, ET=QUADRILATERAL'
DO I = 1,NUMNODES
  WRITE(82,*)NODES(1,I),NODES(2,I),NODES(3,I),NODES(4,I),NODES(5,I),NODES(6,I),NODES(7,I),NODES(8,I),NODES(9,I)
END DO
WRITE(82,*)
DO I = 1,NUMEL
  WRITE(82,*)ELEMENTS(I,1),ELEMENTS(I,2),ELEMENTS(I,3),ELEMENTS(I,4)
END DO
    
!
DEALLOCATE (NODES,ELEMENTS,CELLS)
!
RETURN 
END
SUBROUTINE OUTPUT
  USE MOD_MAIN
  IMPLICIT NONE
!
!  For each time step print out energies ++
!
  IF (MOD(ISTEP,1).EQ.0) THEN
    WRITE(*,*)ISTEP,MAXLOC(U),MAXVAL(U)
    WRITE(*,*)ISTEP,MAXLOC(S),MAXVAL(S)
    CALL NRG3D(EKIN,VOLUME,MASS,EETA)
    WRITE(*,*)ISTEP,EKIN,VOLUME,MASS
!   WRITE(*,*)ETA(1,13),ETA(4,13),ETA(10,13)
!   WRITE(*,*)UA(1,14),UA(4,14),UA(10,14)
!   WRITE(*,*)U(1,13,KB-2),U(2,13,KB-2),U(3,13,KB-2)
!   WRITE(*,*)U(1,14,KB-2),U(2,14,KB-2),U(3,14,KB-2)
    WRITE(43,1005)ISTEP*DT/(3600.*24.),EKIN,VOLUME,MASS,EETA
    WRITE(83,1006)ISTEP*DT/(3600.*24.),ETA(10,20),U(10,20,1),V(10,20,1)
    WRITE(84,1006)ISTEP*DT/(3600.*24),ETA(13,11),U(13,11,1),V(13,11,1)
    WRITE(85,1006)ISTEP*DT/(3600.*24),ETA(23,19),U(23,19,1),V(23,19,1)
  ENDIF
1005 FORMAT(1X,F8.4,2X,E12.5,2X,E10.4,2X,E11.5,2X,F8.4)
1006 FORMAT(1X,F8.4,2X,E11.4,2X,E10.4,2X,E10.4)

  IF (MOD(ISTEP,(6*NDIVIS)).EQ.0) THEN
!
!   Compute velocities and RHO at 2m depth and at 5m depth
!
    CALL PZLEVEL
    CALL OUTETAFEM
!
!
!  Dump data along a section from the open boundary to Arnavaagen
!
    CALL OUTSECTIONS
  ENDIF
  IF (ISTEP.EQ.1) THEN
     WRITE(86,*)'TITLE = "ARNA " '
     WRITE(86,*)'VARIABLES = "TIME" "S" "ETA" "U" "V" '
     WRITE(86,*)'ZONE T="ARNA"', 'I=',NUMSTEP
  ENDIF
  I = 24
  J = 16
  WRITE(86,*)ISTEP,S(I,J,1),ETA(I,J),U(I,J,1),V(I,J+1,1)
!
END SUBROUTINE OUTPUT 
SUBROUTINE OUTSECTIONS
USE MOD_MAIN
IMPLICIT NONE
!
REAL AX,AY,BX,BY
INTEGER MAXSEC
PARAMETER (MAXSEC=200)
REAL USEC(MAXSEC,KB),VSEC(MAXSEC,KB),WSEC(MAXSEC,KB), &
     &     SSEC(MAXSEC,KB),RHOSEC(MAXSEC,KB), &
     &     SECDEP(MAXSEC),SECLEN(MAXSEC)
REAL USECTOT(MAXSEC,KB),VSECTOT(MAXSEC,KB),WSECTOT(MAXSEC,KB), &
     &     SSECTOT(MAXSEC,KB),RHOSECTOT(MAXSEC,KB), &
     &     SECDEPTOT(MAXSEC),SECLENTOT(MAXSEC)
INTEGER NSEC,NSECTOT
INTEGER NUMNODES,NUMEL
REAL XX
INTEGER ICELL,JCELL,IFAIL
!
! Define section follow the fjord system from the opening at I = 1, J = 14
! to the river at Arna.
!
AX = 0.
AY = 13.5
BX = 9.0
BY = 13.5
CALL SECTIO(AX,AY,BX,BY,IM,JM,KB,H,U,V,WR,S,RHO, &
     &  DX,DY,DZ,USEC,VSEC,WSEC,SSEC,RHOSEC,SECDEP,SECLEN,MAXSEC, &
     &           NSEC,IFAIL)
WRITE(*,*)'UT AV SECTIO-1',NSEC,IFAIL
NSECTOT = NSEC
!
!  Save values for the first part of the section
!
DO I = 1,NSEC
  SECDEPTOT(I) = SECDEP(I)
  SECLENTOT(I) = SECLEN(I)
  DO K = 1,KB
    USECTOT(I,K) = USEC(I,K)
    VSECTOT(I,K) = VSEC(I,K)
    WSECTOT(I,K) = WSEC(I,K)
    SSECTOT(I,K) = SSEC(I,K)
    RHOSECTOT(I,K) = RHOSEC(I,K)
  END DO
END DO
!
!  Take the next part
!
BX = 9.0
BY = 19.5
AX = 9.0
AY = 13.5
CALL SECTIO(AX,AY,BX,BY,IM,JM,KB,H,U,V,WR,S,RHO, &
     &  DX,DY,DZ,USEC,VSEC,WSEC,SSEC,RHOSEC,SECDEP,SECLEN,MAXSEC, &
     &           NSEC,IFAIL)
WRITE(*,*)'UT AV SECTIO-2',NSEC,IFAIL
!
!  Save values 
!
DO I = 1,NSEC
  SECDEPTOT(NSECTOT+I) = SECDEP(I)
  SECLENTOT(NSECTOT+I) = SECLEN(I)
  DO K = 1,KB
    USECTOT(NSECTOT+I,K) = USEC(I,K)
    VSECTOT(NSECTOT+I,K) = VSEC(I,K)
    WSECTOT(NSECTOT+I,K) = WSEC(I,K)
    SSECTOT(NSECTOT+I,K) = SSEC(I,K)
    RHOSECTOT(NSECTOT+I,K) = RHOSEC(I,K)
  END DO
END DO
NSECTOT = NSECTOT + NSEC
!
!  Take the third part
!
AX = 9.0
AY = 19.5
BX = 20.5
BY = 19.5
CALL SECTIO(AX,AY,BX,BY,IM,JM,KB,H,U,V,WR,S,RHO, &
     &  DX,DY,DZ,USEC,VSEC,WSEC,SSEC,RHOSEC,SECDEP,SECLEN,MAXSEC, &
     &           NSEC,IFAIL)
WRITE(*,*)'UT AV SECTIO-3',NSEC,IFAIL
!
!  Save values 
!
DO I = 1,NSEC
  SECDEPTOT(NSECTOT+I) = SECDEP(I)
  SECLENTOT(NSECTOT+I) = SECLEN(I)
  DO K = 1,KB
    USECTOT(NSECTOT+I,K) = USEC(I,K)
    VSECTOT(NSECTOT+I,K) = VSEC(I,K)
    WSECTOT(NSECTOT+I,K) = WSEC(I,K)
    SSECTOT(NSECTOT+I,K) = SSEC(I,K)
    RHOSECTOT(NSECTOT+I,K) = RHOSEC(I,K)
  END DO
END DO
NSECTOT = NSECTOT + NSEC
!
!  Take the final step into Arnavaagen
!
BX = 23.5
BY = 15.5
AX = 20.5
AY = 19.5
CALL SECTIO(AX,AY,BX,BY,IM,JM,KB,H,U,V,WR,S,RHO, &
     &  DX,DY,DZ,USEC,VSEC,WSEC,SSEC,RHOSEC,SECDEP,SECLEN,MAXSEC, &
     &           NSEC,IFAIL)
WRITE(*,*)'UT AV SECTIO-4',NSEC,IFAIL
!
!  Save values 
!
DO I = 1,NSEC
  SECDEPTOT(NSECTOT+I) = SECDEP(I)
  SECLENTOT(NSECTOT+I) = SECLEN(I)
  DO K = 1,KB
    USECTOT(NSECTOT+I,K) = USEC(I,K)
    VSECTOT(NSECTOT+I,K) = VSEC(I,K)
    WSECTOT(NSECTOT+I,K) = WSEC(I,K)
    SSECTOT(NSECTOT+I,K) = SSEC(I,K)
    RHOSECTOT(NSECTOT+I,K) = RHOSEC(I,K)
  END DO
END DO
NSECTOT = NSECTOT + NSEC
!
!
SECDEP = SECDEPTOT
SECLEN = SECLENTOT
USEC = USECTOT
VSEC = VSECTOT
WSEC = WSECTOT
SSEC = SSECTOT
RHOSEC = RHOSECTOT + 1000.
NSEC = NSECTOT
!

NUMNODES = KB*(NSEC+1)
NUMEL = NSEC*(KB-1)
WRITE(91,*)'ZONE T= " ',ISTEP,'" , N=',NUMNODES,',E=',NUMEL,', F=FEPOINT, ET=QUADRILATERAL'
XX = 0.
I = 1
K = 1
WRITE(91,1001)XX,Z(K)*SECDEP(I),USEC(I,K),VSEC(I,K),WSEC(I,K),SSEC(I,K),RHOSEC(I,K)+RHOAVER
DO K = 2,KB-1
  WRITE(91,1001)XX,Z(K)*SECDEP(I),0.5*(USEC(I,K-1)+USEC(I,K)),0.5*(VSEC(I,K-1)+VSEC(I,K)),0.5*(WSEC(I,K-1)+WSEC(I,K)), &
  &   0.5*(SSEC(I,K-1)+SSEC(I,K)),0.5*(RHOSEC(I,K-1)+RHOSEC(I,K))+RHOAVER
END DO
K = KB
WRITE(91,1001)XX,Z(K)*SECDEP(I),USEC(I,K-1),VSEC(I,K-1),WSEC(I,K-1),SSEC(I,K-1),RHOSEC(I,K-1)+RHOAVER
DO I = 2,NSEC
  K = 1 
  XX = XX + SECLEN(I-1)/1000.
  WRITE(91,1001)XX,Z(K)*0.5*(SECDEP(I)+SECDEP(I-1)),0.5*(USEC(I,K)+USEC(I-1,K)), &
    & 0.5*(VSEC(I,K)+VSEC(I-1,K)),0.5*(WSEC(I,K)+WSEC(I-1,K)),0.5*(SSEC(I,K)+SSEC(I-1,K)),  &
    & 0.5*(RHOSEC(I,K)+RHOSEC(I-1,K))+RHOAVER
  DO K = 2,KB-1
    WRITE(91,1001)XX,Z(K)*0.5*(SECDEP(I)+SECDEP(I-1)),  &
    &  0.25*(USEC(I,K)+USEC(I-1,K)+USEC(I,K-1)+USEC(I-1,K-1)), &
    &  0.25*(VSEC(I,K)+VSEC(I-1,K)+VSEC(I,K-1)+VSEC(I-1,K-1)), &
    &  0.25*(WSEC(I,K)+WSEC(I-1,K)+WSEC(I,K-1)+WSEC(I-1,K-1)), &
    &  0.25*(SSEC(I,K)+SSEC(I-1,K)+SSEC(I,K-1)+SSEC(I-1,K-1)),  &
    &  0.25*(RHOSEC(I,K)+RHOSEC(I-1,K)+RHOSEC(I,K-1)+RHOSEC(I-1,K-1))+RHOAVER
  END DO
  K = KB
  WRITE(91,1001)XX,Z(K)*0.5*(SECDEP(I)+SECDEP(I-1)),0.5*(USEC(I,K-1)+USEC(I-1,K-1)), &
    & 0.5*(VSEC(I,K-1)+VSEC(I-1,K-1)),0.5*(WSEC(I,K-1)+WSEC(I-1,K-1)),0.5*(SSEC(I,K-1)+SSEC(I-1,K-1)),  &
    & 0.5*(RHOSEC(I,K-1)+RHOSEC(I-1,K-1))+RHOAVER
END DO
I = NSEC
XX = XX + SECLEN(I)/1000.
K = 1
WRITE(91,1001)XX,Z(K)*SECDEP(I),USEC(I,K),VSEC(I,K),WSEC(I,K),SSEC(I,K),RHOSEC(I,K)+RHOAVER
DO K = 2,KB-1
  WRITE(91,1001)XX,Z(K)*SECDEP(I),0.5*(USEC(I,K-1)+USEC(I,K)),0.5*(VSEC(I,K-1)+VSEC(I,K)),0.5*(WSEC(I,K-1)+WSEC(I,K)), &
  &   0.5*(SSEC(I,K-1)+SSEC(I,K)),0.5*(RHOSEC(I,K-1)+RHOSEC(I,K))+RHOAVER
END DO
K = KB
WRITE(91,1001)XX,Z(K)*SECDEP(I),USEC(I,K-1),VSEC(I,K-1),WSEC(I,K-1),SSEC(I,K-1),RHOSEC(I,K-1)+RHOAVER
!
! Then write the elements node numbers
!
DO I = 1,NSEC
  DO K = 1,KB-1
    WRITE(91,1002)(I-1)*KB+K,(I-1)*KB+K+1,I*KB+K+1,I*KB+K
  END DO
END DO
!
! Define section 2. 
!
1001 FORMAT(1X,F8.2,1X,F8.2,1X,F8.4,1X,E10.3,1X,F7.3,1X,F8.3,1X,F8.3)
1002 FORMAT(4(1X,I5))
!

RETURN
END

      SUBROUTINE POSTID4(IAAR,MD,IDAG,IT,IDT)
!----------------------------------------------------------------------
!   BEREGNER DATO OG KL FOR ET TIDSPUNGT SOM LIGGER 'IDT' TIMER ETTER
!   INNGANGS DATOEN
!--------------------------------------------------------------------
!
!   Global variables.
!
      INTEGER IAAR,MD,IDAG,IT,IDT
!
!   Local variables.
!
      INTEGER ND(12),LY
!
      DATA ND/31,28,31,30,31,30,31,31,30,31,30,31/
      ND(2)=28
!     CHECK IF LEAP YEAR.
      LY=IAAR-(IAAR/4)*4
      IF(LY.EQ.0) ND(2)=29
!
      IT=IT + IDT
100   CONTINUE
      IF(IT.LT.24) GO TO 999
      IT = IT - 24
      IDAG=IDAG+1
      IF(IDAG.LE.ND(MD)) GO TO 100
      IDAG=1
      MD=MD+1
      IF(MD.LE.12) GO TO 100
      MD=1
      IAAR=IAAR+1
      GO TO 100
999   CONTINUE
      RETURN
      END
SUBROUTINE PZLEVEL
!
!  S-points at the depth ZLEVEL
!  to the file with Unit number IUNIT
USE MOD_MAIN
IMPLICIT NONE
!
REAL, DIMENSION(IM,JM,KB) :: UIS,VIS
REAL, DIMENSION(IM,JM) :: UZ,VZ,RHOZ
REAL FRACZ
!
! Average U and V to S-points.
!
UIS = U
VIS = V
DO J = 1,JM-1
  DO I = 1,IM-1
    IF (FSM(I,J).NE.0.) THEN
      DO K = 1,KB-1
        UIS(I,J,K) = 0.5*(U(I,J,K)+U(I+1,J,K))
        VIS(I,J,K) = 0.5*(V(I,J,K)+V(I,J+1,K))
      END DO
    ENDIF
  END DO
END DO
!
ZLEVEL = 2.
!
! Compute S, T, U, V and WR at depth ZLEVEL
!
UZ = SPV
VZ = SPV
RHOZ = SPV
DO J = 1,JM
  DO I = 1,IM
    IF (FSM(I,J).NE.0.) THEN
      IF (ZLEVEL.LE.-(ZZ(1)*D(I,J)+ETA(I,J)) ) THEN
        UZ(I,J) = UIS(I,J,1)
        VZ(I,J) = VIS(I,J,1)
        RHOZ(I,J) = RHO(I,J,1) + RHOAVER 
      ELSEIF (ZLEVEL.GT.H(I,J) ) THEN
        UZ(I,J) = SPV
        VZ(I,J) = SPV
        RHOZ(I,J) = SPV
      ELSEIF (ZLEVEL.GE.-(ZZ(KB-1)*D(I,J)+ETA(I,J)) ) THEN
        UZ(I,J) = UIS(I,J,KB-1)
        VZ(I,J) = VIS(I,J,KB-1)
        RHOZ(I,J) = RHO(I,J,KB-1) + RHOAVER 
!
!  Else we interpolate linearly between the layers.
!
      ELSE
        DO K = 1,KB-2
          IF (ZLEVEL.GT.-(ZZ(K)*D(I,J)+ETA(I,J)) .AND. &
            & ZLEVEL.LE.-(ZZ(K+1)*D(I,J)+ETA(I,J))  ) THEN
            FRACZ = (ZLEVEL+(ZZ(K)*D(I,J)+ETA(I,J))) /  &
                  & ((-ZZ(K+1)+ZZ(K))*D(I,J))
            UZ(I,J) = (1.-FRACZ)*UIS(I,J,K) + FRACZ*UIS(I,J,K+1)
            VZ(I,J) = (1.-FRACZ)*VIS(I,J,K) + FRACZ*VIS(I,J,K+1)
            RHOZ(I,J) = (1.-FRACZ)*RHO(I,J,K) + FRACZ*RHO(I,J,K+1)
            RHOZ(I,J) = RHOZ(I,J) + RHOAVER 
            GO TO 100
          ENDIF
        END DO
100     CONTINUE
      ENDIF
    ENDIF
  END DO
END DO
!
!
U2 = UZ
V2 = VZ
RHO2 = RHOZ
!
!  Then repeat for Z = 5
!
ZLEVEL = 5.
!
! Compute S, T, U, V and WR at depth ZLEVEL
!
UZ = SPV
VZ = SPV
RHOZ = SPV
DO J = 1,JM
  DO I = 1,IM
    IF (FSM(I,J).NE.0.) THEN
      IF (ZLEVEL.LE.-(ZZ(1)*D(I,J)+ETA(I,J)) ) THEN
        UZ(I,J) = UIS(I,J,1)
        VZ(I,J) = VIS(I,J,1)
        RHOZ(I,J) = RHO(I,J,1) + RHOAVER 
      ELSEIF (ZLEVEL.GT.H(I,J) ) THEN
        UZ(I,J) = SPV
        VZ(I,J) = SPV
        RHOZ(I,J) = SPV
      ELSEIF (ZLEVEL.GE.-(ZZ(KB-1)*D(I,J)+ETA(I,J)) ) THEN
        UZ(I,J) = UIS(I,J,KB-1)
        VZ(I,J) = VIS(I,J,KB-1)
        RHOZ(I,J) = RHO(I,J,KB-1) + RHOAVER 
!
!  Else we interpolate linearly between the layers.
!
      ELSE
        DO K = 1,KB-2
          IF (ZLEVEL.GT.-(ZZ(K)*D(I,J)+ETA(I,J)) .AND. &
            & ZLEVEL.LE.-(ZZ(K+1)*D(I,J)+ETA(I,J))  ) THEN
            FRACZ = (ZLEVEL+(ZZ(K)*D(I,J)+ETA(I,J))) /  &
                  & ((-ZZ(K+1)+ZZ(K))*D(I,J))
            UZ(I,J) = (1.-FRACZ)*UIS(I,J,K) + FRACZ*UIS(I,J,K+1)
            VZ(I,J) = (1.-FRACZ)*VIS(I,J,K) + FRACZ*VIS(I,J,K+1)
            RHOZ(I,J) = (1.-FRACZ)*RHO(I,J,K) + FRACZ*RHO(I,J,K+1)
            RHOZ(I,J) = RHOZ(I,J) + RHOAVER
            GO TO 200
          ENDIF
        END DO
200     CONTINUE
      ENDIF
    ENDIF
  END DO
END DO
!
!
U5 = UZ
V5 = VZ
RHO5 = RHOZ
RETURN
END
SUBROUTINE RELAX(ALF,XEXT,XP,X,IX,KMAX)
!***BEGIN PROLOGUE RELAX
!***AUTHOR
!         RELAX written by DNMI (Engedal?)
!         Revised 911003 by J.Berntsen by introducing
!         parameter list.
!         Modified 130499 by Inge K Eliassen: FRS on all edges (and corners)
!         MODIFIED 130799 by J.Berntsen by using FRS-arrays covering the 
!         whole region
!
!***********************************************************************
!
!
!-----------------------------------------------------------------------
!   UPDATES VALUES OF THE VARIABLE X IN THE BOUNDARY ZONES USING
!   THE FLOW RELAXATION SCHEME (FRS) :
!
!   X(N+1) = ALFA*( XEXT(N+1)+XP(N+1) ) + (1-ALFA)*X(N+1)
!-----------------------------------------------------------------------
!***END PROLOGUE RELAX
!
!   Global integers.
!
USE MOD_BOUND
IMPLICIT NONE
INTEGER KMAX,IX
!
!   Global reals.
!
REAL ALF(LB),XEXT(IM,JM,KMAX),XP(IM,JM,KMAX),X(IM,JM,KMAX)
!
!   Local variables.
!
INTEGER I,J,K,IFRS
!
!     -------  BOUNDARY ZONE WEST 
!  For the Osteroy case only opening towards west for
! J = 13,14
!
IF(IX.EQ.2) THEN
! U-points:
   DO K=1,KMAX
!     DO J=1,JM
      DO J = 13,14
         X(1,J,K)=XEXT(1,J,K)+XP(1,J,K)
         DO I = 2,LB
            IF (J.LE.LB) THEN
              IFRS = MIN(I-1,J)
            ELSEIF (J.GE.JM-LB) THEN
              IFRS = MIN(I-1,JM+1-J)
            ELSE
              IFRS = I-1
            ENDIF
            X(I,J,K)=ALF(IFRS)*(XEXT(I,J,K)+XP(I,J,K)) &
                 &          +((1.0-ALF(IFRS))*X(I,J,K))
         END DO
      END DO
   END DO
ELSE
   ! V-points / EL-points
   DO K=1,KMAX
      DO I=1,LB
!        DO J=1,JM
         DO J = 13,14
            IF (J.LE.LB) THEN
              IFRS = MIN(I,J)
            ELSEIF (J.GE.JM-LB) THEN
              IFRS = MIN(I,JM+1-J)
            ELSE
              IFRS = I
            ENDIF
            X(I,J,K)=ALF(IFRS)*(XEXT(I,J,K)+XP(I,J,K))+ &
                 &          ((1.0-ALF(IFRS))*X(I,J,K))
         END DO
      END DO
   END DO
ENDIF
!
!     -------  BOUNDARY ZONE EAST
!  For the Osteroy case the east boundary is closed
!
! U- or V- or EL-points
!DO K=1,KMAX
!   DO I=IM-LB+1,IM
!      DO J=1,JM
!        IF (J.LE.LB) THEN
!          IFRS = MIN(IM+1-I,J)
!        ELSEIF (J.GE.JM-LB) THEN
!          IFRS = MIN(IM+1-I,JM+1-J)
!        ELSE
!          IFRS = IM+1-I
!        ENDIF
!        X(I,J,K)=ALF(IFRS)*(XEXT(I,J,K)+XP(I,J,K))+ &
!        &          ((1.0-ALF(IFRS))*X(I,J,K))
!      END DO
!   END DO
!END DO
!
!     -------  BOUNDARY ZONE SOUTH
! For the Osteroy case the south boundary is open for
!  I = 15,18
!
IF (IX == 3) THEN
   ! V-points:
   DO K=1,KMAX
!     DO I=LB+1,IM-LB
      DO I = 15,18
         X(I,1,K)=XEXT(I,1,K)+XP(I,1,K)
         DO J=2,LB
            IFRS = J-1
            X(I,J,K)=ALF(IFRS)*(XEXT(I,J,K)+XP(I,J,K)) &
                 &          +((1.0-ALF(IFRS))*X(I,J,K))
         END DO
      END DO
   END DO
ELSE
   ! U-points / EL-points
   DO K=1,KMAX
!     DO I=LB+1,IM-LB
      DO I = 15,18
         DO J=1,LB
            IFRS = J
            X(I,J,K)=ALF(IFRS)*(XEXT(I,J,K)+XP(I,J,K)) &
                 &          +((1.0-ALF(IFRS))*X(I,J,K))
         END DO
      END DO
   END DO
END IF

!
!     -------  BOUNDARY ZONE NORTH
!  For the Osteroy case the north boundary is closed
!
! U- or V- or EL-points
!DO K=1,KMAX
!   DO I=LB+1,IM-LB
!      DO J=JM-LB+1,JM
!         IFRS = JM+1-J
!            X(I,J,K)=ALF(IFRS)*(XEXT(I,J,K)+XP(I,J,K)) &
!                 &          +((1.0-ALF(IFRS))*X(I,J,K))
!      END DO
!   END DO
!END DO
!
RETURN
END SUBROUTINE RELAX
SUBROUTINE RIVERS(NDATE)
USE MOD_BOUND
IMPLICIT NONE
!
!     NUMC    : Number of rivers
!
INTEGER NDATE(5)
INTEGER I,K
REAL DEPMIX,DEP
!
!   Define the river runoff parameters in all coastal runoff cells.
!
!   The below values are specified by Trygve Sagberg, Department of Geophysics, University
!   of Bergen, 1999.
!
CODERIVER(1) = 4
TRIVER(1) = 10.
FRIVER(1) = 20.980
SRIVER(1) = 0.
IRIVER(1) = 18
JRIVER(1) = 47

CODERIVER(2) = 3
TRIVER(2) = 10.
FRIVER(2) = 5.6543
SRIVER(2) = 0.
IRIVER(2) = 15
JRIVER(2) = 53

CODERIVER(3) = 4
TRIVER(3) = 10.
FRIVER(3) = 5.0625
SRIVER(3) = 0.
IRIVER(3) = 9
JRIVER(3) = 54

CODERIVER(4) = 1
TRIVER(4) = 10.
FRIVER(4) = .9666
SRIVER(4) = 0.
IRIVER(4) = 7
JRIVER(4) = 43

CODERIVER(5) = 3
TRIVER(5) = 10.
FRIVER(5) = .9722
SRIVER(5) = 0.
IRIVER(5) = 12
JRIVER(5) = 32

CODERIVER(6) = 3
TRIVER(6) = 10.
FRIVER(6) = 2.7898
SRIVER(6) = 0.
IRIVER(6) = 25
JRIVER(6) = 37
!
!
!  And then finally introducing a real flooding Arna-river.
!
CODERIVER(7) = 3
TRIVER(7) = 10.
FRIVER(7) = 50.
SRIVER(7) =  0.
IRIVER(7) = 24
JRIVER(7) = 16
!
!  Setting all the
!  river fluxes to 200. m**3/s (which is more than normal)
!
DO I = 1,7
  FRIVER(I) = 100.
END DO    
!
! The above statements should be executed when testing 
! out the river part of the code for the first time that the
! river cell is an ocean cell and that the flow come in the direction from
! a land cell.
! After this is tested, the statements may be commented away as below.
!
!DO I = 1,NUMC
!  WRITE(*,*)I,IRIVER(I),JRIVER(I),FRIVER(I)
!  WRITE(*,*)H(IRIVER(I),JRIVER(I))
!  WRITE(*,*)H(IRIVER(I)-1,JRIVER(I)),H(IRIVER(I),JRIVER(I)-1)
!  WRITE(*,*)H(IRIVER(I)+1,JRIVER(I)),H(IRIVER(I),JRIVER(I)+1)
!  WRITE(*,*)CODERIVER(I)
!END DO 
!STOP
!
!
!  Define outlet in the upper approx. 5 meters
!
DEPMIX = 5.0
DO I = 1,NUMC
  KRIVER1(I) = 1
  DO K = 1,KB-1
    DEP = -Z(K+1)*H(IRIVER(I),JRIVER(I))
    IF (DEPMIX.LT.DEP) THEN
      KRIVER2(I) = K
      GO TO 105
    ENDIF
  END DO
  KRIVER2(I) = KB-1
105 CONTINUE
END DO

!
!  Compute the fraction of the vertical covered by the river outlet.
!
DO I = 1,NUMC
  DZRIVER(I) = -Z(KRIVER2(I)+1)+Z(KRIVER1(I))
END DO
!
!
RETURN
END
      SUBROUTINE SECTIO(AX,AY,BX,BY,IM,JM,KB,H,U,V,WR,S,T, &
     &           DX,DY,DZ,USEC,UTSEC,WSEC,SSEC,RHOSEC,SECDEP,SECLEN,MAXSEC, &
     &           NSEC,IFAIL)
!***BEGIN PROLOGUE SECTIO
!***DATE WRITTEN   910426 (YYMMDD)
!***REVISION DATE  920831 (YYMMDD)
!***AUTHOR
!            Jarle Berntsen, Institute of Marine Research,
!            Postboks 1870,
!            N-5024 Bergen-Nordnes, Norway
!            Email..  jarleb@imr.no
!
!            A great portion of the program is based
!            on an earlier flux routine by B.Aadlandsvik
!
!***PURPOSE SECTIO computes the velocities 
!           through a given section.
!
!           This version of SECTIO is based on the
!           datastructures used in the ECOM3D model.
!           SECTIO assumes constant grid spacing.
!           That is DX and DY must both be constant.
!
!***DESCRIPTION
!
!           A section is drawn between the point A with
!           coordinates (AX,AY) and the point B with
!           coordinates (BX,BY).
!           0 <= AX,BX <= IM and 0 <= AY,BY <= JM.
!
!           SECTIO computes the velocities normal to the section
!           from A to B. 
!
!           The section is parameterized as follows 
!
!           (1 - ST)*(AX,AY) + ST*(BX,BY) , 0 <= ST <= 1.
!
!           The routine computes all values of the parameter
!           ST for which the section intersects the
!           horizontal gridnet.
!           We then loop over all horizontal subsections
!           and all vertical layers and compute the velocities
!           normal to the section, the vertical velocity,
!           the salinity, the temperature,
!           the length of the section and the depth of the
!           section.
!
!   ON ENTRY
!
!     AX     Real.
!            X-Coordinate of point A.
!     AY     Real.
!            Y-Coordinate of point A.
!     BX     Real.
!            X-Coordinate of point B.
!     BY     Real.
!            Y-Coordinate of point B.
!     IM   Integer.
!            Number of cells in X-direction.
!     JM   Integer.
!            Number of cells in Y-direction.
!     KB   Integer.
!            Number of cells in Sigma-direction.
!     H      Real array of dimension (IM,JM).
!            The bottom depth (m).
!     U      Real array of dimension (IM,JM,KB).
!            Horizontal velocity in X-direction (m/s).
!     V      Real array of dimension (IM,JM,KB). 
!            Horizontal velocity in Y-direction (m/s).
!     WR     Real array of dimension (IM,JM,KB).
!            Vertical velocity (m/s).
!     S      Real array of dimension (IM,JM,KB).
!            Salinity.
!     T      Real array of dimension (IM,JM,KB).
!            Temperature.
!     DX     Real.
!            The width of a cell in X-direction (m).
!     DY     Real.
!            The width of a cell in Y-direction (m).
!     DZ     Real array of dimension KB.
!            The sigma coordinate thickness of the layers.
!     MAXSEC Integer.
!            The maximum allowed number of subsections.
!            MAXSEC must be greater or equal to NSEC.
!            If MAXSEC is selected to be equal to IM+JM,
!            MAXSEC will be great enough for all sections.
!     
!   ON RETURN
!
!     USEC   Real array of dimension (MAXSEC,KB).
!            The horisontal velocities normal to the section.
!     UTSEC  Real array of dimension (MAXSEC,KB).
!            The horisontal velocities tangential to the section.
!     WSEC   Real array of dimension (MAXSEC,KB).
!            The vertical velocities of the section.
!     SSEC   Real array of dimension (MAXSEC,KB).
!            The salinities of the section.
!     SECDEP Real array of dimension MAXSEC.
!            The depths of each subsection.
!     SECLEN Real array of dimension MAXSEC.
!            The lengths of each subsection.
!     NSEC   Integer.
!            The number of sea subsections.
!     IFAIL  Integer.
!            IFAIL is 0 on exit if FLUXR and FLUXL have been
!            successfully computed.
!            IFAIL is 1 if IM, JM or KB <= 0 on entry.
!            IFAIL is 2 if (AX,AY) = (BX,BY) on entry.
!            IFAIL is 3 if A or B is outside the region of integration.
!            IFAIL is 4 if we try to compute the velocities for
!                  NSEC > MAXSEC.
!
!***ROUTINES CALLED-NONE
!***END PROLOGUE SECTIO
!
!   Global variables.
!
IMPLICIT NONE
      INTEGER IM,JM,KB,MAXSEC,NSEC,IFAIL
      REAL AX,AY,BX,BY,H(IM,JM),U(IM,JM,KB), &
     &     V(IM,JM,KB),DZ(KB),USEC(MAXSEC,KB),UTSEC(MAXSEC,KB), &
     &     WSEC(MAXSEC,KB),SSEC(MAXSEC,KB),RHOSEC(MAXSEC,KB), &
     &     SECLEN(MAXSEC),SECDEP(MAXSEC), &
     &     DX,DY,WR(IM,JM,KB),S(IM,JM,KB),T(IM,JM,KB)
!
!   Local variables.
!
!   MAXCO  Maximum number of gridcell intersections that may be
!          crossed by our section.
!   IXCO   Number of gridcell intersections that is crossed
!          by our section in X-direction.
!   IYCO   Number of gridcell intersections that is crossed
!          by our section in Y-direction.
!   SX     Values of the parameter ST for which our section
!          crosses the gridcell intersections in X-direction.
!   SY     Values of the parameter ST for which our section 
!          crosses the gridcell intersections in Y-direction.
!   ST     Sorted values of the parameter ST for which our section
!          crosses the horisontal grid.
!   RGREAT A real parameter that must be greater than MAX(IM,JM).
!   ICOUNT The number of intercell subsections.
!   ALPHA  The direction of the section.
!   LENGTH Horizontal length of a subsection.
!   SMID   ST value at the midpoint of a subsection.
!   XMID   X-Coordinate at the midpoint of a subsection.
!   YMID   Y-Coordinate at the midpoint of a subsection.
!   ICELL  Index in X-direction of the cell containing the midpoint.
!   JCELL  Index in Y-direction of the cell containing the midpoint.
!   UMID   U value at the midpoint of a subsection.
!   VMID   V value at the midpoint of a subsection.
!   VELOCI Total horizontal velocity.
!   BETA   Direction of the flow.
!
      INTEGER MAXCO,IXCO,I,IYCO,ICOUNT,IXPEK,IYPEK,ICELL, &
     &        JCELL,L,K
      PARAMETER (MAXCO = 1000)
      REAL SX(MAXCO),SY(MAXCO),ST(0:MAXCO),RGREAT
      PARAMETER (RGREAT = 1.E12)
      REAL SLEN,ALPHA,SMID,XMID,YMID,PARTX,PARTY,SDEP, &
     &     LENGTH,UMID,VMID,VELOCI,BETA
!
!***FIRST EXECUTABLE STATEMENT SECTIO
!
!
!   Test on legal input.
!
      IF (IM.LE.0) THEN
        IFAIL = 1
        RETURN
      ENDIF
      IF (JM.LE.0) THEN
        IFAIL = 1
        RETURN
      ENDIF
      IF (KB.LE.0) THEN
        IFAIL = 1
        RETURN
      ENDIF
!
!   Test on A = B.
!
      IF ((AX.EQ.BX).AND.(AY.EQ.BY)) THEN
        IFAIL = 2
        RETURN
      ENDIF
!
!   Test on A or B outside the region.
!
      IF ((AX.LT.0.).OR.(AX.GT.FLOAT(IM)).OR. &
     &    (BX.LT.0.).OR.(BX.GT.FLOAT(IM)).OR. &
     &    (AY.LT.0.).OR.(AY.GT.FLOAT(JM)).OR. &
     &    (BY.LT.0.).OR.(BY.GT.FLOAT(JM))) THEN
        IFAIL = 3
        RETURN
      ENDIF
!
!   Locate the values of the parameter ST for which our section
!   crosses the gridcell intersections in X-direction.
!   Place these parameters sorted in SX.
!
      IXCO = 0
!
!   If AX < BX, then search to the right.
!
      IF (AX.LT.BX) THEN
        I = INT(AX) + 1
10      IF (FLOAT(I).LT.BX) THEN
          IXCO = IXCO + 1
          SX(IXCO) = (I-AX)/(BX-AX)
          I = I + 1
          GO TO 10
        ENDIF
!
!   If AX > BX, then search to the left.
!
      ELSEIF (AX.GT.BX) THEN
        I = INT(AX)
        IF (AX.EQ.FLOAT(I)) THEN
          I = I - 1
        ENDIF
20      IF (FLOAT(I).GT.BX) THEN
          IXCO = IXCO + 1
          SX(IXCO) = (I-AX)/(BX-AX)
          I = I - 1
          GO TO 20
        ENDIF
!
!   If AX = BX, then IXCO = 0.
!
      ELSEIF (AX.EQ.BX) THEN
        IXCO = 0
      ENDIF
!
!   Locate the values of the parameter ST for which our section
!   crosses the gridcell intersections in Y-direction.
!   Place these parameters sorted in SY.
!
      IYCO = 0
!
!   If AY < BY, then search to the north.
!
      IF (AY.LT.BY) THEN
        I = INT(AY) + 1
30      IF (FLOAT(I).LT.BY) THEN
          IYCO = IYCO + 1
          SY(IYCO) = (I-AY)/(BY-AY)
          I = I + 1
          GO TO 30
        ENDIF
!
!   If AY > BY, then search to the south.
!
      ELSEIF (AY.GT.BY) THEN
        I = INT(AY)
        IF (AY.EQ.FLOAT(I)) THEN
          I = I - 1
        ENDIF
40      IF (FLOAT(I).GT.BY) THEN
          IYCO = IYCO + 1
          SY(IYCO) = (I-AY)/(BY-AY)
          I = I - 1
          GO TO 40
        ENDIF
!
!   If AY = BY, then IYCO = 0.
!
      ELSEIF (AY.EQ.BY) THEN
        IYCO = 0
      ENDIF
!
!   Merge SX and SY into the array ST and include the endpoints.
!   ICOUNT is the number of intercell subsections.
!
      SX(IXCO+1) = RGREAT
      SY(IYCO+1) = RGREAT
      IXPEK = 1
      IYPEK = 1
      ICOUNT = 0
      ST(ICOUNT) = 0.0
!
!   If ST(ICOUNT) < RGREAT, we have still not reached the end
!   of the section.
!
100   IF (ST(ICOUNT).LT.RGREAT) THEN
        ICOUNT = ICOUNT + 1
!
!   If SX(IXPEK) < SY(IYPEK), we cross the Y-axis before
!   the X-axis.
!
        IF (SX(IXPEK).LT.SY(IYPEK)) THEN
          ST(ICOUNT) = SX(IXPEK)
          IXPEK = IXPEK + 1
! 
!   If SX(IXPEK) > SY(IYPEK), we cross the X-axis before 
!   the Y-axis. 
!
        ELSEIF(SX(IXPEK).GT.SY(IYPEK)) THEN
          ST(ICOUNT) = SY(IYPEK)
          IYPEK = IYPEK + 1
!  
!   If SX(IXPEK) = SY(IYPEK), we cross the X-axis and the
!   Y-axis at the same point.  
!   This is a corner of a gridcell.
!
        ELSEIF(SX(IXPEK).EQ.SY(IYPEK)) THEN
          ST(ICOUNT) = SY(IYPEK)
          IYPEK = IYPEK + 1
          IXPEK = IXPEK + 1
        ENDIF
        GO TO 100
      ENDIF
!
!   Replace the last value in ST (RGREAT), with the value
!   that makes the section end at B.
!
      ST(ICOUNT) = 1.0
!
!   Initate NSEC.
!
      NSEC = 0
      SLEN = SQRT((DX*(BX-AX))**2 + (DY*(BY-AY))**2)
      IF ((BY-AY).NE.0. .OR. (BX-AX).NE.0. ) THEN
        ALPHA = ATAN2(DY*(BY-AY),DX*(BX-AX))
      ELSE
        ALPHA = 0.
      ENDIF
!
!   Loop over all subsections from A to B.
!
      DO 500 L = 1,ICOUNT
        LENGTH = SLEN*(ST(L) - ST(L-1))
        SMID = 0.5*(ST(L-1) + ST(L))
        XMID = (1.0 - SMID)*AX + SMID*BX
        YMID = (1.0 - SMID)*AY + SMID*BY
        ICELL = INT(XMID) + 1
        JCELL = INT(YMID) + 1
        IF (XMID.EQ.FLOAT(IM)) THEN
          ICELL = IM
        ENDIF
        IF (YMID.EQ.FLOAT(JM)) THEN
          JCELL = JM
        ENDIF
        PARTX = XMID - (ICELL - 1)
        PARTY = YMID - (JCELL - 1)
        SDEP = H(ICELL,JCELL)
        IF (PARTX.EQ.1. .AND. ICELL.LT.IM) THEN
          SDEP = 0.5*(H(ICELL,JCELL)+H(ICELL+1,JCELL))
        ENDIF
        IF (PARTX.EQ.0. .AND. ICELL.GT.1) THEN 
          SDEP = 0.5*(H(ICELL,JCELL)+H(ICELL-1,JCELL)) 
        ENDIF
        IF (PARTY.EQ.1. .AND. JCELL.LT.JM) THEN 
          SDEP = 0.5*(H(ICELL,JCELL)+H(ICELL,JCELL+1)) 
        ENDIF 
        IF (PARTY.EQ.0. .AND. JCELL.GT.1) THEN  
          SDEP = 0.5*(H(ICELL,JCELL)+H(ICELL,JCELL-1))  
        ENDIF
!
!   If (ICELL,JCELL) is a sea cell, we loop 
!   over all layers.
!
        IF (SDEP.GE.10. .AND. LENGTH.GT.1E-6) THEN
          NSEC = NSEC + 1
          IF (NSEC.GT.MAXSEC) THEN
            IFAIL = 4
            RETURN
          ENDIF
          SECDEP(NSEC) = SDEP
          SECLEN(NSEC) = LENGTH
          DO 250 K = 1,KB
            IF (ICELL.LT.IM) THEN
              UMID = (1.0 - PARTX)*U(ICELL,JCELL,K) + &
     &             PARTX*U(ICELL+1,JCELL,K)
            ELSE
              UMID = U(ICELL,JCELL,K)
            ENDIF
            IF (JCELL.LT.JM) THEN
              VMID = (1.0 - PARTY)*V(ICELL,JCELL,K) + &
     &             PARTY*V(ICELL,JCELL+1,K)
            ELSE
              VMID = V(ICELL,JCELL,K)
            ENDIF
            VELOCI = SQRT(UMID**2 + VMID**2)
!
!   Compute the direction of the flow.
!
            IF ((UMID.EQ.0.).AND.(VMID.EQ.0.)) THEN
              BETA = 0.
            ELSE
              BETA = ATAN2(VMID,UMID)
            ENDIF
!
!   Compute the velocities, salinities and
!   temperatures of this section.
!
            USEC(NSEC,K) = VELOCI*SIN(ALPHA-BETA)
            UTSEC(NSEC,K) = VELOCI*COS(ALPHA-BETA)
            WSEC(NSEC,K) = WR(ICELL,JCELL,K)
            SSEC(NSEC,K) = SQRT(USEC(NSEC,K)**2 + UTSEC(NSEC,K)**2 )
            RHOSEC(NSEC,K) = T(ICELL,JCELL,K) - 1000.
250       CONTINUE
        ENDIF
!
!   Continue to next horizontal cell.
!
500   CONTINUE
!
!***END SECTIO
!
      RETURN
      END
SUBROUTINE SETUP
USE MOD_MAIN
IMPLICIT NONE
REAL AMLIM,AMLIME
!
READ(40,*)ISTART(1)
READ(40,*)ISTART(2)
READ(40,*)ISTART(3)
READ(40,*)ISTART(4)
!
! NDATE is running time
!
DO I = 1,4
   NDATE(I) = ISTART(I)
END DO
NDATE(5) = 0 !  HOURs since start
!
!
! TIME is measuring time in days since start.
!
  TIME = 0.
!
READ(40,*)THETA2D
IF (THETA2D.LT.0.5 .OR. THETA2D.GT.1.0) THEN
  WRITE(*,*)'ERROR IN THETA2D',THETA2D
  WRITE(*,*)'THETA2D MUST BE IN THE RANGE 0.5 TO 1.0'
  STOP
ENDIF

READ(40,*)SMAG
READ(40,*)VISCPOM
READ(40,*)UNESCO
READ(40,*)ADVTURB
READ(40,*)RIVLOG
READ(40,*)TIDE
READ(40,*)WIND
READ(40,*)ATMPRESS
READ(40,*)FOURTH
READ(40,*)INTP4
READ(40,*)DEPMIN
READ(40,*)NFILTER
READ(40,*)DSBOT
READ(40,*)NDIVIS
READ(40,*)N2D
READ(40,*)NUMSTEP
!
! Compute the time step as a function of NDIVIS.
!
  DT = 3600./FLOAT(NDIVIS)
!
READ(40,*)DX
DY = DX
WRITE(*,*)'DX=',DX,'DY=',DY
READ(40,*)CM
READ(40,*)CM2D
READ(40,*)CH   
IF (.NOT.SMAG) THEN
  AM = CM
  AM2D = CM2D
  AH = CH
  AMLIME = 0.0625*DX**2/(DT/N2D) 
  AMLIM =  0.0625*DX**2/DT
  WRITE(*,*)'CONSTANT VISCOSITIES ARE CHOSEN'
  WRITE(*,*)'AM =',CM,'AM2D=',CM2D
  WRITE(*,*)'CONSTANT DIFFUSIVITY IS CHOSEN'
  WRITE(*,*)'AH =',CH
  WRITE(*,*)'MAXIMUM LIMITS ARE',AMLIM,' AND ',AMLIME,' RESPECTIVELY'
  IF (CM.GT.AMLIM .OR. CM2D.GT.AMLIME .OR. CH.GT.AMLIM) THEN
    WRITE(*,*)'AM, AH or AM2D CHOSEN TOO LARGE'
    STOP
  ENDIF
ELSEIF (SMAG) THEN
    WRITE(*,*)'VISCOSITIES ARE COMPUTED FROM SMAGORINSKY WITH:'
    WRITE(*,*)'CM =',CM,'AND',' CM2D=',CM2D, 'AND ','CH =',CH
ENDIF
READ(40,*)KMMIN
READ(40,*)KHMIN
READ(40,*)TECPLOT
RETURN
END SUBROUTINE SETUP
SUBROUTINE SMAGOR2D
USE STATE
!
!   Local variables.
!   AMLIME is an upper limit on AM2D used to avoid instabilities and 
!   unphysical oscillations.
!
INTEGER I,J,pt
REAL AMLIME
AMLIME = 0.5*0.0625*DX**2/(DT/N2D)
AM2D = 0.
!
!$omp parallel do firstprivate(cm2d,dx,dy,amlime) private(i,j)
DO pt=1,numcp
   i=indc(1,pt)
   j=indc(2,pt)
!DO J = 2,JM-1
! DO I = 2,IM-1
!   IF (FSM(I,J).GT.0.) THEN
      AM2D(I,J)=CM2D*DX*DY *SQRT( ((UA(I+1,J)-UA(I,J))/DX)**2 &
     &        +((VA(I,J+1)-VA(I,J))/DY)**2 &
     &     +.5*(.25*(UA(I,J+1)+UA(I+1,J+1)-UA(I,J-1)-UA(I+1,J-1))/DY    &
     &     + .25*(VA(I+1,J)+VA(I+1,J+1)-VA(I-1,J)-VA(I-1,J+1))/DX)**2)
!   ENDIF
    AM2D(I,J) = MIN(AM2D(I,J),AMLIME)
! END DO
END DO
!
RETURN
END
SUBROUTINE SMAGOR
USE STATE
IMPLICIT NONE
!
!   Local variables.
!
INTEGER I,J,K
REAL AMLIM
AMLIM = 0.5*0.0625*DX**2/DT
AM = 0.
!
!$OMP PARALLEL DO PRIVATE(I,J,K) FIRSTPRIVATE(DX,DY,CM)
DO J = 2,JM-1
  DO I = 2,IM-1
    IF (FSM(I,J).GT.0.) THEN
      DO K = 1,KB-1
        AM(I,J,K)=CM*DX*DY*SQRT(((U(I+1,J,K)-U(I,J,K))/DX)**2 &
     &        +((V(I,J+1,K)-V(I,J,K))/DY)**2 &
     &     +.5*(.25*(U(I,J+1,K)+U(I+1,J+1,K)- &
     &U(I,J-1,K)-U(I+1,J-1,K))/DY    &
     &     + .25*(V(I+1,J,K)+V(I+1,J+1,K)- &
     &V(I-1,J,K)-V(I-1,J+1,K))/DX)**2)
      END DO
    ENDIF
  END DO
END DO
IF (CM.GT.0.) THEN
  AH = (CH/CM)*AM
ELSE
  AH = 0.
ENDIF 
!$OMP PARALLEL DO PRIVATE(I,J,K)
DO J = 2,JM-1
  DO I = 2,IM-1
    IF (FSM(I,J).GT.0.) THEN
      DO K = 1,KB-1
        AM(I,J,K) = MIN(AM(I,J,K),AMLIM)
        AH(I,J,K) = MIN(AH(I,J,K),AMLIM)
      END DO
    ENDIF
  END DO
END DO
!
!
RETURN
END
MODULE STATE
  INTEGER IM,JM,KB
  PARAMETER (IM=33, JM=55, KB=32)
  INTEGER N2D,NDIVIS
  LOGICAL ADVTURB,SMAG,VISCPOM,UNESCO,FOURTH
  LOGICAL INTP4
!
! numpt: max number of ocean(wet) cells
! indu,indv,indc:  arrays with indices for u,v and center points
  PARAMETER(numpt=im*jm)
  INTEGER numup,numvp,numcp,numcp2
  INTEGER, DIMENSION(2,numpt) :: indu,indv,indc,indc2  
!
!1-D reals.
!
  REAL SPV,KHMIN,KMMIN
  REAL DX,DY,DT,GRAV,RHO0,CM,CM2D,CH,CD,Z0,RHOAVER,SAVER,TAVER,PMEAN,ROAIR
  REAL THETA2D
  PARAMETER (GRAV = 9.81 , RHO0=1025.0)
  PARAMETER (SPV = -32767.0, CD = 0.0025, Z0 = 0.01, PMEAN = 101300., ROAIR = 1.3)
!
!1-D real arrays.
!
  REAL, DIMENSION(KB) ::  Z,DZ,DZR,DZZ,ZZ
!
!2-D arrays
!
  REAL, DIMENSION(IM,JM) :: COR,FSM,DUM,DVM,    &
      & ETA,ETAP,H,HU,HV,D,DU,DV,WUSURF,WVSURF, &
      & SSURF,TSURF,WUBOT,WVBOT,CBC,PATM,AM2D,  &
      & UA,VA,HUSQR,HVSQR
!
!3-D arrays
!
  REAL, DIMENSION(IM,JM,KB) :: U,V,W,WR,S,T,RHO, &
      & AM,AH,KM,KH,KQ,DDZ,DUDZ,DVDZ,    &
      & UADV,VADV,Q2,Q2L,DELTAU,DELTAV
!
!2-D arrays appearing in version 3.0
!
  REAL, DIMENSION(IM,JM) :: DELETAI,DELETAE
!
!3-D arrays appearing in version 3.0
!
  REAL, DIMENSION(IM,JM,KB) :: WI,WE,UADVE,VADVE
!
!  Arrays in version 4.0
!
  REAL, DIMENSION(IM,JM,KB) :: UN,UNM1,DELUN,DELUSTAR,DELUNM1
  REAL, DIMENSION(IM,JM,KB) :: VN,VNM1,DELVN,DELVSTAR,DELVNM1
  REAL, DIMENSION(IM,JM,KB) :: SN,SNM1,DELSN,DELSSTAR,DELSNM1
  REAL, DIMENSION(IM,JM,KB) :: TN,TNM1,DELTN,DELTSTAR,DELTNM1

END MODULE STATE 
SUBROUTINE STEPU3D(UBCLIN,VBCLIN,C3U,AX)
  USE STATE
  IMPLICIT NONE
  REAL UBCLIN(IM,JM,KB),VBCLIN(IM,JM,KB),C3U(IM,JM,KB),AX(IM,JM)
  REAL VU(IM,JM,KB)
  INTEGER I,J,K

!  Propagate the solution in UBCLIN.
!
!Define V*D in U-points.
!
!DO K = 1,KB-1
!  DO J = 2,JM-1
!     DO I = 2,IM
!        VU(I,J,K) = 0.25*(DV(I,J+1)*VBCLIN(I,J+1,K)+DV(I,J)*VBCLIN(I,J,K)+&
!             &  DV(I-1,J+1)*VBCLIN(I-1,J+1,K)+DV(I-1,J)*VBCLIN(I-1,J,K))
!     END DO
!  END DO
!END DO
  VU = 0.
!$OMP PARALLEL DO PRIVATE(I,J,K)
  DO K = 1,KB-1
     DO J = 2,JM-1
        DO I = 2,IM
           IF (DUM(I,J).GT.0.) THEN
              IF (DVM(I,J+1).GT.0.) THEN
                 VU(I,J,K) = VBCLIN(I,J+1,K)*DV(I,J+1)/HVSQR(I,J+1)
              ENDIF
              IF (DVM(I,J).GT.0.) THEN
                 VU(I,J,K) = VU(I,J,K) + VBCLIN(I,J,K)*DV(I,J)/HVSQR(I,J)
              ENDIF
              IF (DVM(I-1,J+1).GT.0.) THEN
                 VU(I,J,K) = VU(I,J,K) + VBCLIN(I-1,J+1,K)*DV(I-1,J+1)/HVSQR(I-1,J+1)
              ENDIF
              IF (DVM(I-1,J).GT.0.) THEN
                 VU(I,J,K) = VU(I,J,K) + VBCLIN(I-1,J,K)*DV(I-1,J)/HVSQR(I-1,J)
              ENDIF
              VU(I,J,K) = 0.25*VU(I,J,K)*HUSQR(I,J)
           ENDIF
        END DO
     END DO
  END DO
!
!$OMP PARALLEL DO PRIVATE(I,J,K)
  DO K = 1,KB-1
     DO J = 2,JM-1
        DO I = 2,IM
           DELTAU(I,J,K) = COR(I,J)*VU(I,J,K) + DELTAU(I,J,K) - AX(I,J) 
           DELTAU(I,J,K) = DELTAU(I,J,K) + C3U(I,J,K)
        END DO
     END DO
  END DO

!$OMP PARALLEL DO PRIVATE(I,J,K)
  DO J = 2,JM-1
     DO I = 2,IM
        IF (DUM(I,J).NE.0.) THEN
           DO K = 1,KB-1
              UBCLIN(I,J,K) = UBCLIN(I,J,K) + DT*DELTAU(I,J,K)/DU(I,J)
              U(I,J,K) = UBCLIN(I,J,K) + UA(I,J)              
           END DO
        ENDIF
     END DO
  END DO

  RETURN
END SUBROUTINE STEPU3D
   
SUBROUTINE STEPV3D(UBCLIN,VBCLIN,C3V,AY)
  USE STATE
  IMPLICIT NONE
  REAL UBCLIN(IM,JM,KB),VBCLIN(IM,JM,KB),C3V(IM,JM,KB),AY(IM,JM)
  REAL UV(IM,JM,KB)
  INTEGER I,J,K
!
!Define U*D in V-points.
!
!UV = 0.
!DO K = 1,KB-1
!  DO J = 2,JM
!     DO I = 2,IM-1
!        UV(I,J,K) = 0.25*(DU(I+1,J)*UBCLIN(I+1,J,K)+DU(I,J)*UBCLIN(I,J,K)+&
!             & DU(I+1,J-1)*UBCLIN(I+1,J-1,K)+DU(I,J-1)*UBCLIN(I,J-1,K))
!     END DO
!  END DO
!END DO
  UV = 0.
!$OMP PARALLEL DO PRIVATE(I,J,K)
  DO K = 1,KB-1
     DO J = 2,JM
        DO I = 2,IM-1
           IF (DVM(I,J).NE.0.) THEN
              IF (DUM(I+1,J).NE.0.) THEN
                 UV(I,J,K) = UBCLIN(I+1,J,K)*DU(I+1,J)/HUSQR(I+1,J)
              ENDIF
              IF (DUM(I,J).NE.0.) THEN
                 UV(I,J,K) = UV(I,J,K) + UBCLIN(I,J,K)*DU(I,J)/HUSQR(I,J)
              ENDIF
              IF (DUM(I+1,J-1).NE.0.) THEN
                 UV(I,J,K) = UV(I,J,K) + UBCLIN(I+1,J-1,K)*DU(I+1,J-1)/HUSQR(I+1,J-1)
              ENDIF
              IF (DUM(I,J-1).NE.0.) THEN
                 UV(I,J,K) = UV(I,J,K) + UBCLIN(I,J-1,K)*DU(I,J-1)/HUSQR(I,J-1)
              ENDIF
              UV(I,J,K) = 0.25*UV(I,J,K)*HVSQR(I,J)
           ENDIF
        END DO
     END DO
  END DO
!
!Then step forward the 3-D V-field
!
!
!$OMP PARALLEL DO PRIVATE(I,J,K)
  DO K = 1,KB-1
     DO J = 2,JM
        DO I = 2,IM-1
           DELTAV(I,J,K) = -COR(I,J)*UV(I,J,K)+DELTAV(I,J,K)-AY(I,J) 
           DELTAV(I,J,K) = DELTAV(I,J,K) + C3V(I,J,K)
        END DO
     END DO
  END DO
!$OMP PARALLEL DO PRIVATE(I,J,K) firstprivate(dt)
  DO J = 2,JM
     DO I = 2,IM-1
        IF (DVM(I,J).NE.0.) THEN
           DO K = 1,KB-1
              VBCLIN(I,J,K) = VBCLIN(I,J,K) + DT*DELTAV(I,J,K)/DV(I,J)
              V(I,J,K) = VBCLIN(I,J,K) + VA(I,J)              
           END DO
        ENDIF
     END DO
  END DO
  RETURN
END SUBROUTINE STEPV3D
SUBROUTINE SUPERBEEF(FIELDOLD,FIELD,DELFIELD,FAVER,ICODE)
!
!           SUPERBEEF integrates the equation
!
!           d(FIELD*D)/d(T) + d(FIELD*U*D)/d(X) + d(FIELD*V*D)/d(Y) +
!       
!           d(FIELD*W)/d(SIGMA) = d(AH*d(FIELD*D)/d(X))/d(X) +
!                                 d(AH*d(FIELD*D)/d(Y))/d(Y)
!
!           from timestep n to timestep n+1
!           with a superbee limiter TVD scheme.
!
!           d(*) is the differential operator,
!           FIELD is the scalar field to be integrated,
!           D is the dynamic depth,
!           T is time,
!           X and Y are the horisontal coordinates,
!           U is the horisontal velocity in X-direction,
!           V is the horisontal velocity in Y-direction,
!           SIGMA is the vertical coordinate,
!           W is the vertical velocity. 
!           
!           FAVER is the average value of the scalar field which is 
!                 subtracted from FIELD before differences are 
!                 computed to reduce the cancellation errors.
!           ICODE is an integer flag to signal which scalar field
!                 that is advected. ICODE is needed when river-runoff
!                 is included.
!
!***ROUTINES CALLED-NONE
!***END PROLOGUE
!
!   Global variables.
!
  USE MOD_BOUND
  IMPLICIT NONE
  REAL FIELDOLD(IM,JM,KB), FIELD(IM,JM,KB), DELFIELD(IM,JM,KB),FAVER
  INTEGER ICODE
!
!   Local variables.
!
  REAL, DIMENSION(IM,JM,KB) :: XFLUX,YFLUX,ZFLUX
  REAL :: xfluxup,YFLUXUP,ZFLUXUP
  REAL :: xfluxlw,YFLUXLW,ZFLUXLW
  REAL :: XFLUXD,YFLUXD
  REAL AREA,NETFLUX,VOLUME,VOLUMEP,LAMBDAX,LAMBDAY
  REAL R,PHIR,NUMER,DENUM,EPSILON,AREAT,AREATU,AREATV,AREATW
  INTEGER I,J,K,NSIG,pt
  REAL FRAC,FLUX,FIELDRIVER
!
  LAMBDAX = DT/DX
  LAMBDAY = DT/DY
  EPSILON = 1.E-10
!
!   Define FIELD(KB) = FIELD(KB-1)
!
  FIELD(1:IM,1:JM,KB) = FIELD(1:IM,1:JM,KB-1)
  FIELD = FIELD - FAVER
  FIELDOLD = FIELDOLD - FAVER
  DELFIELD = 0.
!
  XFLUX = 0.
  XFLUXUP = 0.
  XFLUXLW = 0.
  XFLUXD = 0.
  YFLUX = 0.
  YFLUXUP = 0.
  YFLUXLW = 0.
  YFLUXD = 0.
  ZFLUX = 0.
  ZFLUXUP = 0.
  ZFLUXLW = 0.
!
!   Compute F*U*D in U-points of the
!   Arakawa C-grid.
!
!   Compute the sum of the advective and diffusive
!   fluxes  in X-direction.
!
  IF (RIVLOG) THEN
     DO I = 1,NUMC
        IF (ICODE.EQ.1) THEN
!
!  Salinity of river water
!
           FIELDRIVER = SRIVER(I)
        ELSEIF (ICODE.EQ.2) THEN
!
! Temperature of the river water
!
           FIELDRIVER = TRIVER(I)
        ELSE
           WRITE(*,*)'ERROR IN SUPERBEEF'
           STOP
        ENDIF
        FIELDRIVER = FIELDRIVER - FAVER
        DO K = KRIVER1(I),KRIVER2(I)
           FRAC = DZ(K)/DZRIVER(I)
           FLUX = FRAC*FRIVER(I)*FIELDRIVER 
           IF (CODERIVER(I).EQ.1) THEN
              XFLUX(IRIVER(I),JRIVER(I),K) = FLUX
           ELSEIF (CODERIVER(I).EQ.2) THEN
              YFLUX(IRIVER(I),JRIVER(I),K) = FLUX
           ELSEIF (CODERIVER(I).EQ.3) THEN
              XFLUX(IRIVER(I)+1,JRIVER(I),K) = -FLUX
           ELSEIF (CODERIVER(I).EQ.4) THEN
              YFLUX(IRIVER(I),JRIVER(I)+1,K) = -FLUX
           ELSE
              WRITE(*,*)'ERROR IN SUPERBEEF-2'
              STOP
           ENDIF
        END DO
     END DO
  ENDIF

!$OMP PARALLEL DO &
!$OMP PRIVATE(I,J,K,AREAT,AREATU,NSIG,NUMER,DENUM &
!$OMP  ,R,PHIR,XFLUXUP,XFLUXLW,XFLUXD) &
!$OMP firstprivate(dx,dy,lambdax)
  DO pt=1,numup
     i=indu(1,pt)
     j=indu(2,pt)
!DO J = 2,JM-1
!  DO I = 2,IM
!    IF (DUM(I,J).NE.0.) THEN
     DO K = 1,KB-1
        AREAT = DY*DUDZ(I,J,K)
        AREATU = AREAT*UADV(I,J,K)
        XFLUXD = AH(I,J,K)*AREAT*(FIELD(I,J,K)-FIELD(I-1,J,K))/DX
        IF (UADV(I,J,K).GE.0.) THEN
           XFLUXUP = AREATU*FIELD(I-1,J,K)         
           NSIG = 1
        ELSE
           XFLUXUP = AREATU*FIELD(I,J,K)         
           NSIG = -1
        ENDIF
        XFLUXLW = 0.5*AREATU*(FIELD(I,J,K)+FIELD(I-1,J,K)) - &
             & 0.5*LAMBDAX*UADV(I,J,K)**2*(FIELD(I,J,K)-FIELD(I-1,J,K))*AREAT
        IF (I.GT.2 .AND. I.LE.IM-1) THEN
           NUMER = (ABS(UADV(I-NSIG,J,K)) - LAMBDAX*UADV(I-NSIG,J,K)**2)*  &
                &         DY*(DUDZ(I-NSIG,J,K)*(FIELD(I-NSIG,J,K)-FIELD(I-1-NSIG,J,K)))
           DENUM = (ABS(UADV(I,J,K)) - LAMBDAX*UADV(I,J,K)**2)*  &
                &         DY*(DUDZ(I,J,K)*(FIELD(I,J,K)-FIELD(I-1,J,K)))
           IF (ABS(DENUM).GT.EPSILON) THEN
              R = NUMER/DENUM
              PHIR = MAX(0., MIN(2.*R,1.) , MIN(R,2.))
           ELSE 
              PHIR = 0.
           ENDIF
        ELSE
           PHIR = 0.
        ENDIF
        XFLUX(I,J,K) = XFLUXUP + PHIR*(XFLUXLW-XFLUXUP)
        XFLUX(I,J,K) = XFLUX(I,J,K) - XFLUXD
     END DO
!    ENDIF
!  END DO
  END DO
!
!   Compute the sum of the advective and diffusive
!   fluxes  in Y-direction.
!
!$OMP PARALLEL DO PRIVATE(I,J,K,AREAT,AREATV,NSIG,NUMER,DENUM,R,PHIR,&
!$OMP yfluxup,yfluxd,yfluxlw) firstprivate(dx,dy,lambday,epsilon)
  DO pt=1,numvp
     i=indv(1,pt)
     j=indv(2,pt)
!DO J = 2,JM
!  DO I = 2,IM-1
!    IF (DVM(I,J).NE.0.) THEN
     DO K = 1,KB-1
        AREAT = DX*DVDZ(I,J,K)
        AREATV = AREAT*VADV(I,J,K)
        YFLUXD = AREAT*AH(I,J,K)*((FIELD(I,J,K)-FIELD(I,J-1,K))/DY)
        IF (VADV(I,J,K).GE.0.) THEN
           YFLUXUP = AREATV*FIELD(I,J-1,K)
           NSIG = 1
        ELSE
           YFLUXUP = AREATV*FIELD(I,J,K)
           NSIG = -1
        ENDIF
        YFLUXLW = 0.5*AREATV*(FIELD(I,J,K)+FIELD(I,J-1,K)) - &
             & 0.5*LAMBDAY*VADV(I,J,K)**2*(FIELD(I,J,K)-FIELD(I,J-1,K))*AREAT
        IF (J.GT.2 .AND. J.LE.JM-1) THEN
           NUMER = (ABS(VADV(I,J-NSIG,K)) - LAMBDAY*VADV(I,J-NSIG,K)**2)*  &
                &         DX*(DVDZ(I,J-NSIG,K)*(FIELD(I,J-NSIG,K)-FIELD(I,J-1-NSIG,K)))
           DENUM = (ABS(VADV(I,J,K)) - LAMBDAY*VADV(I,J,K)**2)*  &
                &         DX*(DVDZ(I,J,K)*(FIELD(I,J,K)-FIELD(I,J-1,K)))
           IF (ABS(DENUM).GT.EPSILON) THEN
              R = NUMER/DENUM
              PHIR = MAX(0., MIN(2.*R,1.) , MIN(R,2.))
           ELSE
              PHIR = 0.
           ENDIF
        ELSE
           PHIR = 0.
        ENDIF
        YFLUX(I,J,K) = YFLUXUP + PHIR*(YFLUXLW-YFLUXUP)
        YFLUX(I,J,K) = YFLUX(I,J,K) - YFLUXD
     END DO
!    ENDIF
!  END DO
  END DO
!
!   Compute the advective fluxes in sigma-direction.
!
  AREA = DX*DY

!$OMP PARALLEL DO &
!$OMP PRIVATE(I,J,K,AREATW,NSIG,NUMER,DENUM,R,PHIR,zfluxup,zfluxlw) &
!$OMP FIRSTPRIVATE(AREA,dt,epsilon,dzz)
  DO pt=1,numcp
     i=indc(1,pt)
     j=indc(2,pt)
!DO J = 2,JM-1
!  DO I = 2,IM-1
!    IF(FSM(I,J).NE.0.) THEN
     DO K = 2,KB
        AREATW = AREA*W(I,J,K)
        IF (W(I,J,K).GE.0.) THEN
           ZFLUXUP = AREATW*FIELD(I,J,K)
           NSIG = -1
        ELSE
           ZFLUXUP = AREATW*FIELD(I,J,K-1)
           NSIG = 1
        ENDIF
        ZFLUXLW = 0.5*AREATW*(FIELD(I,J,K-1)+FIELD(I,J,K)) - &
             &    0.5*AREA*DT*W(I,J,K)**2*(FIELD(I,J,K-1)-FIELD(I,J,K))/(DZZ(K-1)*D(I,J))
        IF ( (K.EQ.2 .AND. NSIG.EQ.-1) .OR. &
             &      (K.EQ.KB .AND. NSIG.EQ.1) .OR. &
             &      (K.GE.3 .AND. K.LE.KB-1)) THEN
           NUMER = (ABS(W(I,J,K-NSIG)) - (DT/(DZZ(K-1-NSIG)*D(I,J)))* &
                &         W(I,J,K-NSIG)**2)*  &
                &         (FIELD(I,J,K-1-NSIG)-FIELD(I,J,K-NSIG))
           DENUM = (ABS(W(I,J,K)) - (DT/(DZZ(K-1)*D(I,J)))* &
                &         W(I,J,K)**2)*  &
                &         (FIELD(I,J,K-1)-FIELD(I,J,K))
           IF (ABS(DENUM).GT.EPSILON) THEN
              R = NUMER/DENUM
              PHIR = MAX(0., MIN(2.*R,1.) , MIN(R,2.))
           ELSE
              PHIR = 1.
           ENDIF
        ELSE
           PHIR = 1.
        ENDIF
!
        ZFLUX(I,J,K) = ZFLUXUP + PHIR*(ZFLUXLW-ZFLUXUP)
     END DO
!    ENDIF
!  END DO
  END DO
!
!   Take a step to timestep n+1  by adding up the fluxes in and out of each cell.
!
!$OMP PARALLEL DO PRIVATE(I,J,K,NETFLUX,VOLUME,VOLUMEP) &
!$OMP FIRSTPRIVATE(dx,dy,dz,dt)
  DO pt=1,numcp
     i=indc(1,pt)
     j=indc(2,pt)
!DO J = 2,JM-1
!  DO I =2,IM-1
!    IF (FSM(I,J).GT.0.0) THEN
     DO K = 1,KB-1
        NETFLUX = (ZFLUX(I,J,K)-ZFLUX(I,J,K+1)) + &
             &            XFLUX(I+1,J,K) - XFLUX(I,J,K) + &
             &            YFLUX(I,J+1,K) - YFLUX(I,J,K)
        VOLUME = DX*DY*DZ(K)*(H(I,J)+ETA(I,J))
        VOLUMEP = DX*DY*DZ(K)*(H(I,J)+ETAP(I,J))
        FIELD(I,J,K) = (FIELDOLD(I,J,K)*VOLUMEP - DT*NETFLUX)/VOLUME
!
     END DO
!    ENDIF
!  END DO
  END DO
!
  DELFIELD = FIELD - FIELDOLD
  FIELD = FIELD + FAVER
  FIELDOLD = FIELDOLD + FAVER
!
!
  RETURN
END SUBROUTINE SUPERBEEF
SUBROUTINE SUPERBEEUV
!
!           SUPERBEEUV computes the following terms from
!           the moment equations on flux form:
!
!           - d(U*U*D)/d(X) - d(U*V*D)/d(Y) -  d(U*W)/d(SIGMA)
!  and
!           - d(V*U*D)/d(X) - d(V*V*D)/d(Y) -  d(V*W)/d(SIGMA)
!
!           from timestep n to timestep n+1
!           with a superbee limiter TVD scheme. (Roe and Sweby)
!
!           d(*) is the differential operator,
!           D is the dynamic depth,
!           T is time,
!           X and Y are the horisontal coordinates,
!           U is the horisontal velocity in X-direction,
!           V is the horisontal velocity in Y-direction,
!           SIGMA is the vertical coordinate,
!           AM is the horizontal eddy viscosity,
!           W is the vertical velocity. 
! The contributions from these terms are added to the
! contributions from the internal pressure terms in the
! arrays DELTAU and DELTAV.
! This means that SUPERBEEUV must be called after INTERNAL
! and before MODESPLIT.
!
!***ROUTINES CALLED-NONE
!***END PROLOGUE
!
!   Global variables.
!
USE MOD_BOUND
IMPLICIT NONE
!
!   Local variables.
!
!   XFLUXUP,YFLUXUP,ZFLUXUP are used to store upstream advective fluxes.
!   XFLUXLW,YFLUXLW,ZFLUXLW are used to store lax-wendroff advective fluxes.
!   XFLUX,YFLUX,ZFLUX are used to store the final fluxes in
!                     the three space directions
!
! ..
! .. Local Arrays ..
REAL :: XFLUX(IM,JM,KB), XFLUXLW, XFLUXUP, &
      YFLUX(IM,JM,KB), YFLUXLW, YFLUXUP, &
      ZFLUX(IM,JM,KB), ZFLUXLW, ZFLUXUP, &
      FIELDD(IM,JM,KB), DELTAI(IM,JM,KB)
!
REAL AREA,NETFLUX,VOLUME,VOLUMEP,LAMBDAX,LAMBDAY
REAL R,PHIR,NUMER,DENUM,EPSILON,AREATU,AREATV,AREATW
REAL DEPTHZ,UP,UPSIG
INTEGER I,J,K,NSIG
REAL SPEED
!
LAMBDAX = DT/DX
LAMBDAY = DT/DY
EPSILON = 1.E-10
!
!
!  First the advective and diffusive fluxes for the U equation in X-direction.
!
!  River specific
!
IF (RIVLOG) THEN
  DO I = 1,NUMC
    IF (CODERIVER(I).EQ.1) THEN
      SPEED = FRIVER(I)/(DY*DZRIVER(I)*H(IRIVER(I),JRIVER(I)))
      DO K = KRIVER1(I),KRIVER2(I)
        U(IRIVER(I),JRIVER(I),K) = SPEED
        UADV(IRIVER(I),JRIVER(I),K) = SPEED
      END DO
    ELSEIF (CODERIVER(I).EQ.2) THEN
      SPEED = FRIVER(I)/(DX*DZRIVER(I)*H(IRIVER(I),JRIVER(I)))
      DO K = KRIVER1(I),KRIVER2(I)
        V(IRIVER(I),JRIVER(I),K) = SPEED
        VADV(IRIVER(I),JRIVER(I),K) = SPEED
      END DO
    ELSEIF (CODERIVER(I).EQ.3) THEN
      SPEED = FRIVER(I)/(DY*DZRIVER(I)*H(IRIVER(I),JRIVER(I)))
      DO K = KRIVER1(I),KRIVER2(I)
        U(IRIVER(I)+1,JRIVER(I),K) = -SPEED
        UADV(IRIVER(I)+1,JRIVER(I),K) = -SPEED
      END DO
    ELSEIF (CODERIVER(I).EQ.4) THEN
      SPEED = FRIVER(I)/(DX*DZRIVER(I)*H(IRIVER(I),JRIVER(I)))
      DO K = KRIVER1(I),KRIVER2(I)
        V(IRIVER(I),JRIVER(I)+1,K) = -SPEED
        VADV(IRIVER(I),JRIVER(I)+1,K) = -SPEED
      END DO
    ELSE
      WRITE(*,*)'ERROR IN SUPERBEEUV-1'
      STOP
    ENDIF
  END DO
ENDIF 
XFLUX = 0.
XFLUXUP = 0.
XFLUXLW = 0.
FIELDD = 0.
!$OMP PARALLEL DO 
DO K = 1,KB-1
  DO J = 1,JM
    DO I = 1,IM
      FIELDD(I,J,K) = U(I,J,K)*DU(I,J)
    END DO
  END DO
END DO
!
!  Compute differences in FIELDD in X-direction
!
DELTAI = 0.
!$OMP PARALLEL DO 
DO I = 2,IM
  DO J = 1,JM
    DO K = 1,KB
      DELTAI(I,J,K) = FIELDD(I,J,K)-FIELDD(I-1,J,K)
    END DO
  END DO
END DO

!$OMP PARALLEL DO PRIVATE(UP,AREATU,UPSIG,NSIG,NUMER,DENUM,R,PHIR)  FIRSTPRIVATE(LAMBDAX,DY) 
DO J = 2,JM-1
  DO I = 1,IM-1
    IF (FSM(I,J).NE.0.) THEN
      DO K = 1,KB-1
        UP = 0.5*(UADV(I,J,K)+UADV(I+1,J,K))
        AREATU = D(I,J)*UP
        IF (UP.GE.0.) THEN
          XFLUXUP = AREATU*U(I,J,K)
          IF (I.GE.2) THEN
            UPSIG = 0.5*(UADV(I-1,J,K)+UADV(I,J,K))
            NSIG = 1
          ENDIF
        ELSE
          XFLUXUP = AREATU*U(I+1,J,K)
          IF (I.LE.IM-2) THEN
            UPSIG = 0.5*(UADV(I+1,J,K)+UADV(I+2,J,K))
            NSIG = -1
          ENDIF
        ENDIF
        XFLUXLW = AREATU*UP - &
      & 0.5*LAMBDAX*UP*UP*DELTAI(I+1,J,K)
        IF (I.GE.2 .AND. I.LE.IM-2) THEN
          NUMER = (ABS(UPSIG) - LAMBDAX*UPSIG**2)*  &
      &         (D(I-NSIG,J)*(U(I+1-NSIG,J,K)-U(I-NSIG,J,K)))
          DENUM = (ABS(UP) - LAMBDAX*UP**2)*  &
      &         (D(I,J)*(U(I+1,J,K)-U(I,J,K)))
          IF (ABS(DENUM).GT.EPSILON) THEN
            R = NUMER/DENUM
            PHIR = MAX(0., MIN(2.*R,1.) , MIN(R,2.))
          ELSE
            PHIR = 0.
          ENDIF
        ELSE
          PHIR = 0.
        ENDIF
        XFLUX(I,J,K) = XFLUXUP + PHIR*(XFLUXLW-XFLUXUP)
        XFLUX(I,J,K) = XFLUX(I,J,K)*DY
      END DO
    ENDIF
  END DO
END DO
!
!  Compute the advective and diffusive fluxes for the U-equation in Y-direction.
!
YFLUX = 0.
YFLUXUP = 0.
YFLUXLW = 0.
!
!  Compute differences in FIELDD in Y-direction
!
DELTAI = 0.

!$OMP PARALLEL DO 
DO I = 1,IM
  DO J = 2,JM
    DO K = 1,KB
      DELTAI(I,J,K) = FIELDD(I,J,K)-FIELDD(I,J-1,K)
    END DO
  END DO
END DO
!$OMP PARALLEL DO PRIVATE(UP,AREATV,UPSIG,NSIG,NUMER,DENUM,R,PHIR)  FIRSTPRIVATE(LAMBDAY,DX) 
DO K = 1,KB-1
  DO J = 1,JM-1
    DO I = 2,IM-1
      IF (DVM(I-1,J+1).NE.0. .AND. DVM(I,J+1).NE.0.) THEN
        UP = 0.5*(VADV(I-1,J+1,K)+VADV(I,J+1,K))
        AREATV = 0.5*(DV(I-1,J+1)+DV(I,J+1))*UP
        IF (UP.GE.0.) THEN
          YFLUXUP = AREATV*U(I,J,K)
          UPSIG = 0.5*(VADV(I-1,J,K)+VADV(I,J,K))
          NSIG = 1
        ELSE
          YFLUXUP = AREATV*U(I,J+1,K)
          IF (J.LE.JM-2) THEN
            UPSIG = 0.5*(VADV(I-1,J+2,K)+VADV(I,J+2,K))
            NSIG = -1
          ENDIF
        ENDIF
        YFLUXLW = 0.5*AREATV*(U(I,J,K)+U(I,J+1,K)) - &
    & 0.5*LAMBDAY*UP*UP*DELTAI(I,J+1,K)
        IF (J.GE.2 .AND. J.LE.JM-2) THEN
          NUMER = (ABS(UPSIG) - LAMBDAY*UPSIG**2)*  &
    &         0.5*(DV(I-1,J+1-NSIG)+DV(I,J+1-NSIG))* &
    &         (U(I,J+1-NSIG,K) - U(I,J-NSIG,K))
          DENUM = (ABS(UP) - LAMBDAY*UP**2)*  &
    &         0.5*(DV(I-1,J+1)+DV(I,J+1))*(U(I,J+1,K)-U(I,J,K))
          IF (ABS(DENUM).GT.EPSILON) THEN
            R = NUMER/DENUM
            PHIR = MAX(0., MIN(2.*R,1.) , MIN(R,2.))
          ELSE
            PHIR = 0.
          ENDIF
        ELSE
          PHIR = 0.
        ENDIF
        YFLUX(I,J,K) = YFLUXUP + PHIR*(YFLUXLW-YFLUXUP)
        YFLUX(I,J,K) = YFLUX(I,J,K)*DX
     ENDIF
   END DO
 END DO
END DO
!
!  Compute the advective fluxes in sigma-direction for the U-equation.
!
ZFLUX = 0.
ZFLUXUP = 0.
ZFLUXLW = 0.
AREA = DX*DY
!!$OMP PARALLEL DO PRIVATE(UP,AREATW,UPSIG,NSIG,NUMER,DENUM,R,PHIR)  FIRSTPRIVATE(DZZ,AREA,DT)
DO J = 2,JM-1
  DO I = 2,IM-1
    IF (DUM(I,J).NE.0.) THEN
      DO K = 2,KB-1
        UP = 0.5*(W(I,J,K)+W(I-1,J,K))
        AREATW = AREA*UP
        IF (UP.GE.0.) THEN
          ZFLUXUP = AREATW*U(I,J,K)
          UPSIG =  0.5*(W(I,J,K+1)+W(I-1,J,K+1))
          NSIG = -1
        ELSE
          ZFLUXUP = AREATW*U(I,J,K-1)
          UPSIG =  0.5*(W(I,J,K-1)+W(I-1,J,K-1))
          NSIG = 1
        ENDIF
        ZFLUXLW = 0.5*AREATW*(U(I,J,K-1)+U(I,J,K)) - &
    &    0.5*AREA*DT*UP*UP*(U(I,J,K-1)-U(I,J,K))/(DZZ(K-1)*DU(I,J))
      IF ( (K.EQ.2 .AND. NSIG.EQ.-1) .OR. &
    &      (K.GE.3 .AND. K.LE.KB-1)) THEN
        NUMER = (ABS(UPSIG) - (DT/(DZZ(K-1-NSIG)*DU(I,J)))* &
    &         UPSIG**2)*  &
    &         (U(I,J,K-1-NSIG)-U(I,J,K-NSIG))
        DENUM = (ABS(UP) - (DT/(DZZ(K-1)*DU(I,J)))* &
    &         UP**2)*  &
    &         (U(I,J,K-1)-U(I,J,K))
        IF (ABS(DENUM).GT.EPSILON) THEN
          R = NUMER/DENUM
          PHIR = MAX(0., MIN(2.*R,1.) , MIN(R,2.))
        ELSE
          PHIR = 0.
        ENDIF
      ELSE
        PHIR = 1.
      ENDIF
!
        ZFLUX(I,J,K) = ZFLUXUP + PHIR*(ZFLUXLW-ZFLUXUP)
      END DO
    ENDIF
  END DO
END DO
!
!   Take a step to timestep n+1 for the U-equation
!   by adding up the fluxes in and out of the cell.
!
!$OMP PARALLEL DO PRIVATE(NETFLUX) 
DO J = 2,JM-1
  DO I =2,IM-1
    IF (DUM(I,J).GT.0.0) THEN
      DO K = 1,KB-1
        NETFLUX = XFLUX(I,J,K) - XFLUX(I-1,J,K) + &
    &             YFLUX(I,J,K) - YFLUX(I,J-1,K) + &
    &             (ZFLUX(I,J,K) - ZFLUX(I,J,K+1))/DZ(K)
        DELTAU(I,J,K) =  DELTAU(I,J,K) - NETFLUX/AREA
      END DO
    ENDIF
  END DO
END DO
!
!
!   Then the momentum equation in V.
!
!   First the sum of the advective and diffusive fluxes in X-direction.
!
XFLUX = 0.
XFLUXUP = 0.
XFLUXLW = 0.
FIELDD = 0.
!$OMP PARALLEL DO 
DO K = 1,KB-1
  DO J = 1,JM
    DO I = 1,IM
      FIELDD(I,J,K) = V(I,J,K)*DV(I,J)
    END DO
  END DO
END DO
!
!  Compute differences in FIELDD in X-direction
!
DELTAI = 0.
!$OMP PARALLEL DO 
DO I = 2,IM
  DO J = 1,JM
    DO K = 1,KB
      DELTAI(I,J,K) = FIELDD(I,J,K)-FIELDD(I-1,J,K)
    END DO
  END DO
END DO
!$OMP PARALLEL DO PRIVATE(UP,AREATU,UPSIG,NSIG,NUMER,DENUM,R,PHIR) FIRSTPRIVATE(LAMBDAX,DY) 
DO K = 1,KB-1
  DO J = 2,JM-1
    DO I = 1,IM-1
      IF (DUM(I+1,J-1).NE.0. .AND. DUM(I+1,J).NE.0.) THEN
        UP = 0.5*(UADV(I+1,J-1,K)+UADV(I+1,J,K))
        AREATU = 0.5*(DU(I+1,J-1)+DU(I+1,J))*UP
        IF (UP.GE.0.) THEN
          XFLUXUP = AREATU*V(I,J,K)
          UPSIG = 0.5*(UADV(I,J-1,K)+UADV(I,J,K))
          NSIG = 1
        ELSE
          XFLUXUP = AREATU*V(I+1,J,K)
          IF (I.LE.IM-2) THEN
            UPSIG = 0.5*(UADV(I+2,J-1,K)+UADV(I+2,J,K))
            NSIG = -1
          ENDIF
        ENDIF
        XFLUXLW = 0.5*AREATU*(V(I,J,K)+V(I+1,J,K)) - &
    &   0.5*LAMBDAX*UP*UP*DELTAI(I+1,J,K)
        IF (I.GE.2 .AND. I.LE.IM-2) THEN
          NUMER = (ABS(UPSIG) - LAMBDAX*UPSIG**2)*  &
    &         0.5*(DU(I+1-NSIG,J-1)+DU(I+1-NSIG,J))* &
    &         (V(I+1-NSIG,J,K) - V(I-NSIG,J,K))
          DENUM = (ABS(UP) - LAMBDAX*UP**2)*  &
    &         0.5*(DU(I+1,J-1)+DU(I+1,J))*(V(I+1,J,K)-V(I,J,K))
          IF (ABS(DENUM).GT.EPSILON) THEN
            R = NUMER/DENUM
            PHIR = MAX(0., MIN(2.*R,1.) , MIN(R,2.))
          ELSE
            PHIR = 0.
          ENDIF
        ELSE
          PHIR = 0.
        ENDIF
        XFLUX(I,J,K) = XFLUXUP + PHIR*(XFLUXLW-XFLUXUP)
        XFLUX(I,J,K) = XFLUX(I,J,K)*DY
      ENDIF
   END DO
 END DO
END DO
!
!  Compute the advective and diffusive fluxes for the V-equation in Y-direction.
!
YFLUX = 0.
YFLUXUP = 0.
YFLUXLW = 0.
!
!  Compute differences in FIELDD in Y-direction
!
DELTAI = 0.
!$OMP PARALLEL DO 
DO I = 1,IM
  DO J = 2,JM
    DO K = 1,KB
      DELTAI(I,J,K) = FIELDD(I,J,K)-FIELDD(I,J-1,K)
    END DO
  END DO
END DO
!$OMP PARALLEL DO PRIVATE(UP,AREATV,UPSIG,NSIG,NUMER,DENUM,R,PHIR) FIRSTPRIVATE(LAMBDAY,DX) 
DO J = 1,JM-1
  DO I = 2,IM-1
    IF (FSM(I,J).NE.0.) THEN
      DO K = 1,KB-1
        UP = 0.5*(VADV(I,J,K)+VADV(I,J+1,K))
        AREATV = D(I,J)*UP
        IF (UP.GE.0.) THEN
          YFLUXUP = AREATV*V(I,J,K)
          IF (J.GE.2) THEN
            UPSIG = 0.5*(VADV(I,J-1,K)+VADV(I,J,K))
            NSIG = 1
          ENDIF
        ELSE
          YFLUXUP = AREATV*V(I,J+1,K)
          IF (J.LE.JM-2) THEN
            UPSIG = 0.5*(VADV(I,J+1,K)+VADV(I,J+2,K))
            NSIG = -1
          ENDIF
        ENDIF
        YFLUXLW = AREATV*UP - &
      & 0.5*LAMBDAY*UP*UP*DELTAI(I,J+1,K)
        IF (J.GE.2 .AND. J.LE.JM-2) THEN
          NUMER = (ABS(UPSIG) - LAMBDAY*UPSIG**2)*  &
      &         (D(I,J-NSIG)*(V(I,J+1-NSIG,K)-V(I,J-NSIG,K)))
          DENUM = (ABS(UP) - LAMBDAY*UP**2)*  &
      &         (D(I,J)*(V(I,J+1,K)-V(I,J,K)))
          IF (ABS(DENUM).GT.EPSILON) THEN
            R = NUMER/DENUM
            PHIR = MAX(0., MIN(2.*R,1.) , MIN(R,2.))
          ELSE
            PHIR = 0.
          ENDIF
        ELSE
          PHIR = 0.
        ENDIF
        YFLUX(I,J,K) = YFLUXUP + PHIR*(YFLUXLW-YFLUXUP)
        YFLUX(I,J,K) = YFLUX(I,J,K)*DX
      END DO
    ENDIF
  END DO
END DO
!
!  Compute the advective fluxes for the V-equation in sigma-direction.
!
ZFLUX = 0.
ZFLUXUP = 0.
ZFLUXLW = 0.
AREA = DX*DY
!!$OMP PARALLEL DO PRIVATE(UP,AREATW,UPSIG,NSIG,NUMER,DENUM,R,PHIR) FIRSTPRIVATE(AREA,DZZ,DT)
DO J = 2,JM-1
  DO I = 2,IM-1
    IF (DVM(I,J).NE.0.) THEN
      DO K = 2,KB-1
        UP = 0.5*(W(I,J,K)+W(I,J-1,K))
        AREATW = AREA*UP
        IF (UP.GE.0.) THEN
          ZFLUXUP = AREATW*V(I,J,K)
          UPSIG =  0.5*(W(I,J,K+1)+W(I,J-1,K+1))
          NSIG = -1
        ELSE
          ZFLUXUP = AREATW*V(I,J,K-1)
          UPSIG =  0.5*(W(I,J,K-1)+W(I,J-1,K-1))
          NSIG = 1
        ENDIF
        ZFLUXLW = 0.5*AREATW*(V(I,J,K-1)+V(I,J,K)) - &
    &    0.5*AREA*DT*UP*UP*(V(I,J,K-1)-V(I,J,K))/(DZZ(K-1)*DV(I,J))
      IF ( (K.EQ.2 .AND. NSIG.EQ.-1) .OR. &
    &      (K.GE.3 .AND. K.LE.KB-1)) THEN
        NUMER = (ABS(UPSIG) - (DT/(DZZ(K-1-NSIG)*DV(I,J)))* &
    &         UPSIG**2)*  &
    &         (V(I,J,K-1-NSIG)-V(I,J,K-NSIG))
        DENUM = (ABS(UP) - (DT/(DZZ(K-1)*DV(I,J)))* &
    &         UP**2)*  &
    &         (V(I,J,K-1)-V(I,J,K))
        IF (ABS(DENUM).GT.EPSILON) THEN
          R = NUMER/DENUM
          PHIR = MAX(0., MIN(2.*R,1.) , MIN(R,2.))
        ELSE
          PHIR = 0.
        ENDIF
      ELSE
        PHIR = 1.
      ENDIF
!
        ZFLUX(I,J,K) = ZFLUXUP + PHIR*(ZFLUXLW-ZFLUXUP)
      END DO
    ENDIF
  END DO
END DO
!
!   Take a step to timestep n+1 for the V-equation by adding up the
!   fluxes in and out of the cell.
!
!$OMP PARALLEL DO PRIVATE(NETFLUX)
DO J = 2,JM-1
  DO I =2,IM-1
    IF (DVM(I,J).GT.0.0) THEN
      DO K = 1,KB-1
        NETFLUX = XFLUX(I,J,K) - XFLUX(I-1,J,K) + &
    &             YFLUX(I,J,K) - YFLUX(I,J-1,K) + &
    &             (ZFLUX(I,J,K) - ZFLUX(I,J,K+1))/DZ(K)
        DELTAV(I,J,K) =  DELTAV(I,J,K) - NETFLUX/AREA
      END DO
    ENDIF
  END DO
END DO
!
!
!  River specific
!
IF (RIVLOG) THEN
  DO I = 1,NUMC
    IF (CODERIVER(I).EQ.1) THEN
      DO K = KRIVER1(I),KRIVER2(I)
        U(IRIVER(I),JRIVER(I),K) = 0.
        UADV(IRIVER(I),JRIVER(I),K) = 0.
      END DO
    ELSEIF (CODERIVER(I).EQ.2) THEN
      DO K = KRIVER1(I),KRIVER2(I)
        V(IRIVER(I),JRIVER(I),K) = 0.
        VADV(IRIVER(I),JRIVER(I),K) = 0.
      END DO
    ELSEIF (CODERIVER(I).EQ.3) THEN
      DO K = KRIVER1(I),KRIVER2(I)
        U(IRIVER(I)+1,JRIVER(I),K) = 0.
        UADV(IRIVER(I)+1,JRIVER(I),K) = 0.
      END DO
    ELSEIF (CODERIVER(I).EQ.4) THEN
      DO K = KRIVER1(I),KRIVER2(I)
        V(IRIVER(I),JRIVER(I)+1,K) = 0.
        VADV(IRIVER(I),JRIVER(I)+1,K) = 0.
      END DO
    ELSE
      WRITE(*,*)'ERROR IN SUPERBEEUV-2'
      STOP
    ENDIF
  END DO
ENDIF 
RETURN
END
SUBROUTINE TIDEFRS(IS)
USE MOD_MAIN
IMPLICIT NONE
INTEGER IS
!
REAL TIMESEC
!
!  TIDEFRS updates the fields ETATFRS,UATFRS,VATFRS,UTFRS,VTFRS
!  as a function of time and the amplitudes and phases of the
!  tidal components
!
TIMESEC = DT*(ISTEP-1) + DT*IS/N2D
ETATFRS = 0.
I = 1
J = 1
DO K = 1,KCON
      ETATFRS(I,J) =  ETATFRS(I,J) + ETATAMP(I,J,K)*COS(FREQ(K)*TIMESEC-ETATPHA(I,J,K))
END DO
!
!  Then define ETATFRS through the FRS-zones such that d(ETA)/dX is
!  correct assuming that the speed of the wave is SQRT(GRAV*H).
!
DO I = 1,LB
  DO J = 13,14
    ETATFRS(I,J) = ETATFRS(1,1) 
  END DO
END DO
DO I = 15,18
  DO J = 1,LB
    ETATFRS(I,J) = ETATFRS(1,1) 
  END DO
END DO
!
UATFRS = 0.
VATFRS = 0.
!
UTFRS = 0.
VTFRS = 0.
!
RETURN
END
SUBROUTINE TIDEINIT
!
!  TIDEINIT initializes the tidal forcing fields FREQ, ETATAMP, ETATPHA,
!  UATAMP, UATPHA, VATAMP and VATPHA to be used at the open bounaries to force in the
!  tidal components.
!
USE MOD_BOUND
IMPLICIT NONE
!
REAL PI
INTEGER K
INTEGER I,J
!
PI = 4.*ATAN(1.0)
!
!  Define the frequencies in radians per second.
!
FREQ(1) = 28.984*PI/(180.*3600.)  !  M2
FREQ(2) = 30.000*PI/(180.*3600.)  !  S2
FREQ(3) = 28.440*PI/(180.*3600.)  !  N2
FREQ(4) = 15.041*PI/(180.*3600.)  !  K1
!
!  Define the phases and amplitudes of the tidal fields.
!
ETATAMP(1:IM,1:JM,1) = 0.452  ! From tidal tabels from Norway
ETATAMP(1:IM,1:JM,2) = 0.163 
ETATAMP(1:IM,1:JM,3) = 0.089
ETATAMP(1:IM,1:JM,4) = 0.034
!
ETATPHA(1:IM,1:JM,1) = 288.2*PI/180.
ETATPHA(1:IM,1:JM,2) = 327.1*PI/180.
ETATPHA(1:IM,1:JM,3) = 267.8*PI/180.
ETATPHA(1:IM,1:JM,4) = 160.1*PI/180.
!
UATAMP = 0.
VATAMP = 0.
UATPHA = 0.
VATPHA = 0.
!
!
RETURN
END


SUBROUTINE UPDATEDD
USE STATE
IMPLICIT NONE
INTEGER I,J,K
!
! UPDATEDD updates the Dynamic Depth fields
! D,DU,DV,DDZ,DUDZ and DVDZ
! after ETA is updated in each time step.
!
D(1:IM,1:JM) = FSM(1:IM,1:JM)*(H(1:IM,1:JM)+ETA(1:IM,1:JM))
DU(1,1:JM) = DUM(1,1:JM)*(HU(1,1:JM)+ETA(1,1:JM))
DU(2:IM,1:JM) = DUM(2:IM,1:JM)*(HU(2:IM,1:JM)+0.5* &
     & (ETA(1:IM-1,1:JM)+ETA(2:IM,1:JM)))
DV(1:IM,1) = DVM(1:IM,1)*(HV(1:IM,1)+ETA(1:IM,1))
DV(1:IM,2:JM) = DVM(1:IM,2:JM)*(HV(1:IM,2:JM)+0.5* &
     & (ETA(1:IM,1:JM-1)+ETA(1:IM,2:JM)))
DO K = 1,KB-1
  DO I = 1,IM
    DO J = 1,JM
      DDZ(I,J,K) = DZ(K)*D(I,J)
      DUDZ(I,J,K) = DZ(K)*DU(I,J)
      DVDZ(I,J,K) = DZ(K)*DV(I,J)
    END DO
  END DO
END DO
RETURN
END
SUBROUTINE UPSTREAMQ(QFIELD)
!
!           UPSTREAMQ integrates the equation
!
!           d(QFIELD*D)/d(T) + d(QFIELD*U*D)/d(X) + d(QFIELD*V*D)/d(Y) +
!       
!           d(QFIELD*W)/d(SIGMA) = 0
!
!           from timestep n to timestep n+1
!           with the upstream method
!
!           d(*) is the differential operator,
!           QFIELD is Q2 or Q2L,
!           D is the dynamic depth,
!           T is time,
!           X and Y are the horisontal coordinates,
!           U is the horisontal velocity in X-direction,
!           V is the horisontal velocity in Y-direction,
!           SIGMA is the vertical coordinate,
!           W is the vertical velocity. 
!
!   QFIELD is updated for indices (2:IM-1,2:JM-1,2:KB-1)
!
!   Global variables.
!
USE STATE
IMPLICIT NONE
REAL QFIELD(IM,JM,KB)
!
!   Local variables.
!
REAL, DIMENSION(IM,JM,KB) :: XFLUX,YFLUX,ZFLUX
REAL AREAT,VEL,AREATU,NETFLUX,VOLUME
INTEGER I,J,K
!
!   First advection in X-direction.
!
XFLUX = 0.
DO J = 1,JM
  DO I = 2,IM
    IF (DUM(I,J).NE.0.) THEN
      DO K = 2,KB-1
        AREAT = DY*DU(I,J)*DZZ(K-1)
        VEL = 0.5*(UADV(I,J,K)+UADV(I,J,K-1))
        AREATU = AREAT*VEL
        IF (VEL.GE.0.) THEN
          XFLUX(I,J,K) = AREATU*QFIELD(I-1,J,K)
        ELSE
          XFLUX(I,J,K) = AREATU*QFIELD(I,J,K)
        ENDIF
      END DO
    ENDIF
  END DO
END DO
!
YFLUX = 0.
DO J = 2,JM
  DO I = 1,IM
    IF (DVM(I,J).NE.0.) THEN
      DO K = 2,KB-1
        AREAT = DX*DV(I,J)*DZZ(K-1)
        VEL = 0.5*(VADV(I,J,K)+VADV(I,J,K-1))
        AREATU = AREAT*VEL
        IF (VEL.GE.0.) THEN
          YFLUX(I,J,K) = AREATU*QFIELD(I,J-1,K)
        ELSE
          YFLUX(I,J,K) = AREATU*QFIELD(I,J,K)
        ENDIF
      END DO
    ENDIF
  END DO
END DO
!
ZFLUX = 0.
!
AREAT = DX*DY
DO J = 2,JM-1
  DO I = 2,IM-1
    IF(FSM(I,J).NE.0.) THEN
      DO K = 2,KB
        VEL = 0.5*(W(I,J,K)+W(I,J,K-1))
        AREATU = AREAT*VEL
        IF (VEL.GE.0.) THEN
          ZFLUX(I,J,K) = AREATU*QFIELD(I,J,K)
        ELSE
          ZFLUX(I,J,K) = AREATU*QFIELD(I,J,K-1)
        ENDIF
      END DO
    ENDIF
  END DO
END DO
!
!   Take a step to timestep n+1.
!
DO J = 2,JM-1
  DO I =2,IM-1
    IF (FSM(I,J).GT.0.0) THEN
      DO K = 2,KB-1
        NETFLUX = (ZFLUX(I,J,K)-ZFLUX(I,J,K+1)) + &
   &            XFLUX(I+1,J,K) - XFLUX(I,J,K) + &
   &            YFLUX(I,J+1,K) - YFLUX(I,J,K)
        VOLUME = 0.5*DX*DY*(DDZ(I,J,K)+DDZ(I,J,K-1))
        QFIELD(I,J,K) = QFIELD(I,J,K) - DT*NETFLUX/VOLUME
      END DO
    ENDIF
  END DO
END DO
!
RETURN
END
SUBROUTINE VERTDIFF(F,WFSURF)
!
!  VERTDIFF propagates the solution of the equations
!
!  d(FD)/dt = d((KH/D)*d(F)/d(sigma))/d(sigma)
!
!  with boundary conditions:
!
!  (KH/D)*d(F)/d(sigma) = WFSURF  at sigma=0
!  (KH/D)*d(F)/d(sigma) = 0 at sigma=-1
!
!  The solutions are propagated with an fully implicit method.
!
USE STATE
IMPLICIT NONE
REAL F(IM,JM,KB),WFSURF(IM,JM)
!
! Local variables.
!
INTEGER I,J,K,pt
REAL DSQ
!REAL, DIMENSION(IM,JM,KB-1) :: ALF,BET
REAL, DIMENSION(kb-1) :: RHS,A,B,C,G, alf, bet
!
!
!  First propagate the F-equation over all internal sea points.
!

!$omp parallel do private( i,j,k, rhs,a,b,c,g,alf,bet, dsq) &
!$omp firstprivate(dt,dz,dzz)
DO pt=1,numcp
   i=indc(1,pt)
   j=indc(2,pt)
!DO J = 2,JM-1
!  DO I = 2,IM-1
!    IF (FSM(I,J).NE.0.) THEN
      DSQ = D(I,J)*D(I,J)
!
! Define the right hand side of the solution matrix.
!
      RHS(1) = F(I,J,1) + DT*WFSURF(I,J)/(D(I,J)*DZ(1))
      DO K = 2,KB-1
        RHS(K) = F(I,J,K)
      END DO
!
! Define the upper diagonal elements of the tridiagonal solution matrix.
!
      DO K = 1,KB-2
        B(K) = -DT*KH(I,J,K+1)/(DSQ*DZ(K)*DZZ(K))
      END DO
!
! Define the lower diagonal elements.
!
      DO K = 2,KB-1
        C(K) = -DT*KH(I,J,K)/(DSQ*DZ(K)*DZZ(K-1))
      END DO
!
! Define the diagonal elements.
!
      A(1) = 1. - B(1)
      DO K = 2,KB-2
        A(K) = 1. - B(K) - C(K)
      END DO
      A(KB-1) = 1. - C(KB-1)
!
! Solve the system of equations.
!
!
!   LU-decompose the linear system.
!
      ALF(1) = A(1)
      DO K = 2,KB-1
        ALF(K) = A(K) - C(K)*B(K-1)/ALF(K-1)
      END DO
      DO K = 2,KB-1
        BET(K) = C(K)/ALF(K-1)
      END DO
!
!   Forward substitute the right hand side.
!
      G(1) = RHS(1)
      DO K = 2,KB-1
        G(K) = RHS(K) - BET(K)*G(K-1)
      END DO
!
!   Back substitute to compute the solution F.
!
      F(i,j,KB-1) = G(KB-1)/ALF(KB-1)
      DO K = KB-2,1,-1
        F(i,j,K) = (G(K) - B(K)*F(i,j,K+1))/ALF(K)
      END DO
!    ENDIF
!  END DO
END DO
!
RETURN
END
SUBROUTINE VERTVISCUVB(UBCLIN,VBCLIN)
!
!  VERTVISCUV propagates the solution of the equations
!
!  d(UD)/dt = d((KM/D)*d(U)/d(sigma))/d(sigma)
!
!  d(VD)/dt = d((KM/D)*d(V)/d(sigma))/d(sigma)
!
!  with boundary conditions:
!
!  (KM/D)*d(U)/d(sigma) = WSURFX  at sigma=0
!  (KM/D)*d(V)/d(sigma) = WSURFY  at sigma=0
!  (KM/D)*d(U)/d(sigma) = CBC*ABS((U,V))*U at sigma=-1
!  (KM/D)*d(V)/d(sigma) = CBC*ABS((U,V))*V at sigma=-1
!
!  where (WSURFX,WSURFY) are the surface wind stresses in X and Y directions
!  and D the bottom drag coefficient.
!
!  The solutions are propagated with an fully implicit method.
!
USE STATE
IMPLICIT NONE
!
! Local variables.
!
INTEGER I,J,K,pt
REAL DUSQ,FRICT,DVSQ
REAL, DIMENSION(KB-1)  :: RHS,A,B,C,XX,ALF,BET,G
REAL, DIMENSION(IM,JM,KB) :: KMU,KMV,UBCLIN,VBCLIN
!
!  First propagate the U-equation over all internal sea points.
!
!  Average vertical viscosity coefficients to U-points.
!
!$OMP PARALLEL DO PRIVATE(i,j,k)
DO K=2,KB
    DO J=1,JM
        DO I=1,IM
            IF( I>1)THEN
                KMU(I,J,K) = 0.5*(KM(I-1,J,K)+KM(I,J,K))
            ELSE
                KMU(I,J,K) = KM(I,J,K)
            END IF
            IF( J>1)THEN
                KMV(I,J,K) = 0.5*(KM(I,J-1,K)+KM(I,J,K))
            ELSE
                KMV(I,J,K) = KM(I,J,K)
            END IF            
        END DO
    END DO
END DO


!$OMP PARALLEL DO PRIVATE(I,J,K,DUSQ,FRICT,RHS,A,B,C,XX,ALF,BET,G) &
!$omp  firstprivate(dt,dz,dzz)
DO pt=1,numup
   i=indu(1,pt)
   j=indu(2,pt)

!DO J = 2,JM-1
!  DO I = 2,IM
!    IF (DUM(I,J).NE.0.) THEN
      DUSQ = DU(I,J)*DU(I,J)
      
      FRICT = 0.5*(CBC(I,J)+CBC(I-1,J))*SQRT(U(I,J,KB-1)**2 &
           + (0.25*(V(I,J,KB-1)  &
           + V(I,J+1,KB-1)+V(I-1,J,KB-1)+V(I-1,J+1,KB-1)))**2)
      
!
! Define the right hand side of the solution matrix.
!
      RHS(1) = Ubclin(I,J,1) + DT*WUSURF(I,J)/(DU(I,J)*DZ(1))
      DO K = 2,KB-2
        RHS(K) = Ubclin(I,J,K)
      END DO
      RHS(KB-1) = UBCLIN(I,J,KB-1) - DT*FRICT*UA(I,J)/(DU(I,J)*DZ(KB-1))
      
! Define the upper diagonal elements of the tridiagonal solution matrix.
!
      DO K = 1,KB-2
        B(K) = -DT*KMU(I,J,K+1)/(DUSQ*DZ(K)*DZZ(K))
      END DO
!
! Define the lower diagonal elements.
!
      DO K = 2,KB-1
        C(K) = -DT*KMU(I,J,K)/(DUSQ*DZ(K)*DZZ(K-1))
      END DO
!
! Compute bottom friction.
!
!
! Define the diagonal elements.
!
      A(1) = 1. - B(1)
      DO K = 2,KB-2
        A(K) = 1. - B(K) - C(K)
      END DO
      A(KB-1) = 1. - C(KB-1) + DT*FRICT/(DU(I,J)*DZ(KB-1))
!
! Solve the system of equations.
!
!
!   LU-decompose the linear system.
!
      ALF(1) = A(1)
      DO K = 2,KB-1
        ALF(K) = A(K) - C(K)*B(K-1)/ALF(K-1)
      END DO
      DO K = 2,KB-1
        BET(K) = C(K)/ALF(K-1)
      END DO
!
!   Forward substitute the right hand side.
!
      G(1) = RHS(1)
      DO K = 2,KB-1
        G(K) = RHS(K) - BET(K)*G(K-1)
      END DO
!
!   Back substitute to compute the solution U.
!
      Ubclin(I,J,KB-1) = G(KB-1)/ALF(KB-1)
      DO K = KB-2,1,-1
        Ubclin(I,J,K) = (G(K) - B(K)*Ubclin(I,J,K+1))/ALF(K)
      END DO
      WUBOT(I,J) = -FRICT*(Ubclin(I,J,KB-1)+ua(i,j))
!    ENDIF
!  END DO
END DO
!
!  Then propagate the V-equation over all internal sea points.
!
!
!$omp parallel do private(i,j,k,dvsq,rhs,a,b,c,xx,alf,bet,g,frict) &
!$omp  firstprivate(dt,dz,dzz)
DO pt=1,numvp
   i=indv(1,pt)
   j=indv(2,pt)
!DO J = 2,JM-1
!  DO I = 2,IM
!    IF (DVM(I,J).NE.0.) THEN

      DVSQ = DV(I,J)*DV(I,J)
!
! Compute bottom friction.
!
   FRICT = 0.5*(CBC(I,J)+CBC(I,J-1))*SQRT(V(I,J,KB-1)**2 + (0.25*(U(I,J,KB-1)+&
      &  U(I+1,J,KB-1)+U(I,J-1,KB-1)+U(I+1,J-1,KB-1)))**2)
      
!
! Define the right hand side of the solution matrix.
!
      RHS(1) = Vbclin(I,J,1) + DT*WVSURF(I,J)/(DV(I,J)*DZ(1))
      DO K = 2,KB-2
        RHS(K) = Vbclin(I,J,K)
      END DO
      RHS(KB-1) = VBCLIN(I,J,KB-1) - DT*FRICT*VA(I,J)/(DV(I,J)*DZ(KB-1))!
! Define the upper diagonal elements of the tridiagonal solution matrix.
!
      DO K = 1,KB-2
        B(K) = -DT*KMV(I,J,K+1)/(DVSQ*DZ(K)*DZZ(K))
      END DO
!
! Define the lower diagonal elements.
!
      DO K = 2,KB-1
        C(K) = -DT*KMV(I,J,K)/(DVSQ*DZ(K)*DZZ(K-1))
      END DO
!
! Define the diagonal elements.
!
      A(1) = 1. - B(1)
      DO K = 2,KB-2
        A(K) = 1. - B(K) - C(K)
      END DO
      A(KB-1) = 1. - C(KB-1) + DT*FRICT/(DV(I,J)*DZ(KB-1))
!
! Solve the system of equations.
!
!
!   LU-decompose the linear system.
!
      ALF(1) = A(1)
      DO K = 2,KB-1
        ALF(K) = A(K) - C(K)*B(K-1)/ALF(K-1)
      END DO
      DO K = 2,KB-1
        BET(K) = C(K)/ALF(K-1)
      END DO
!
!   Forward substitute the right hand side.
!
      G(1) = RHS(1)
      DO K = 2,KB-1
        G(K) = RHS(K) - BET(K)*G(K-1)
      END DO
!
!   Back substitute to compute the solution V.
!
      Vbclin(I,J,KB-1) = G(KB-1)/ALF(KB-1)
      DO K = KB-2,1,-1
        Vbclin(I,J,K) = (G(K) - B(K)*Vbclin(I,J,K+1))/ALF(K)
      END DO
      WVBOT(I,J) = -FRICT*(Vbclin(I,J,KB-1)+va(i,j))
!    ENDIF
!  END DO
END DO
!
RETURN
END
SUBROUTINE WINDFORCING
!
!  WINDFORCING estimates 
!  the wind stresses WUSURF and WVSURF
!  from windspeeds 10m above the sea surface
!
!  PATM may also be redefined in WINDFORCING
!
USE MOD_MAIN
IMPLICIT NONE
REAL TIMEHOUR,ROAD0,WS,FACT,CDRAG
!
!  Spin up a wind with constant direction as a function of time.
!
TIMEHOUR = DT*ISTEP/3600.
IF (TIMEHOUR .LT. 12.) THEN
   WSPEEDU = 5.*TIMEHOUR/12.
   WSPEEDV = 0.
ELSE
   WSPEEDU = 5.
   WSPEEDV = 0.
END IF
!
!  Compute WUSURF and WVSURF from the wind speeds.
!
ROAD0=ROAIR/RHO0
!
DO I=1,IM
  DO J=1,JM
     WS=SQRT(WSPEEDU(I,J)*WSPEEDU(I,J)+WSPEEDV(I,J)*WSPEEDV(I,J))
     FACT=1.2
     IF(WS.GE.11.) FACT=0.49 +0.065*WS
     CDRAG=1.0E-3*FACT
     WUSURF(I,J)=ROAD0*CDRAG*WS*WSPEEDU(I,J)
     WVSURF(I,J)=ROAD0*CDRAG*WS*WSPEEDV(I,J)
  END DO
END DO
WRITE(*,*)'WIND',WSPEEDU(20,20),WUSURF(20,20)
!
!  Define the atmospheric pressure
!
PATM = PMEAN
!
RETURN
END
SUBROUTINE WREAL
USE STATE
IMPLICIT NONE
!***BEGIN PROLOGUE WREAL
!***REVISION DATE 300196
!
!***AUTHOR
!
!     Revised by 
!
!            Jarle Berntsen, Department of Mathematics
!
!***PURPOSE WREAL computes the real vertical velocity, WR.
!
!***ROUTINES CALLED NONE
!***END PROLOGUE WREAL
!
REAL, DIMENSION(IM,JM,KB) :: ZLEV
!
!   Local variables.
!
INTEGER I,J,K
REAL DXR,DYT,DTI
!
!
DXR = 1./DX
DYT = 1./DY
DTI = 1./DT
!
WR = 0.
!
!   Adjust WR by taking into account the
!   gradient of the sigma-surfaces.
!
DO K = 1,KB-1
  DO J = 1,JM
    DO I = 1,IM
      ZLEV(I,J,K)=ZZ(K)*D(I,J) + ETA(I,J)
    END DO
  END DO
!
  DO J = 2,JM-1
    DO I = 2,IM-1
      WR(I,J,K)=0.5*(W(I,J,K)+W(I,J,K+1)) + 0.5* &
     &   ( U(I+1,J,K)*(ZLEV(I+1,J,K)-ZLEV(I,J,K))*DXR  + &
     &     U(I,J,K)*(ZLEV(I,J,K)-ZLEV(I-1,J,K))*DXR    + &
     &     V(I,J+1,K)*(ZLEV(I,J+1,K)-ZLEV(I,J,K))*DYT  + &
     &     V(I,J,K)*(ZLEV(I,J,K)-ZLEV(I,J-1,K))*DYT  ) + &
     &    (1.+ZZ(K))*(ETA(I,J)-ETAP(I,J))*DTI
       WR(I,J,K) = WR(I,J,K)*FSM(I,J)
    END DO
  END DO
END DO
!
!
RETURN
END
ian@ian-HP-Stream-Laptop-11-y0XX:~/bergenoceanforecast$ sloccount *.f90
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/bergenoceanforecast/add1.f90 to top_dir
Adding /home/ian/bergenoceanforecast/addeta.f90 to top_dir
Adding /home/ian/bergenoceanforecast/advect.f90 to top_dir
Adding /home/ian/bergenoceanforecast/atmosp.f90 to top_dir
Adding /home/ian/bergenoceanforecast/bound2d.f90 to top_dir
Adding /home/ian/bergenoceanforecast/bound.f90 to top_dir
Adding /home/ian/bergenoceanforecast/condition.f90 to top_dir
Adding /home/ian/bergenoceanforecast/dens.f90 to top_dir
Adding /home/ian/bergenoceanforecast/densunesco.f90 to top_dir
Adding /home/ian/bergenoceanforecast/depth.f90 to top_dir
Adding /home/ian/bergenoceanforecast/diagnose.f90 to top_dir
Adding /home/ian/bergenoceanforecast/dypgrin.f90 to top_dir
Adding /home/ian/bergenoceanforecast/fieldinit.f90 to top_dir
Adding /home/ian/bergenoceanforecast/files.f90 to top_dir
Adding /home/ian/bergenoceanforecast/horviscuv2d.f90 to top_dir
Adding /home/ian/bergenoceanforecast/horviscuv2dpom.f90 to top_dir
Adding /home/ian/bergenoceanforecast/horviscuv.f90 to top_dir
Adding /home/ian/bergenoceanforecast/horviscuvpom.f90 to top_dir
Adding /home/ian/bergenoceanforecast/internal4.f90 to top_dir
Adding /home/ian/bergenoceanforecast/internal.f90 to top_dir
Adding /home/ian/bergenoceanforecast/Main.f90 to top_dir
Adding /home/ian/bergenoceanforecast/mod_bound.f90 to top_dir
Adding /home/ian/bergenoceanforecast/modesplit.f90 to top_dir
Adding /home/ian/bergenoceanforecast/mod_main.f90 to top_dir
Adding /home/ian/bergenoceanforecast/my2halv.f90 to top_dir
Adding /home/ian/bergenoceanforecast/ncalfa.f90 to top_dir
Adding /home/ian/bergenoceanforecast/nrg3d.f90 to top_dir
Adding /home/ian/bergenoceanforecast/outbottomfem.f90 to top_dir
Adding /home/ian/bergenoceanforecast/outetafem.f90 to top_dir
Adding /home/ian/bergenoceanforecast/output.f90 to top_dir
Adding /home/ian/bergenoceanforecast/outsections.f90 to top_dir
Adding /home/ian/bergenoceanforecast/postid4.f90 to top_dir
Adding /home/ian/bergenoceanforecast/pzlevel.f90 to top_dir
Adding /home/ian/bergenoceanforecast/relax.f90 to top_dir
Adding /home/ian/bergenoceanforecast/rivers.f90 to top_dir
Adding /home/ian/bergenoceanforecast/sectiout.f90 to top_dir
Adding /home/ian/bergenoceanforecast/setup.f90 to top_dir
Adding /home/ian/bergenoceanforecast/smagor2d.f90 to top_dir
Adding /home/ian/bergenoceanforecast/smagor.f90 to top_dir
Adding /home/ian/bergenoceanforecast/state.f90 to top_dir
Adding /home/ian/bergenoceanforecast/stepu3d.f90 to top_dir
Adding /home/ian/bergenoceanforecast/stepv3d.f90 to top_dir
Adding /home/ian/bergenoceanforecast/superbeef.f90 to top_dir
Adding /home/ian/bergenoceanforecast/superbeeuv.f90 to top_dir
Adding /home/ian/bergenoceanforecast/tidefrs.f90 to top_dir
Adding /home/ian/bergenoceanforecast/tideinit.f90 to top_dir
Adding /home/ian/bergenoceanforecast/updatedd.f90 to top_dir
Adding /home/ian/bergenoceanforecast/upstreamq.f90 to top_dir
Adding /home/ian/bergenoceanforecast/vertdiff.f90 to top_dir
Adding /home/ian/bergenoceanforecast/vertviscuvb.f90 to top_dir
Adding /home/ian/bergenoceanforecast/windforcing.f90 to top_dir
Adding /home/ian/bergenoceanforecast/wreal.f90 to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
4613    top_dir         f90=4613


Totals grouped by language (dominant language first):
f90:           4613 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 4,613
Development Effort Estimate, Person-Years (Person-Months) = 1.00 (11.95)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.53 (6.42)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 1.86
Total Estimated Cost to Develop                           = $ 134,532
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
ian@ian-HP-Stream-Laptop-11-y0XX:~/bergenoceanforecast$ 

