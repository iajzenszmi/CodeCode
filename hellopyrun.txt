ian@ian-Aspire-One-753:~$ cat hello.py
import scipy
print("hello world")
print(2+2)
print(scipy.math.sin(90))
print("multiplication tables")
for i in range(1,13):
    for j in range(1,13):
	        print(i,'*',j," = ",i*j) 
ian@ian-Aspire-One-753:~$ python hello.py
hello world
4
0.893996663601
multiplication tables
(1, '*', 1, ' = ', 1)
(1, '*', 2, ' = ', 2)
(1, '*', 3, ' = ', 3)
(1, '*', 4, ' = ', 4)
(1, '*', 5, ' = ', 5)
(1, '*', 6, ' = ', 6)
(1, '*', 7, ' = ', 7)
(1, '*', 8, ' = ', 8)
(1, '*', 9, ' = ', 9)
(1, '*', 10, ' = ', 10)
(1, '*', 11, ' = ', 11)
(1, '*', 12, ' = ', 12)
(2, '*', 1, ' = ', 2)
(2, '*', 2, ' = ', 4)
(2, '*', 3, ' = ', 6)
(2, '*', 4, ' = ', 8)
(2, '*', 5, ' = ', 10)
(2, '*', 6, ' = ', 12)
(2, '*', 7, ' = ', 14)
(2, '*', 8, ' = ', 16)
(2, '*', 9, ' = ', 18)
(2, '*', 10, ' = ', 20)
(2, '*', 11, ' = ', 22)
(2, '*', 12, ' = ', 24)
(3, '*', 1, ' = ', 3)
(3, '*', 2, ' = ', 6)
(3, '*', 3, ' = ', 9)
(3, '*', 4, ' = ', 12)
(3, '*', 5, ' = ', 15)
(3, '*', 6, ' = ', 18)
(3, '*', 7, ' = ', 21)
(3, '*', 8, ' = ', 24)
(3, '*', 9, ' = ', 27)
(3, '*', 10, ' = ', 30)
(3, '*', 11, ' = ', 33)
(3, '*', 12, ' = ', 36)
(4, '*', 1, ' = ', 4)
(4, '*', 2, ' = ', 8)
(4, '*', 3, ' = ', 12)
(4, '*', 4, ' = ', 16)
(4, '*', 5, ' = ', 20)
(4, '*', 6, ' = ', 24)
(4, '*', 7, ' = ', 28)
(4, '*', 8, ' = ', 32)
(4, '*', 9, ' = ', 36)
(4, '*', 10, ' = ', 40)
(4, '*', 11, ' = ', 44)
(4, '*', 12, ' = ', 48)
(5, '*', 1, ' = ', 5)
(5, '*', 2, ' = ', 10)
(5, '*', 3, ' = ', 15)
(5, '*', 4, ' = ', 20)
(5, '*', 5, ' = ', 25)
(5, '*', 6, ' = ', 30)
(5, '*', 7, ' = ', 35)
(5, '*', 8, ' = ', 40)
(5, '*', 9, ' = ', 45)
(5, '*', 10, ' = ', 50)
(5, '*', 11, ' = ', 55)
(5, '*', 12, ' = ', 60)
(6, '*', 1, ' = ', 6)
(6, '*', 2, ' = ', 12)
(6, '*', 3, ' = ', 18)
(6, '*', 4, ' = ', 24)
(6, '*', 5, ' = ', 30)
(6, '*', 6, ' = ', 36)
(6, '*', 7, ' = ', 42)
(6, '*', 8, ' = ', 48)
(6, '*', 9, ' = ', 54)
(6, '*', 10, ' = ', 60)
(6, '*', 11, ' = ', 66)
(6, '*', 12, ' = ', 72)
(7, '*', 1, ' = ', 7)
(7, '*', 2, ' = ', 14)
(7, '*', 3, ' = ', 21)
(7, '*', 4, ' = ', 28)
(7, '*', 5, ' = ', 35)
(7, '*', 6, ' = ', 42)
(7, '*', 7, ' = ', 49)
(7, '*', 8, ' = ', 56)
(7, '*', 9, ' = ', 63)
(7, '*', 10, ' = ', 70)
(7, '*', 11, ' = ', 77)
(7, '*', 12, ' = ', 84)
(8, '*', 1, ' = ', 8)
(8, '*', 2, ' = ', 16)
(8, '*', 3, ' = ', 24)
(8, '*', 4, ' = ', 32)
(8, '*', 5, ' = ', 40)
(8, '*', 6, ' = ', 48)
(8, '*', 7, ' = ', 56)
(8, '*', 8, ' = ', 64)
(8, '*', 9, ' = ', 72)
(8, '*', 10, ' = ', 80)
(8, '*', 11, ' = ', 88)
(8, '*', 12, ' = ', 96)
(9, '*', 1, ' = ', 9)
(9, '*', 2, ' = ', 18)
(9, '*', 3, ' = ', 27)
(9, '*', 4, ' = ', 36)
(9, '*', 5, ' = ', 45)
(9, '*', 6, ' = ', 54)
(9, '*', 7, ' = ', 63)
(9, '*', 8, ' = ', 72)
(9, '*', 9, ' = ', 81)
(9, '*', 10, ' = ', 90)
(9, '*', 11, ' = ', 99)
(9, '*', 12, ' = ', 108)
(10, '*', 1, ' = ', 10)
(10, '*', 2, ' = ', 20)
(10, '*', 3, ' = ', 30)
(10, '*', 4, ' = ', 40)
(10, '*', 5, ' = ', 50)
(10, '*', 6, ' = ', 60)
(10, '*', 7, ' = ', 70)
(10, '*', 8, ' = ', 80)
(10, '*', 9, ' = ', 90)
(10, '*', 10, ' = ', 100)
(10, '*', 11, ' = ', 110)
(10, '*', 12, ' = ', 120)
(11, '*', 1, ' = ', 11)
(11, '*', 2, ' = ', 22)
(11, '*', 3, ' = ', 33)
(11, '*', 4, ' = ', 44)
(11, '*', 5, ' = ', 55)
(11, '*', 6, ' = ', 66)
(11, '*', 7, ' = ', 77)
(11, '*', 8, ' = ', 88)
(11, '*', 9, ' = ', 99)
(11, '*', 10, ' = ', 110)
(11, '*', 11, ' = ', 121)
(11, '*', 12, ' = ', 132)
(12, '*', 1, ' = ', 12)
(12, '*', 2, ' = ', 24)
(12, '*', 3, ' = ', 36)
(12, '*', 4, ' = ', 48)
(12, '*', 5, ' = ', 60)
(12, '*', 6, ' = ', 72)
(12, '*', 7, ' = ', 84)
(12, '*', 8, ' = ', 96)
(12, '*', 9, ' = ', 108)
(12, '*', 10, ' = ', 120)
(12, '*', 11, ' = ', 132)
(12, '*', 12, ' = ', 144)
ian@ian-Aspire-One-753:~$ sloccount hello.py
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/hello.py to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
8       top_dir         python=8


Totals grouped by language (dominant language first):
python:           8 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 8
Development Effort Estimate, Person-Years (Person-Months) = 0.00 (0.02)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.04 (0.51)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.03
Total Estimated Cost to Develop                           = $ 170
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
ian@ian-Aspire-One-753:~$ 

