ian@ian-Aspire-One-753:~$ gfortran FIXPOINT.F -o fixpoint
ian@ian-Aspire-One-753:~$ ./fixpoint
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 FIXED POINT ITERATION IS USED TO FIND
  
 A FIXED POINT OF THE FUNCTION
  
 G(X) = 0.9 + X - 0.4*X*X
  
 ENTER THE STARTING VALUE P0 = 
0.09
  
 1          1.4972818
 2          1.5005405
 3          1.4998916
 4          1.5000216
 5          1.4999956
 6          1.5000008
 7          1.4999998
 8          1.4999999
 9          1.5000000
10          1.5000000
  
  
  
  
  
  
  
  
  
  
  
  
 FIXED POINT ITERATION WAS USED TO FIND FIXED POINT OF
  
 G(X) = 0.9 + X - 0.4*X*X
  
 THE STARTING POINT WAS  P(0) =   9.00000036E-02
  
 AFTER           10  ITERATIONS THE FIXED POINT WAS FOUND
  
     P  =   1.50000000    
  
 ITERATION WAS SUCCESSFUL.
  
            1.50000000      = G(   1.50000000       )
  
 CONSECUTIVE ITERATES ARE WITHIN   0.00000000    
  
 THE SEQUENCE EXHIBITS MONOTONE CONVERGENCE.
  
      WANT TO DO ANOTHER ONE <Y/N> ? 
y
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
 FIXED POINT ITERATION IS USED TO FIND
  
 A FIXED POINT OF THE FUNCTION
  
 G(X) = 0.9 + X - 0.4*X*X
  
 ENTER THE STARTING VALUE P0 = 
87.0
  
 1    ***************
 2    ***************
  
  
  
  
  
  
  
  
  
  
  
  
 FIXED POINT ITERATION WAS USED TO FIND FIXED POINT OF
  
 G(X) = 0.9 + X - 0.4*X*X
  
 THE STARTING POINT WAS  P(0) =   87.0000000    
  
 THE LOCATION OF THE FIXED POINT IS IN DOUBT.
  
 THE APPROXIMATION AFTER            2  ITERATIONS IS
  
 P(           2 ) =  -4.78773930E+12
  
           -4.78773930E+12  = G(  -3459673.25       )
  
 CONSECUTIVE ITERATES ARE WITHIN   4.78773563E+12
  
 THE SEQUENCE EXHIBITS MONOTONE DIVERGENCE.
  
      WANT TO DO ANOTHER ONE <Y/N> ? 
n
ian@ian-Aspire-One-753:~$ cat FIXPOINT.F
       PROGRAM FIXPOINT
C     NUMERICAL METHODS: FORTRAN Programs, (c) John H. Mathews 1994
C     To accompany the text:
C     NUMERICAL METHODS for Mathematics, Science and Engineering, 2nd Ed, 1992
C     Prentice Hall, Englewood Cliffs, New Jersey, 07632, U.S.A.
C     This free software is complements of the author.
C
C     Algorithm 2.1  (Fixed Point Iteration).
C     Section 2.1, Iteration for Solving  x = g(x), Page  51
C
C     Edited by Ian Martin Ajzenszmidt on 28 December 2020 in order to
C     make the program run and generate output. Please critique!. The
C     read input unit was changed from 9 to 5 and the write output unit
C     was changed from 9 to 6. some variable names were altered for
C     problem free parameter passing in subroutine calls.            
C     iajzenszmi@gmail.com
C     Melbourne. Australia
C     Original code Sourced from http://www.netlib.org/textbook/mathews/chap2.f               
      PARAMETER(Tol1=0.00000001,Max11=500)
      INTEGER Cond1,K1
      CHARACTER ANS
      REAL P01,Pnew1
      REAL Pterm1
      EXTERNAL G
 10   CALL GETPOINT(P01,Pterm1)
      CALL ITERATE(G,Pterm1,Max11,Tol1,Pnew1,Cond1,K1)
      CALL RESULTS(P01,Max11,Tol1,Pnew1,Pterm1,Cond1,K1)
      WRITE(6,*) "     WANT TO DO ANOTHER ONE <Y/N> ? "
      READ(5,"(A)") ANS
      IF(ANS .EQ. "Y" .OR. ANS .EQ. "y") GOTO 10
      STOP
      END program

      REAL FUNCTION G(X)
      REAL X
        G=0.9 + X - 0.4*X*X
      RETURN
      END

      SUBROUTINE PRINTFN
        WRITE(6,*)'G(X) = 0.9 + X - 0.4*X*X'
      RETURN
      END

      SUBROUTINE ITERATE(G,Pterm,Max12,Tol,Pnew,Cond,K)
      PARAMETER(Big=1E10,Small=1E-20)
      INTEGER Cond,K,Max12
      Real Pterm,Tol
      REAL Dx,Dg,Pold,RelErr,Slope
      EXTERNAL  G
      REAL Pnew
      K=0
      RelErr=1
      Pnew=G(Pterm)
      DO WHILE ((RelErr.GE.Tol).AND.(K.LE.Max12).AND.(ABS(Pnew).LT.Big))
        Pold=Pterm
        Pterm=Pnew
        Pnew=G(Pterm)
        Dg=Pnew-Pterm
        RelErr=ABS(Dg)/(ABS(Pnew)+Small)
        K=K+1
        WRITE(6,1000) K,Pnew
 !     REPEAT
      END DO
      Dx=Pterm-Pold
      IF (Dx.NE.0) THEN
          Slope=Dg/Dx
        ELSE
          Slope=6.023E23
        ENDIF
 !     ENDIF
      IF (ABS(Slope).LT.1) THEN
        Cond=1
        IF (Slope.LT.0) Cond=2
      ELSE
        Cond=3
        IF (Slope.LT.0) Cond=4
      ENDIF
      IF (RelErr.LT.Tol) THEN
        IF ((Cond.EQ.3).OR.(Cond.EQ.4)) Cond=5
      ENDIF
 !     PAUSE
      RETURN
1000  FORMAT(I2,4X,F15.7)
      END

      SUBROUTINE XITERATE(G,Pterm,Max15,Tol,Pnew,Cond,K)
C     This subroutine uses simulated WHILE loop(s).
      PARAMETER(Big=1E10,Small=1E-20)
      INTEGER Cond,K,Max15
      REAL Pnew,Pterm,Tol
      REAL Dx,Dg,Pold,RelErr,Slope
      K=0
      RelErr=1
      Pnew=G(Pterm)
10    IF ((RelErr.GE.Tol).AND.(K.LE.Max15)) THEN
        Pold=Pterm
        Pterm=Pnew
        Pnew=G(Pterm)
        Dg=Pnew-Pterm
        RelErr=ABS(Dg)/(ABS(Pnew)+Small)
        K=K+1
        IF ((Pnew.LT.(-Big)).OR.(Big.LT.Pnew)) GOTO 20
        WRITE(6,1000) K,Pnew
        GOTO 10
      ENDIF
20    CONTINUE  !Precludes Overflow
      IF (Dg.EQ.0) THEN
        Slope=0
      ELSE
        Dx=Pterm-Pold
        IF (Dx.NE.0) THEN
          Slope=Dg/Dx
        ELSE
          Slope=6.023E23
        ENDIF
      ENDIF
      IF (ABS(Slope).LT.1) THEN
        Cond=1
        IF (Slope.LT.0) Cond=2
      ELSE
        Cond=3
        IF (Slope.LT.0) Cond=4
      ENDIF
      IF (RelErr.LT.Tol) THEN
        IF ((Cond.EQ.3).OR.(Cond.EQ.4)) Cond=5
      ENDIF
!      PAUSE
      RETURN
1000  FORMAT(I2,4X,F15.7)
      END

      SUBROUTINE GETPOINT(P0, Pterm)
      REAL P0,Pterm
      DO 10 I=1,17
        WRITE(6,*)' '
10    CONTINUE
      WRITE(6,*)'FIXED POINT ITERATION IS USED TO FIND'
      WRITE(6,*)' '
      WRITE(6,*)'A FIXED POINT OF THE FUNCTION'
      WRITE(6,*)' '
      CALL PRINTFN
      WRITE(6,*)' '
      WRITE(6,*)'ENTER THE STARTING VALUE P0 = '
      READ(5,*)P0
      Pterm=P0
      WRITE(6,*)' '
      RETURN
      END

      SUBROUTINE RESULTS(P0,Max14,Tol,Pnew,Pterm,Cond,K)
      PARAMETER(Small=1E-20)
      INTEGER Cond,I,K,Max14
      REAL Delta,P0,Pnew,Pterm,RelErr,Tol
      DO 10 I=1,12
        WRITE(6,*)' '
10     CONTINUE
      WRITE(6,*)"FIXED POINT ITERATION WAS USED TO FIND FIXED POINT OF"
      WRITE(6,*)' '
      CALL PRINTFN
      WRITE(6,*)' '
      WRITE(6,*)'THE STARTING POINT WAS  P(0) =',P0
      WRITE(6,*)' '
      Delta=ABS(Pnew-Pterm)
      RelErr=Delta/(ABS(Pnew)+Small)
      IF (RelErr.LE.Tol) THEN
        WRITE(6,*)'AFTER ',K,' ITERATIONS THE FIXED POINT WAS FOUND'
        WRITE(6,*)' '
        WRITE(6,*)'    P  =',Pnew
        WRITE(6,*)' '
        WRITE(6,*)'ITERATION WAS SUCCESSFUL.'
      ELSE
        WRITE(6,*)'THE LOCATION OF THE FIXED POINT IS IN DOUBT.'
        WRITE(6,*)' '
        WRITE(6,*)'THE APPROXIMATION AFTER ',K,' ITERATIONS IS'
        WRITE(6,*)' '
        WRITE(6,*)'P(',K,') =',Pnew
       ENDIF
       WRITE(6,*)' '
       WRITE(6,*)'        ',Pnew,' = G(',Pterm,'  )'
      WRITE(6,*)' '
      WRITE(6,*)'CONSECUTIVE ITERATES ARE WITHIN',Delta
      WRITE(6,*)' '
      IF (K.GE.Max14) THEN
        WRITE(6,*)'THE MAXIMUM NUMBER OF ITERATIONS WAS EXCEEDED'
        WRITE(6,*)' '
      ENDIF
      IF (Cond.EQ.1) THEN
        WRITE(6,*)'THE SEQUENCE EXHIBITS MONOTONE CONVERGENCE.'
      ELSEIF (Cond.EQ.2) THEN
        WRITE(6,*)'THE SEQUENCE EXHIBITS OSCILLATING CONVERGENCE.'
      ELSEIF (Cond.EQ.3) THEN
        WRITE(6,*)'THE SEQUENCE EXHIBITS MONOTONE DIVERGENCE.'
      ELSEIF (Cond.EQ.4) THEN
        WRITE(6,*)'THE SEQUENCE EXHIBITS OSCILLATING DIVERGENCE.'
      ENDIF
      DO 20 I=1,1
        WRITE(6,*)' '
20    CONTINUE
      RETURN
      END














ian@ian-Aspire-One-753:~$ sloccount FIXPOINT.F
Have a non-directory at the top, so creating directory top_dir
Adding /home/ian/FIXPOINT.F to top_dir
Categorizing files.
Finding a working MD5 command....
Found a working MD5 command.
Computing results.


SLOC	Directory	SLOC-by-Language (Sorted)
173     top_dir         fortran=173


Totals grouped by language (dominant language first):
fortran:        173 (100.00%)




Total Physical Source Lines of Code (SLOC)                = 173
Development Effort Estimate, Person-Years (Person-Months) = 0.03 (0.38)
 (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
Schedule Estimate, Years (Months)                         = 0.14 (1.73)
 (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
Estimated Average Number of Developers (Effort/Schedule)  = 0.22
Total Estimated Cost to Develop                           = $ 4,281
 (average salary = $56,286/year, overhead = 2.40).
SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
redistribute it under certain conditions as specified by the GNU GPL license;
see the documentation for details.
Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."
ian@ian-Aspire-One-753:~$ 

